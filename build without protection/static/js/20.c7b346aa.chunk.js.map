{"version":3,"sources":["utils/api/company.js","utils/api/candidates.js"],"names":["URL","getToken","localStorage","getItem","getCompanies","page","isActive","withRecruiters","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","map","company","id","name","nazva","logo","email","skype","phone","recruiters","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","console","log","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","value","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","getAllCandidates","allCandidates","allCandidatesCount","allTotalPages","Page","allPerPage","currentAllPage","allPlatforms","allStatuses","allRecruiters","recruiter","allSeniority","loading","getSentCandidates","sentCandidates","sentCandidatesCount","sentTotalPages","sentPerPage","currentSentPage","sentPlatforms","sentCompanies","sentStatuses","sentRecruiters","loadingSent","getCandidatesFromFreelancers","candidatesFF","candidatesCountFF","totalPagesFF","perPageFF","statusesFF","currentPageFF","filterAndSortAllCandidates","filterAndSortSentCandidates","getCandidatesAmountByStatuses","selectedRecruiter","selectedCompany","selectedVacancy","selectedTag","startDate","endDate","recruiter_id","company_id","vacancy_id","tag_id","start_date","end_date","getCandidatesAmountByTags","getStatuses","getCandidatesAmountByVacancies","getCandidatesGrouped","changeStatus","candidateId","vacancyId","companyId","statusId","candidate_id","status_id"],"mappings":"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","file":"static/js/20.c7b346aa.chunk.js","sourcesContent":["const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive, withRecruiters = false) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}/${withRecruiters}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        recruiters: company.recruiters,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit companies comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\n\n\nexport const getAllCandidates = page => {\n  const token = getToken();\n  console.log(':::::getAllCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches sent candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getSentCandidates = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates sent by freelancer\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesFromFreelancers = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewCandidatesFreelancerOnVacancies/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesFromFreelancersData = {\n        candidatesFF: data.candidates,\n        candidatesCountFF: data.Count,\n        totalPagesFF: data.Page,\n        perPageFF: data.perPage,\n        statusesFF: data.statuses,\n        currentPageFF: data.currentPage\n      };\n\n      return candidatesFromFreelancersData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts all candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortAllCandidates = (page, filterAndSort) => {\n  const token = getToken();\n  console.log(':::::Filtered allCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortSentCandidates = (page, filterAndSort) => {\n  console.log(\"Filtered\", filterAndSort);\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByStatuses = (selectedRecruiter, selectedCompany, selectedVacancy, selectedTag, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByStatuses`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByTags = (selectedRecruiter, selectedCompany, selectedVacancy, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByTags`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      // tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getStatuses = () => {\n  const token = getToken();\n  return fetch(`${URL}/main/getStatuses`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByVacancies = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByVacancies`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesGrouped = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesGrouped`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * changes status on sent candidate\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const changeStatus = (candidateId, vacancyId, companyId, statusId) => {\n  const token = getToken();\n  return fetch(`${URL}/main/changeStatusOnVacancy`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      candidate_id: candidateId,\n      vacancy_id: vacancyId,\n      company_id: companyId,\n      status_id: statusId\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * changes status on sent candidate\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteSentCandidateFromVacancy = (candidateId, vacancyId, companyId) => {\n  const token = getToken();\n  return fetch(`${URL}/main/deleteSentCandidateFromVacancy`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      candidate_id: candidateId,\n      vacancy_id: vacancyId,\n      company_id: companyId,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n"],"sourceRoot":""}