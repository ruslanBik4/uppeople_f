{"version":3,"sources":["components/shared/Select.js","components/shared/Select.module.css","utils/api/company.js","components/shared/PaginationBackend.js","components/LocaleSelector.js","providers/Localization.js"],"names":["name","defaultValue","isMulti","isDisabled","closeMenuOnSelect","inputValue","value","options","components","theme","styles","selectOption","selectProps","setValue","placeholder","onChange","onInputChange","className","classNamePrefix","module","exports","URL","getToken","localStorage","getItem","getCompanies","page","isActive","withRecruiters","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","map","company","id","nazva","logo","email","skype","phone","recruiters","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","console","log","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","toLowerCase","isChecked","all_platforms","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","PaginationBackend","props","setPage","totalItems","pageSize","allDisabled","pager","state","getPager","setState","onChangePage","setInitialPage","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","i","this","prevProps","initialPage","loading","length","style","pointerEvents","disabled","onClick","index","active","Component","defaultProps","items","LocaleSelector","context","currentColumn","locales","top","bottom","changeLocale","topBottomArrow","classnames","icons","locale","scope","minWidth","padding","fontWeight","textAlign","background","border","contextType","LocalizationContext","createContext","sort","Localization","onSort","reversedSort","Provider","children","Consumer"],"mappings":"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","file":"static/js/10.09e17137.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport './Select.module.css'; \r\n// import makeAnimated from \"react-select/lib/animated\";\r\n\r\nexport default ({\r\n  name = \"select\",\r\n  defaultValue,\r\n  isMulti = false,\r\n  isDisabled = false,\r\n  closeMenuOnSelect,\r\n  inputValue,\r\n  value,\r\n  options,\r\n  components,\r\n  theme,\r\n  styles,\r\n  selectOption,\r\n  selectProps,\r\n  setValue,\r\n  placeholder,\r\n  onChange,\r\n  onInputChange\r\n}) => (\r\n  <Select\r\n    name={name}\r\n    styles={styles}\r\n    defaultValue={defaultValue}\r\n    isMulti={isMulti}\r\n    isDisabled={isDisabled}\r\n    inputValue={inputValue}\r\n    value={value}\r\n    options={options}\r\n    closeMenuOnSelect={closeMenuOnSelect}\r\n    components={components}\r\n    theme={theme}\r\n    selectOption={selectOption}\r\n    selectProps={selectProps}\r\n    setValue={setValue}\r\n    placeholder={placeholder}\r\n    className=\"basic-multi-select\"\r\n    classNamePrefix=\"select\"\r\n    onChange={onChange}\r\n    onInputChange={onInputChange}\r\n  />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select__menu\":\"Select_select__menu__3w_Fl\"};","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive, withRecruiters = false) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}/${withRecruiters}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        recruiters: company.recruiters,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit companies comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\n\r\nconst propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({})),\r\n  initialPage: PropTypes.number,\r\n  pageSize: PropTypes.number,\r\n  totalItems: PropTypes.number,\r\n  totalPages: PropTypes.number,\r\n  onChangePage: PropTypes.func,\r\n  loading: PropTypes.bool\r\n  // onPageChange: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  items: [],\r\n  initialPage: 1,\r\n  pageSize: 10,\r\n  totalItems: null,\r\n  totalPages: null,\r\n  onChangePage: () => null\r\n  // onPageChange: () => null\r\n};\r\n\r\nclass PaginationBackend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { pager: {} };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    // if (this.props.items && this.props.items.length) {\r\n    //   this.setPage(this.props.initialPage);\r\n    // }\r\n    this.setInitialPage();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log('update from PaginationBackend');\r\n    // reset page if initialPage has changed\r\n    if (\r\n      this.props.initialPage !== prevProps.initialPage ||\r\n      this.props.totalItems !== prevProps.totalItems\r\n    ) {\r\n      console.log('condition update from PaginationBackend');\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  setPage = page => {\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(page);\r\n    // this.props.onPageChange(page);\r\n\r\n  };\r\n\r\n  setInitialPage = () => {\r\n    let page = 1;\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n  }\r\n\r\n  getPager = (totalItems, currentPage, pageSize) => {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  };\r\n\r\n  render() {\r\n    let pager = this.state.pager;\r\n\r\n    const {loading} = this.props;\r\n\r\n    const loadingStyle = {\r\n      pointerEvents: \"none\",\r\n      // opacity: 0.4\r\n    }\r\n\r\n    const paginationStyle = {};\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n    // console.log(this);\r\n    return (\r\n      <Pagination style={loading ? loadingStyle : paginationStyle}  className=\"pagination justify-content-end\">\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink className=\"page-link\" onClick={() => this.setPage(1)}>\r\n            First\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage - 1)}\r\n          >\r\n            Previous\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        {pager.pages.map((page, index) => (\r\n          <PaginationItem\r\n            key={index}\r\n            className=\"page-item\"\r\n            active={pager.currentPage === page ? true : false}\r\n            disabled={this.allDisabled}\r\n          >\r\n            <PaginationLink\r\n              className=\"page-link\"\r\n              onClick={() => this.setPage(page)}\r\n            >\r\n              {page}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage + 1)}\r\n          >\r\n            Next\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.totalPages)}\r\n          >\r\n            Last\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  }\r\n}\r\n\r\nPaginationBackend.propTypes = propTypes;\r\nPaginationBackend.defaultProps = defaultProps;\r\n\r\nexport default PaginationBackend;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n// Context\r\nimport { LocalizationContext } from \"../providers/Localization\";\r\n\r\nexport class LocaleSelector extends Component {\r\n  static contextType = LocalizationContext;\r\n\r\n  render() {\r\n    const { currentColumn, locales, top, bottom, changeLocale } = this.context;\r\n\r\n    const topBottomArrow = classnames({\r\n      \"cui-arrow-top\": top,\r\n      \"cui-arrow-bottom\": bottom,\r\n      icons: true,\r\n      \"font-xs\": true\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {locales.map(locale => (\r\n          <th scope=\"col\" key={locale}>\r\n            <Button\r\n              style={{\r\n                minWidth: \"80px\",\r\n                padding: 0,\r\n                fontWeight: \"bold\",\r\n                textAlign: \"start\",\r\n                background: \"transparent\",\r\n                border: 0\r\n              }}\r\n              onClick={() => changeLocale(locale)}\r\n            >\r\n              {/* className={getBtnClass(locale, currentLocale)} */}\r\n              {locale}{\" \"}\r\n              <i className={currentColumn === locale ? topBottomArrow : \"\"} />\r\n            </Button>\r\n          </th>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocaleSelector;\r\n","import React, { Component, createContext } from \"react\";\r\n\r\nexport const LocalizationContext = createContext({\r\n  currentColumn: \"\",\r\n  locales: [],\r\n  sort: null,\r\n  top: true,\r\n  bottom: false,\r\n  changeLocale: () => null\r\n});\r\n\r\nexport default class Localization extends Component {\r\n  static Consumer = LocalizationContext.Consumer;\r\n\r\n  state = {\r\n    currentColumn: \"\",\r\n    locales: this.props.locales,\r\n    sort: null,\r\n    top: true,\r\n    bottom: false\r\n  };\r\n\r\n  changeLocale = locale => {\r\n    const { onSort } = this.props;\r\n\r\n    if (this.state.currentColumn !== locale) {\r\n      this.setState(\r\n        {\r\n          currentColumn: locale,\r\n          sort: 0,\r\n          top: false,\r\n          bottom: true\r\n        },\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    } else {\r\n      const reversedSort = this.state.sort === 0 ? 1 : 0;\r\n\r\n      this.setState(\r\n        state => ({\r\n          currentColumn: locale,\r\n          sort: reversedSort,\r\n          top: !state.top,\r\n          bottom: !state.bottom\r\n        }),\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LocalizationContext.Provider\r\n        value={{ ...this.state, changeLocale: this.changeLocale }}\r\n      >\r\n        {this.props.children}\r\n      </LocalizationContext.Provider>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}