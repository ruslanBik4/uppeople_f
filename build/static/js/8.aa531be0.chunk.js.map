{"version":3,"sources":["components/shared/Select.js","components/shared/Select.module.css","utils/api/company.js","components/shared/PaginationBackend.js","components/LocaleSelector.js","providers/Localization.js"],"names":["name","defaultValue","isMulti","isDisabled","closeMenuOnSelect","inputValue","value","options","components","theme","styles","selectOption","selectProps","setValue","placeholder","onChange","onInputChange","className","classNamePrefix","module","exports","URL","getToken","localStorage","getItem","getCompanies","page","isActive","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","map","company","id","nazva","logo","email","skype","phone","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","console","log","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","toLowerCase","isChecked","all_platforms","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","PaginationBackend","props","setPage","totalItems","pageSize","allDisabled","pager","state","getPager","setState","onChangePage","setInitialPage","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","i","this","prevProps","initialPage","loading","length","style","pointerEvents","disabled","onClick","index","active","Component","defaultProps","items","LocaleSelector","context","currentColumn","locales","top","bottom","changeLocale","topBottomArrow","classnames","icons","locale","scope","minWidth","padding","fontWeight","textAlign","background","border","contextType","LocalizationContext","createContext","sort","Localization","onSort","reversedSort","Provider","children","Consumer"],"mappings":"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","file":"static/js/8.aa531be0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport './Select.module.css'; \r\n// import makeAnimated from \"react-select/lib/animated\";\r\n\r\nexport default ({\r\n  name = \"select\",\r\n  defaultValue,\r\n  isMulti = false,\r\n  isDisabled = false,\r\n  closeMenuOnSelect,\r\n  inputValue,\r\n  value,\r\n  options,\r\n  components,\r\n  theme,\r\n  styles,\r\n  selectOption,\r\n  selectProps,\r\n  setValue,\r\n  placeholder,\r\n  onChange,\r\n  onInputChange\r\n}) => (\r\n  <Select\r\n    name={name}\r\n    styles={styles}\r\n    defaultValue={defaultValue}\r\n    isMulti={isMulti}\r\n    isDisabled={isDisabled}\r\n    inputValue={inputValue}\r\n    value={value}\r\n    options={options}\r\n    closeMenuOnSelect={closeMenuOnSelect}\r\n    components={components}\r\n    theme={theme}\r\n    selectOption={selectOption}\r\n    selectProps={selectProps}\r\n    setValue={setValue}\r\n    placeholder={placeholder}\r\n    className=\"basic-multi-select\"\r\n    classNamePrefix=\"select\"\r\n    onChange={onChange}\r\n    onInputChange={onInputChange}\r\n  />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select__menu\":\"Select_select__menu__3w_Fl\"};","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all companies from an api\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanies = (page, isActive) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Filters companies\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @param {Object} filter { name, email, skype, phone }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAllCompanies = (page, isActive, filter) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filter)\r\n  })\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Creates new company\r\n *\r\n * @param {Object} company new company object\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewCompany = async company => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewCompany`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(company)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's info by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companyInfo = {\r\n        name: data.nazva,\r\n        logo: data.logo,\r\n        phone: data.phone,\r\n        email: data.email,\r\n        skype: data.skype,\r\n        about: data.about,\r\n        map: data.map,\r\n        calendarEvents: data.calendar,\r\n        sendDetails: data.otpravka,\r\n        termsOfCooperation: data.uslovia,\r\n        interviewDetails: data.interview_detail,\r\n        contacts: data.contacts,\r\n        managers: data.manager\r\n      };\r\n\r\n      return companyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's candidates by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyCandidates = (id, page) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's comments from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyComments = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's vacancies\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacanciesData = {\r\n        vacancies: data.vacancies,\r\n        vacanciesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        candidateStatus: data.candidateStatus,\r\n        vacancyStatus: data.vacancyStatus,\r\n        platform: data.platforms,\r\n        seniority: data.seniorities\r\n      };\r\n\r\n      return vacanciesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's candidates\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Changes vacancy status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateVacancyStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Changes candidate status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCandidateStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's settings by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanySettings = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Uploads company's logo (image) to the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} file image to upload\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const uploadCompanyLogo = async (id, file) => {\r\n  const token = getToken();\r\n  const obj = {\r\n    logo: file\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company's settings on the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} companyInfo {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfo = async (id, companyInfo) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(companyInfo)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Posts user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} comment contains key 'comment' with text (comment) value\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addUserComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Edit companies comment\r\n *\r\n * @param {Number} id comment id\r\n * @param {String} comment comment\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} commentId comment id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteUserComment = async (id, commentId) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentId)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches contact info from an api\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getContactInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const contactState = {\r\n        contact: {\r\n          id: data.id,\r\n          name: data.name,\r\n          email: data.email,\r\n          phone: data.phone,\r\n          skype: data.skype,\r\n          selectedPlatforms: data.platforms.map(platform => {\r\n            const arrOfPlatforms = Object.values(platform.platform);\r\n\r\n            const selectedPlatforms = {\r\n              id: arrOfPlatforms[0],\r\n              label: arrOfPlatforms[1],\r\n              value: arrOfPlatforms[1].toLowerCase()\r\n            };\r\n\r\n            return selectedPlatforms;\r\n          })\r\n        },\r\n        isChecked: data.all_platforms === 1 ? true : false,\r\n        isDisabled: data.all_platforms === 1 ? true : false\r\n      };\r\n\r\n      return contactState;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Adds contact into company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates contact in company profile\r\n *\r\n * @param {Number} id contact id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes contact from company profile\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCompanyContact = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company info in company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfoProfile = (id, content) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editInformations/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(content)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      for (const key in data) {\r\n        if (key === \"otpravka\") {\r\n          const sendDetails = {\r\n            sendDetails: data[key]\r\n          };\r\n          return sendDetails;\r\n        } else if (key === \"interview_detail\") {\r\n          const interviewDetails = {\r\n            interviewDetails: data[key]\r\n          };\r\n          return interviewDetails;\r\n        } else if (key === \"about\") {\r\n          const about = {\r\n            about: data[key]\r\n          };\r\n          return about;\r\n        } else {\r\n          return data;\r\n        }\r\n      }\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\n\r\nconst propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({})),\r\n  initialPage: PropTypes.number,\r\n  pageSize: PropTypes.number,\r\n  totalItems: PropTypes.number,\r\n  totalPages: PropTypes.number,\r\n  onChangePage: PropTypes.func,\r\n  loading: PropTypes.bool\r\n  // onPageChange: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  items: [],\r\n  initialPage: 1,\r\n  pageSize: 10,\r\n  totalItems: null,\r\n  totalPages: null,\r\n  onChangePage: () => null\r\n  // onPageChange: () => null\r\n};\r\n\r\nclass PaginationBackend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { pager: {} };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    // if (this.props.items && this.props.items.length) {\r\n    //   this.setPage(this.props.initialPage);\r\n    // }\r\n    this.setInitialPage();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log('update from PaginationBackend');\r\n    // reset page if initialPage has changed\r\n    if (\r\n      this.props.initialPage !== prevProps.initialPage ||\r\n      this.props.totalItems !== prevProps.totalItems\r\n    ) {\r\n      console.log('condition update from PaginationBackend');\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  setPage = page => {\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(page);\r\n    // this.props.onPageChange(page);\r\n\r\n  };\r\n\r\n  setInitialPage = () => {\r\n    let page = 1;\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n  }\r\n\r\n  getPager = (totalItems, currentPage, pageSize) => {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  };\r\n\r\n  render() {\r\n    let pager = this.state.pager;\r\n\r\n    const {loading} = this.props;\r\n\r\n    const loadingStyle = {\r\n      pointerEvents: \"none\",\r\n      // opacity: 0.4\r\n    }\r\n\r\n    const paginationStyle = {};\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n    // console.log(this);\r\n    return (\r\n      <Pagination style={loading ? loadingStyle : paginationStyle}  className=\"pagination justify-content-end\">\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink className=\"page-link\" onClick={() => this.setPage(1)}>\r\n            First\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage - 1)}\r\n          >\r\n            Previous\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        {pager.pages.map((page, index) => (\r\n          <PaginationItem\r\n            key={index}\r\n            className=\"page-item\"\r\n            active={pager.currentPage === page ? true : false}\r\n            disabled={this.allDisabled}\r\n          >\r\n            <PaginationLink\r\n              className=\"page-link\"\r\n              onClick={() => this.setPage(page)}\r\n            >\r\n              {page}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage + 1)}\r\n          >\r\n            Next\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.totalPages)}\r\n          >\r\n            Last\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  }\r\n}\r\n\r\nPaginationBackend.propTypes = propTypes;\r\nPaginationBackend.defaultProps = defaultProps;\r\n\r\nexport default PaginationBackend;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n// Context\r\nimport { LocalizationContext } from \"../providers/Localization\";\r\n\r\nexport class LocaleSelector extends Component {\r\n  static contextType = LocalizationContext;\r\n\r\n  render() {\r\n    const { currentColumn, locales, top, bottom, changeLocale } = this.context;\r\n\r\n    const topBottomArrow = classnames({\r\n      \"cui-arrow-top\": top,\r\n      \"cui-arrow-bottom\": bottom,\r\n      icons: true,\r\n      \"font-xs\": true\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {locales.map(locale => (\r\n          <th scope=\"col\" key={locale}>\r\n            <Button\r\n              style={{\r\n                minWidth: \"80px\",\r\n                padding: 0,\r\n                fontWeight: \"bold\",\r\n                textAlign: \"start\",\r\n                background: \"transparent\",\r\n                border: 0\r\n              }}\r\n              onClick={() => changeLocale(locale)}\r\n            >\r\n              {/* className={getBtnClass(locale, currentLocale)} */}\r\n              {locale}{\" \"}\r\n              <i className={currentColumn === locale ? topBottomArrow : \"\"} />\r\n            </Button>\r\n          </th>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocaleSelector;\r\n","import React, { Component, createContext } from \"react\";\r\n\r\nexport const LocalizationContext = createContext({\r\n  currentColumn: \"\",\r\n  locales: [],\r\n  sort: null,\r\n  top: true,\r\n  bottom: false,\r\n  changeLocale: () => null\r\n});\r\n\r\nexport default class Localization extends Component {\r\n  static Consumer = LocalizationContext.Consumer;\r\n\r\n  state = {\r\n    currentColumn: \"\",\r\n    locales: this.props.locales,\r\n    sort: null,\r\n    top: true,\r\n    bottom: false\r\n  };\r\n\r\n  changeLocale = locale => {\r\n    const { onSort } = this.props;\r\n\r\n    if (this.state.currentColumn !== locale) {\r\n      this.setState(\r\n        {\r\n          currentColumn: locale,\r\n          sort: 0,\r\n          top: false,\r\n          bottom: true\r\n        },\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    } else {\r\n      const reversedSort = this.state.sort === 0 ? 1 : 0;\r\n\r\n      this.setState(\r\n        state => ({\r\n          currentColumn: locale,\r\n          sort: reversedSort,\r\n          top: !state.top,\r\n          bottom: !state.bottom\r\n        }),\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LocalizationContext.Provider\r\n        value={{ ...this.state, changeLocale: this.changeLocale }}\r\n      >\r\n        {this.props.children}\r\n      </LocalizationContext.Provider>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}