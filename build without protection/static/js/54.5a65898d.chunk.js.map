{"version":3,"sources":["components/Dashboard/Card/Card.js","components/Dashboard/SparkLineChart/SparkLineChart.js","components/Dashboard/SparkLineChart/Form.js","assets/data/dashboard/cards.js","components/Dashboard/Dashboard.js","utils/selectors.js"],"names":["DashboardCard","state","dropdownOpen","toggle","setState","this","props","card","amount","history","links","map","link","DropdownItem","key","id","onClick","push","route","title","Card","className","color","style","minHeight","CardBody","ButtonGroup","ButtonDropdown","isOpen","DropdownToggle","caret","DropdownMenu","right","desc","time","Component","defaultProps","withRouter","brandPrimary","getStyle","brandDanger","SparkLineChart","data","dataArray","Object","values","reducedStatuses","reduce","acc","value","review","Review","interview","Interview","statuses","name","amountCandidates","sparkLineChartData","getSparkLineChartData","dataKeys","keys","sparkLine","arr","arrOfKeys","status","idx","colorSparkLine","Col","sm","toUpperCase","makeSparkLineData","options","sparklineChartOpts","width","height","sparkLineData","chart","objWithStatuses","Progress","String","chartData","legend","Badge","pill","CardHeader","moment","format","Row","display","justifyContent","DashboardForm","dateFrom","dateTo","handleInputChange","target","onFilter","Form","xs","md","lg","FormGroup","Input","type","onChange","companies","vacancies","recruiters","freelancers","candidates","calendar","interviews","offerCandidates","Dashboard","dashboardData","companiesWithCandidates","vacanciesOnCandidates","countCandidatesOnVacancies","countUsersAndFreelancers","countCompanies","countVacancies","countVacanciesOnPlatforms","worseVacancies","countOfferCandidates","usersWithoutOfferCandidates","usersOnCandidates","countVacanciesOpenAndHot","dateFilter","filterData","filter","filterDataForAdminDashboard","then","countRevInterComp","countRevInterVac","countReviewAndInterviewCandidatesOnVacancies","countUsersAndFreelancer","countCom","countVac","countVacanciesOpenAndHotForPlatform","listNotSendVacancies","offersCandidates","allCount","users","topUsers","loading","getDataForAdminDashboard","amountRecruiters","isEmpty","Recruiter","amountFreelancers","Freelancer","amountVacancies","amountVacanciesOnPlatformsJSX","pct","toFixed","sparkLineChartDataCompanies","sparkLineChartDataVacancies","candidatesOnStatus","usersWithCandidatesOnReviewStatus","length","user","role","amountReviewCandidates","count","usersWithCandidatesOnReviewStatusJSX","src","alt","usersWithCandidatesOnInterviewStatus","amountInterviewCandidates","usersWithCandidatesOnInterviewStatusJSX","listOfWorstVacancies","vacancy","Link","to","listOfWorstUsers","cards","xl","Button","size","data-toggle","data-placement","data-original-title","Table","hover","responsive","obj","hasOwnProperty","getBase64","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","label","concat","dataSetNo","variant","labels","dataset","datasets","backgroundColor","borderColor","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","xAxes","yAxes","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"mappings":"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","file":"static/js/54.5a65898d.chunk.js","sourcesContent":["// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  ButtonGroup,\r\n  ButtonDropdown,\r\n  Card,\r\n  CardBody,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from \"reactstrap\";\r\n\r\nclass DashboardCard extends Component {\r\n  static propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    desc: PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    color: \"primary\",\r\n    title: \"\",\r\n    amount: null,\r\n    desc: \"\"\r\n  };\r\n\r\n  state = {\r\n    dropdownOpen: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { card, amount, history } = this.props;\r\n\r\n    const links =\r\n      card.links &&\r\n      card.links.map(link => (\r\n        <DropdownItem key={link.id} onClick={() => history.push(link.route)}>\r\n          {link.title}\r\n        </DropdownItem>\r\n      ));\r\n\r\n    return (\r\n      <Card\r\n        className={`text-white bg-${card.color}`}\r\n        style={{ minHeight: \"113px\" }}\r\n      >\r\n        <CardBody>\r\n          <ButtonGroup className=\"float-right\">\r\n            {links && (\r\n              <ButtonDropdown\r\n                id={card.title}\r\n                isOpen={this.state.dropdownOpen}\r\n                toggle={this.toggle}\r\n              >\r\n                <DropdownToggle caret className=\"p-0\" color=\"transparent\">\r\n                  <i className=\"icon-link\" />\r\n                </DropdownToggle>\r\n                <DropdownMenu right>{links}</DropdownMenu>\r\n              </ButtonDropdown>\r\n            )}\r\n          </ButtonGroup>\r\n          {card.title && (\r\n            <div className=\"text-value\">\r\n              {card.title}: {amount}\r\n            </div>\r\n          )}\r\n          <div>{card.desc}</div>\r\n          {card.time && <div>on {card.time}</div>}\r\n          {/* <div className=\"chart-wrapper mt-3\" style={{ height: \"70px\" }}>\r\n          <Line\r\n            data={cardChartData2}\r\n            options={cardChartOpts2}\r\n            height={70}\r\n          />\r\n        </div> */}\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DashboardCard);\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Badge,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Col,\r\n  Progress,\r\n  Row\r\n} from \"reactstrap\";\r\nimport { Line } from \"react-chartjs-2\";\r\n// Instruments\r\nimport { getStyle } from \"@coreui/coreui-pro/dist/js/coreui-utilities\";\r\nimport {\r\n  getSparkLineChartData,\r\n  makeSparkLineData,\r\n  sparklineChartOpts\r\n} from \"../../../utils/selectors\";\r\n\r\nconst brandPrimary = getStyle(\"--primary\");\r\nconst brandDanger = getStyle(\"--danger\");\r\n\r\nconst SparkLineChart = ({ title, data }) => {\r\n  const reducingReviewInterviewStatus = arr =>\r\n    arr.reduce(\r\n      (acc, value) => {\r\n        const review = value.Review ? acc.review + value.Review : acc.review;\r\n        const interview = value.Interview\r\n          ? acc.interview + value.Interview\r\n          : acc.interview;\r\n\r\n        return {\r\n          review,\r\n          interview\r\n        };\r\n      },\r\n      { review: 0, interview: 0 }\r\n    );\r\n\r\n  const sparkLineData = (arr, sparkLineChartData, arrOfKeys) => {\r\n    return arr.map((status, idx) => {\r\n      const colorSparkLine = idx === 0 ? brandPrimary : brandDanger;\r\n\r\n      return (\r\n        <Col key={`${status.name}-${status.amountCandidates}`} sm=\"6\">\r\n          <div className=\"callout callout-info\">\r\n            <small className=\"text-muted\">{status.name.toUpperCase()}</small>\r\n            <br />\r\n            <strong className=\"h4\">{status.amountCandidates}</strong>\r\n            <div className=\"chart-wrapper\">\r\n              <Line\r\n                data={makeSparkLineData(\r\n                  idx,\r\n                  colorSparkLine,\r\n                  sparkLineChartData,\r\n                  arrOfKeys\r\n                )}\r\n                options={sparklineChartOpts}\r\n                width={100}\r\n                height={30}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      );\r\n    });\r\n  };\r\n\r\n  const chartData = (arr, objWithStatuses) =>\r\n    arr.map(value => {\r\n      const review = objWithStatuses[value].Review;\r\n      const interview = objWithStatuses[value].Interview;\r\n\r\n      return (\r\n        <div\r\n          className=\"progress-group mb-4\"\r\n          key={`${value}-${review}-${interview}`}\r\n        >\r\n          <div className=\"progress-group-prepend\">\r\n            <span className=\"progress-group-text\">{value}</span>\r\n          </div>\r\n          <div className=\"progress-group-bars\">\r\n            <Progress\r\n              className=\"progress-xs\"\r\n              color=\"info\"\r\n              value={String(review)}\r\n            />\r\n            <Progress\r\n              className=\"progress-xs\"\r\n              color=\"danger\"\r\n              value={String(interview)}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n  const dataArray = Object.values(data);\r\n\r\n  const reducedStatuses = reducingReviewInterviewStatus(dataArray);\r\n\r\n  const { review, interview } = reducedStatuses;\r\n\r\n  const sparkLineChartDataReview = getSparkLineChartData(dataArray, \"Review\");\r\n\r\n  const sparkLineChartDataInterview = getSparkLineChartData(\r\n    dataArray,\r\n    \"Interview\"\r\n  );\r\n\r\n  const statuses = [\r\n    { name: \"Review\", amountCandidates: review },\r\n    { name: \"Interview\", amountCandidates: interview }\r\n  ];\r\n\r\n  const sparkLineChartData = [\r\n    sparkLineChartDataReview,\r\n    sparkLineChartDataInterview\r\n  ];\r\n\r\n  const dataKeys = Object.keys(data);\r\n\r\n  const sparkLine = sparkLineData(statuses, sparkLineChartData, dataKeys);\r\n\r\n  const chart = chartData(dataKeys, data);\r\n\r\n  const legend = statuses.map((status, idx) => {\r\n    const color = idx === 0 ? \"info\" : \"danger\";\r\n\r\n    return (\r\n      <div key={status.name}>\r\n        <sup className=\"px-1\">\r\n          <Badge pill color={color}>\r\n            &nbsp;\r\n          </Badge>\r\n        </sup>\r\n        {status.name} &nbsp;\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>{`${title} of ${moment().format(\"MMMM\")}`}</CardHeader>\r\n      <CardBody>\r\n        <Row>{sparkLine}</Row>\r\n        <hr className=\"mt-0\" />\r\n        {chart}\r\n        <div className=\"legend text-center\">\r\n          <small style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {legend}\r\n          </small>\r\n        </div>\r\n        <br />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nSparkLineChart.propTypes = {\r\n  title: PropTypes.string,\r\n  data: PropTypes.shape({})\r\n};\r\n\r\nSparkLineChart.defaultProps = {\r\n  title: \"\",\r\n  data: {}\r\n};\r\n\r\nexport default SparkLineChart;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Form, FormGroup, Input, Row } from \"reactstrap\";\r\n\r\nclass DashboardForm extends Component {\r\n  static propTypes = {\r\n    onFilter: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    dateFrom: \"\",\r\n    dateTo: \"\"\r\n  };\r\n\r\n  handleInputChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value }, () => this.props.onFilter(this.state));\r\n  };\r\n\r\n  render() {\r\n    const { dateFrom, dateTo } = this.state;\r\n\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col xs={12} sm={12} md={6} lg={6}>\r\n            <FormGroup>\r\n              <Input\r\n                id=\"date-from\"\r\n                type=\"date\"\r\n                name=\"dateFrom\"\r\n                value={dateFrom}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col xs={12} sm={12} md={6} lg={6}>\r\n            <FormGroup>\r\n              <Input\r\n                id=\"date-to\"\r\n                type=\"date\"\r\n                name=\"dateTo\"\r\n                value={dateTo}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardForm;\r\n","import moment from \"moment\";\r\n\r\nexport const companies = {\r\n  id: \"1\",\r\n  color: \"primary\",\r\n  title: \"Companies\",\r\n  desc: \"Amount of companies with vacancies in Open/Hot status\",\r\n  links: [\r\n    { title: \"Companies\", route: \"/companies\" },\r\n    { title: \"Vacancies\", route: \"/vacancies\" }\r\n  ]\r\n};\r\n\r\nexport const vacancies = {\r\n  id: \"2\",\r\n  color: \"primary\",\r\n  title: \"Vacancies\",\r\n  desc: \"Amount of vacancies in Open/Hot status\",\r\n  links: [\r\n    { title: \"Vacancies\", route: \"/vacancies\" },\r\n    { title: \"Companies\", route: \"/companies\" }\r\n  ]\r\n};\r\n\r\nexport const recruiters = {\r\n  id: \"3\",\r\n  color: \"info\",\r\n  title: \"Recruiters\",\r\n  desc: \"Amount of recruiters\",\r\n  links: [{ title: \"Users\", route: \"/users\" }]\r\n};\r\n\r\nexport const freelancers = {\r\n  id: \"4\",\r\n  color: \"info\",\r\n  title: \"Freelancers\",\r\n  desc: \"Amount of freelancers\",\r\n  links: [{ title: \"Users\", route: \"/users\" }]\r\n};\r\n\r\nexport const candidates = {\r\n  id: \"5\",\r\n  color: \"danger\",\r\n  title: \"Candidates\",\r\n  desc: \"Amount of candidates sent on vacancies\",\r\n  links: [\r\n    { title: \"Candidates\", route: \"/candidates\" },\r\n    { title: \"Vacancies\", route: \"/vacancies\" }\r\n  ],\r\n  time: moment().calendar()\r\n};\r\n\r\nexport const interviews = {\r\n  id: \"6\",\r\n  color: \"danger\",\r\n  title: \"Interviews\",\r\n  desc: \"Amount of scheduled interviews\",\r\n  links: [{ title: \"Candidates\", route: \"/candidates\" }],\r\n  time: moment().calendar()\r\n};\r\n\r\nexport const offerCandidates = {\r\n  id: \"7\",\r\n  color: \"success\",\r\n  title: \"OFFER Candidates\",\r\n  desc: \"Amount of candidates with offer\",\r\n  links: [{ title: \"Candidates\", route: \"/candidates\" }],\r\n  time: moment().format(\"MMMM YYYY\")\r\n};\r\n","// Core\nimport React, {Component} from \"react\";\nimport moment from \"moment\";\nimport {Link} from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Progress,\n  Row,\n  Table\n} from \"reactstrap\";\n// Components\nimport DashboardCard from \"./Card/Card\";\nimport SparkLineChart from \"./SparkLineChart/SparkLineChart\";\nimport DashboardForm from \"./SparkLineChart/Form\";\n// Instruments\nimport * as cards from \"../../assets/data/dashboard/cards\";\nimport {getStyle} from \"@coreui/coreui-pro/dist/js/coreui-utilities\";\nimport {\n  getDataForAdminDashboard,\n  filterDataForAdminDashboard\n} from \"../../utils/api\";\nimport {isEmpty} from \"../../utils/selectors\";\n\nconst brandPrimary = getStyle(\"--primary\");\n\nexport default class Dashboard extends Component {\n  state = {\n    dashboardData: {\n      companiesWithCandidates: {},\n      vacanciesOnCandidates: {},\n      countCandidatesOnVacancies: {},\n      countUsersAndFreelancers: {},\n      countCompanies: null,\n      countVacancies: null,\n      countVacanciesOnPlatforms: {},\n      worseVacancies: [],\n      countOfferCandidates: null,\n      usersWithoutOfferCandidates: [],\n      usersOnCandidates: [],\n      countVacanciesOpenAndHot: {}\n    },\n    dateFilter: {\n      dateFrom: \"\",\n      dateTo: \"\"\n    }\n  };\n\n  componentDidMount() {\n    getDataForAdminDashboard().then(data => {\n      if (data) {\n        const dashboardData = {\n          companiesWithCandidates: data.countRevInterComp,\n          vacanciesOnCandidates: data.countRevInterVac,\n          countCandidatesOnVacancies:\n          data.countReviewAndInterviewCandidatesOnVacancies,\n          countUsersAndFreelancers: data.countUsersAndFreelancer,\n          countCompanies: data.countVacanciesOpenAndHot.countCom,\n          countVacancies: data.countVacanciesOpenAndHot.countVac,\n          countVacanciesOnPlatforms: data.countVacanciesOpenAndHotForPlatform,\n          worseVacancies: data.listNotSendVacancies,\n          countOfferCandidates: data.offersCandidates.allCount,\n          usersWithoutOfferCandidates: data.offersCandidates.users,\n          usersOnCandidates: data.topUsers,\n          countVacanciesOpenAndHot: data.countVacanciesOpenAndHot\n        };\n\n        this.setState({\n          ...this.state,\n          dashboardData\n        });\n      }\n    });\n  }\n\n  filterData = filter => {\n    this.setState(\n      {\n        dateFilter: filter\n      },\n      () => {\n        const {dateFilter} = this.state;\n\n        filterDataForAdminDashboard(dateFilter).then(data => {\n          const dashboardData = {\n            companiesWithCandidates: data.countRevInterComp,\n            vacanciesOnCandidates: data.countRevInterVac,\n            countCandidatesOnVacancies:\n            data.countReviewAndInterviewCandidatesOnVacancies,\n            countUsersAndFreelancers: data.countUsersAndFreelancer,\n            countCompanies: data.countVacanciesOpenAndHot.countCom,\n            countVacancies: data.countVacanciesOpenAndHot.countVac,\n            countVacanciesOnPlatforms: data.countVacanciesOpenAndHotForPlatform,\n            worseVacancies: data.listNotSendVacancies,\n            countOfferCandidates: data.offersCandidates.allCount,\n            usersWithoutOfferCandidates: data.offersCandidates.users,\n            usersOnCandidates: data.topUsers,\n            countVacanciesOpenAndHot: data.countVacanciesOpenAndHot\n          };\n\n          this.setState({\n            ...this.state,\n            dashboardData\n          });\n        });\n      }\n    );\n  };\n\n  loading = () => (\n    <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n  );\n\n  render() {\n    const {\n      dashboardData: {\n        countCompanies,\n        countVacancies,\n        countUsersAndFreelancers,\n        countVacanciesOnPlatforms,\n        companiesWithCandidates,\n        vacanciesOnCandidates,\n        countCandidatesOnVacancies,\n        usersOnCandidates,\n        countOfferCandidates,\n        usersWithoutOfferCandidates,\n        worseVacancies\n      }\n    } = this.state;\n\n    const amountRecruiters = !isEmpty(countUsersAndFreelancers)\n      ? countUsersAndFreelancers.Recruiter\n      : null;\n\n    const amountFreelancers = !isEmpty(countUsersAndFreelancers)\n      ? countUsersAndFreelancers.Freelancer\n      : null;\n\n    const amountVacancies =\n      !isEmpty(countVacanciesOnPlatforms) &&\n      Object.values(countVacanciesOnPlatforms).reduce(\n        (acc, value) => acc + value,\n        0\n      );\n\n    // sorts an array with numbers, but it's completely not that we want\n    // const arrValues =\n    //   !isEmpty(this.state.dashboardData) &&\n    //   descSort(Object.values(countVacanciesOnPlatforms));\n\n    const amountVacanciesOnPlatformsJSX =\n      amountVacancies &&\n      Object.keys(countVacanciesOnPlatforms).map(key => {\n        const vacanciesOnPlatform = countVacanciesOnPlatforms[key];\n\n        const pct = ((vacanciesOnPlatform / amountVacancies) * 100).toFixed(1);\n\n        return (\n          <li key={key} className=\"progress-group\">\n            <div className=\"progress-group-header\">\n              <i className=\"icon-globe progress-group-icon\"/>\n              <span className=\"title\">{key}</span>\n              <span className=\"ml-auto font-weight-bold\">\n                {countVacanciesOnPlatforms[key]}{\" \"}\n                <span className=\"text-muted small\">\n                  ({pct}\n                  {\"%\"})\n                </span>\n              </span>\n            </div>\n            <div className=\"progress-group-bars\">\n              <Progress className=\"progress-xs\" color=\"success\" value={pct}/>\n            </div>\n          </li>\n        );\n      });\n\n    const sparkLineChartDataCompanies = !isEmpty(companiesWithCandidates)\n      ? companiesWithCandidates\n      : {};\n\n    const sparkLineChartDataVacancies = !isEmpty(vacanciesOnCandidates)\n      ? vacanciesOnCandidates\n      : {};\n\n    const candidatesOnStatus =\n      !isEmpty(countCandidatesOnVacancies) && countCandidatesOnVacancies;\n\n    const {Review, Interview} = candidatesOnStatus;\n\n    const usersWithCandidatesOnReviewStatus =\n      usersOnCandidates.length > 0 &&\n      usersOnCandidates.reduce((acc, user) => {\n        if (acc) {\n          user.role !== \"Admin\" && user.status === \"Review\" && acc.push(user);\n        }\n\n        return acc;\n      }, []);\n\n    const amountReviewCandidates =\n      usersWithCandidatesOnReviewStatus.length > 0 &&\n      usersWithCandidatesOnReviewStatus.reduce(\n        (acc, user) => acc + user.count,\n        0\n      );\n\n    const usersWithCandidatesOnReviewStatusJSX =\n      usersWithCandidatesOnReviewStatus.length > 0 &&\n      usersWithCandidatesOnReviewStatus.map(user => {\n        const pct = ((user.count / amountReviewCandidates) * 100).toFixed();\n\n        return (\n          <tr key={user.id}>\n            <td className=\"text-center\">\n              <div className=\"avatar\">\n                <img\n                  src={\"assets/img/avatars/1.jpg\"}\n                  className=\"img-avatar\"\n                  alt=\"admin@bootstrapmaster.com\"\n                />\n                <span className=\"avatar-status badge-success\"/>\n              </div>\n            </td>\n            <td>\n              <div>{user.name}</div>\n              {/* <div className=\"small text-muted\">\n                <span>New</span> | Registered: Jan 1, 2015\n              </div> */}\n            </td>\n            <td className=\"text-center\">{user.role}</td>\n            <td>\n              <div className=\"clearfix\">\n                <div className=\"float-left\">\n                  <strong>{`${user.count} (${String(pct)}%)`}</strong>\n                </div>\n                <div className=\"float-right\">\n                  <small className=\"text-muted\">\n                    on {moment().format(\"MMMM YYYY\")}\n                  </small>\n                </div>\n              </div>\n              <Progress\n                className=\"progress-xs\"\n                color=\"success\"\n                value={`${String(pct)}`}\n              />\n            </td>\n          </tr>\n        );\n      });\n\n    const usersWithCandidatesOnInterviewStatus =\n      usersOnCandidates.length > 0 &&\n      usersOnCandidates.reduce((acc, user) => {\n        if (acc) {\n          user.role !== \"Admin\" &&\n          user.status === \"Interview\" &&\n          acc.push(user);\n        }\n\n        return acc;\n      }, []);\n\n    const amountInterviewCandidates =\n      usersWithCandidatesOnInterviewStatus.length > 0 &&\n      usersWithCandidatesOnInterviewStatus.reduce(\n        (acc, user) => acc + user.count,\n        0\n      );\n\n    const usersWithCandidatesOnInterviewStatusJSX =\n      usersWithCandidatesOnInterviewStatus.length > 0 &&\n      usersWithCandidatesOnInterviewStatus.map(user => {\n        const pct = ((user.count / amountInterviewCandidates) * 100).toFixed();\n\n        return (\n          <tr key={user.id}>\n            <td className=\"text-center\">\n              <div className=\"avatar\">\n                <img\n                  src={\"assets/img/avatars/1.jpg\"}\n                  className=\"img-avatar\"\n                  alt=\"admin@bootstrapmaster.com\"\n                />\n                <span className=\"avatar-status badge-success\"/>\n              </div>\n            </td>\n            <td>\n              <div>{user.name}</div>\n              {/* <div className=\"small text-muted\">\n                <span>New</span> | Registered: Jan 1, 2015\n              </div> */}\n            </td>\n            <td className=\"text-center\">{user.role}</td>\n            <td>\n              <div className=\"clearfix\">\n                <div className=\"float-left\">\n                  <strong>{`${user.count} (${String(pct)}%)`}</strong>\n                </div>\n                <div className=\"float-right\">\n                  <small className=\"text-muted\">\n                    on {moment().format(\"MMMM YYYY\")}\n                  </small>\n                </div>\n              </div>\n              <Progress\n                className=\"progress-xs\"\n                color=\"success\"\n                value={`${String(pct)}`}\n              />\n            </td>\n          </tr>\n        );\n      });\n\n    const listOfWorstVacancies =\n      worseVacancies.length > 0 &&\n      worseVacancies.map(vacancy => (\n        <tr key={vacancy.id}>\n          <td>\n            <Link to={`/vacancies/${vacancy.id}`}>{vacancy.vacancy}</Link>\n          </td>\n        </tr>\n      ));\n\n    const listOfWorstUsers =\n      usersWithoutOfferCandidates.length > 0 &&\n      usersWithoutOfferCandidates.map(user => (\n        <tr key={user.id}>\n          <td>\n            <Link to={`/users/${user.id}`}>{user.name}</Link>\n          </td>\n        </tr>\n      ));\n\n    return (\n      <div className=\"animated fadeIn\">\n        <DashboardForm onFilter={this.filterData}/>\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard card={cards.candidates} amount={Review}/>\n          </Col>\n\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard card={cards.interviews} amount={Interview}/>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard\n              card={cards.offerCandidates}\n              amount={countOfferCandidates}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader>Amount of vacancies in Open/Hot status</CardHeader>\n              <CardBody>\n                <Row>\n                  <Col xs=\"12\" md=\"12\" xl=\"12\">\n                    <Row>\n                      {/* <Col sm=\"6\">\n                        <div className=\"callout callout-warning\">\n                          <small className=\"text-muted\">Pageviews</small>\n                          <br />\n                          <strong className=\"h4\">78,623</strong>\n                          <div className=\"chart-wrapper\">\n                            <Line\n                              data={makeSparkLineData(2, brandWarning)}\n                              options={sparklineChartOpts}\n                              width={100}\n                              height={30}\n                            />\n                          </div>\n                        </div>\n                      </Col> */}\n                      <Col sm=\"12\">\n                        <div className=\"callout callout-success\">\n                          <small className=\"text-muted\">\n                            {\"Vacancies\".toUpperCase()}\n                          </small>\n                          <br/>\n                          <strong className=\"h4\">{amountVacancies}</strong>\n                          {/* <div className=\"chart-wrapper\">\n                            <Line\n                              data={makeSparkLineData(3, brandSuccess)}\n                              options={sparklineChartOpts}\n                              width={100}\n                              height={30}\n                            />\n                          </div> */}\n                        </div>\n                      </Col>\n                    </Row>\n                    <hr className=\"mt-0\"/>\n                    <ul className=\"pl-0\">\n                      {amountVacanciesOnPlatformsJSX}\n                      <div className=\"divider text-center\">\n                        <Button\n                          color=\"link\"\n                          size=\"sm\"\n                          className=\"text-muted\"\n                          data-toggle=\"tooltip\"\n                          data-placement=\"top\"\n                          title=\"\"\n                          data-original-title=\"show more\"\n                        >\n                          <i className=\"icon-options\"/>\n                        </Button>\n                      </div>\n                    </ul>\n                  </Col>\n                </Row>\n                <br/>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <SparkLineChart\n              title=\"Companies with candidates in Review/Interview status\"\n              data={sparkLineChartDataCompanies}\n            />\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <SparkLineChart\n              title=\"Vacancies with candidates in Review/Interview status\"\n              data={sparkLineChartDataVacancies}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard\n              card={cards.companies}\n              amount={countCompanies}\n              brandPrimary={brandPrimary}\n            />\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard card={cards.vacancies} amount={countVacancies}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard card={cards.recruiters} amount={amountRecruiters}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard\n              card={cards.freelancers}\n              amount={amountFreelancers}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>Users with candidates in Review status</CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">\n                      <i className=\"icon-people\"/>\n                    </th>\n                    <th>User</th>\n                    <th className=\"text-center\">Role</th>\n                    <th>Pct</th>\n                  </tr>\n                  </thead>\n                  <tbody>{usersWithCandidatesOnReviewStatusJSX}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>Users with candidates in Interview status</CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">\n                      <i className=\"icon-people\"/>\n                    </th>\n                    <th>User</th>\n                    <th className=\"text-center\">Role</th>\n                    <th>Pct</th>\n                  </tr>\n                  </thead>\n                  <tbody>{usersWithCandidatesOnInterviewStatusJSX}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>\n                Vacancies on which didn't send any candidate at last 10 days\n              </CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <tbody>{listOfWorstVacancies}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>\n                Users who don't have candidates with offer at last 60 days\n              </CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <tbody>{listOfWorstUsers}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","import { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\n\r\nexport const isEmpty = obj => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getBase64 = (file, cb) => {\r\n  let reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.onload = function() {\r\n    cb(reader.result);\r\n  };\r\n  reader.onerror = function(error) {\r\n    console.log(\"Error: \", error);\r\n  };\r\n};\r\n\r\nexport const descSort = arr => {\r\n  return arr.sort((a, b) => b - a);\r\n};\r\n\r\nexport const getSparkLineChartData = (arr, label) =>\r\n  arr.reduce(\r\n    (acc, value) => {\r\n      const data = value[label]\r\n        ? acc.data.concat(value[label])\r\n        : acc.data.concat(0);\r\n\r\n      return {\r\n        data,\r\n        label\r\n      };\r\n    },\r\n    { data: [], label }\r\n  );\r\n\r\nexport const makeSparkLineData = (\r\n  dataSetNo,\r\n  variant,\r\n  sparkLineChartData,\r\n  labels\r\n) => {\r\n  const dataset = sparkLineChartData[dataSetNo];\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: \"transparent\",\r\n        borderColor: variant ? variant : \"#c2cfd6\",\r\n        data: dataset.data,\r\n        label: dataset.label\r\n      }\r\n    ]\r\n  };\r\n  return () => data;\r\n};\r\n\r\nexport const sparklineChartOpts = {\r\n  tooltips: {\r\n    enabled: false,\r\n    custom: CustomTooltips\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: true,\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        display: false\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        display: false\r\n      }\r\n    ]\r\n  },\r\n  elements: {\r\n    line: {\r\n      borderWidth: 2\r\n    },\r\n    point: {\r\n      radius: 0,\r\n      hitRadius: 10,\r\n      hoverRadius: 4,\r\n      hoverBorderWidth: 3\r\n    }\r\n  },\r\n  legend: {\r\n    display: false\r\n  }\r\n};\r\n"],"sourceRoot":""}