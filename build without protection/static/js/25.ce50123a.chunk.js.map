{"version":3,"sources":["utils/api/company.js","utils/api/vacancy.js","utils/api/users.js","utils/api/candidates.js"],"names":["URL","getToken","localStorage","getItem","getCompanies","page","isActive","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","map","company","id","name","nazva","logo","email","skype","phone","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","console","log","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","value","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","getVacancyProfile","vacancy","date","date_create","status","location","salary","link","description","opus","details","createNewVacancy","updateVacancy","deleteVacancy","getVacancies","company_id","getTags","params","getUsers","staff","users","partners","freelancers","freeLancers","getAllCandidates","allCandidates","allCandidatesCount","allTotalPages","Page","allPerPage","currentAllPage","allPlatforms","allStatuses","allRecruiters","recruiter","allSeniority","loading","getSentCandidates","sentCandidates","sentCandidatesCount","sentTotalPages","sentPerPage","currentSentPage","sentPlatforms","sentCompanies","sentStatuses","sentRecruiters","loadingSent","getCandidatesFromFreelancers","candidatesFF","candidatesCountFF","totalPagesFF","perPageFF","statusesFF","currentPageFF","filterAndSortAllCandidates","filterAndSortSentCandidates","getCandidatesAmountByStatuses","selectedRecruiter","selectedCompany","selectedVacancy","selectedTag","startDate","endDate","recruiter_id","vacancy_id","tag_id","start_date","end_date","getCandidatesAmountByTags","getStatuses"],"mappings":"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","file":"static/js/25.ce50123a.chunk.js","sourcesContent":["const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all companies from an api\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanies = (page, isActive) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Filters companies\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @param {Object} filter { name, email, skype, phone }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAllCompanies = (page, isActive, filter) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filter)\r\n  })\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Creates new company\r\n *\r\n * @param {Object} company new company object\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewCompany = async company => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewCompany`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(company)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's info by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companyInfo = {\r\n        name: data.nazva,\r\n        logo: data.logo,\r\n        phone: data.phone,\r\n        email: data.email,\r\n        skype: data.skype,\r\n        about: data.about,\r\n        map: data.map,\r\n        calendarEvents: data.calendar,\r\n        sendDetails: data.otpravka,\r\n        termsOfCooperation: data.uslovia,\r\n        interviewDetails: data.interview_detail,\r\n        contacts: data.contacts,\r\n        managers: data.manager\r\n      };\r\n\r\n      return companyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's candidates by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyCandidates = (id, page) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's comments from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyComments = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's vacancies\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacanciesData = {\r\n        vacancies: data.vacancies,\r\n        vacanciesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        candidateStatus: data.candidateStatus,\r\n        vacancyStatus: data.vacancyStatus,\r\n        platform: data.platforms,\r\n        seniority: data.seniorities\r\n      };\r\n\r\n      return vacanciesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's candidates\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Changes vacancy status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateVacancyStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Changes candidate status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCandidateStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's settings by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanySettings = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Uploads company's logo (image) to the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} file image to upload\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const uploadCompanyLogo = async (id, file) => {\r\n  const token = getToken();\r\n  const obj = {\r\n    logo: file\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company's settings on the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} companyInfo {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfo = async (id, companyInfo) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(companyInfo)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Posts user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} comment contains key 'comment' with text (comment) value\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addUserComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Edit companies comment\r\n *\r\n * @param {Number} id comment id\r\n * @param {String} comment comment\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} commentId comment id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteUserComment = async (id, commentId) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentId)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches contact info from an api\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getContactInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const contactState = {\r\n        contact: {\r\n          id: data.id,\r\n          name: data.name,\r\n          email: data.email,\r\n          phone: data.phone,\r\n          skype: data.skype,\r\n          selectedPlatforms: data.platforms.map(platform => {\r\n            const arrOfPlatforms = Object.values(platform.platform);\r\n\r\n            const selectedPlatforms = {\r\n              id: arrOfPlatforms[0],\r\n              label: arrOfPlatforms[1],\r\n              value: arrOfPlatforms[1].toLowerCase()\r\n            };\r\n\r\n            return selectedPlatforms;\r\n          })\r\n        },\r\n        isChecked: data.all_platforms === 1 ? true : false,\r\n        isDisabled: data.all_platforms === 1 ? true : false\r\n      };\r\n\r\n      return contactState;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Adds contact into company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates contact in company profile\r\n *\r\n * @param {Number} id contact id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes contact from company profile\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCompanyContact = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company info in company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfoProfile = (id, content) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editInformations/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(content)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      for (const key in data) {\r\n        if (key === \"otpravka\") {\r\n          const sendDetails = {\r\n            sendDetails: data[key]\r\n          };\r\n          return sendDetails;\r\n        } else if (key === \"interview_detail\") {\r\n          const interviewDetails = {\r\n            interviewDetails: data[key]\r\n          };\r\n          return interviewDetails;\r\n        } else if (key === \"about\") {\r\n          const about = {\r\n            about: data[key]\r\n          };\r\n          return about;\r\n        } else {\r\n          return data;\r\n        }\r\n      }\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches vacancy profile by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancyProfile = id => {\n  const token = getToken();\n  // console.log(\"vacancy before\");\n  return fetch(`${URL}/main/viewVacancy/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n/**\n * Creates new vacancy object\n *\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewVacancy = async vacancy => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(vacancy)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n *  Updates vacancy by id\n *\n * @param {Number} id vacancy id\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancy = (id, vacancy) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editVacancy/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(vacancy)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n      console.log(\"vacancy response\", data);\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Removes vacancy by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteVacancy = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteVacancy/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n\n/**\n * Gets vacancies object\n *\n * @param {Object} vacancies {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancies = async company_id => {\n  const token = getToken();\n  try {\n    console.log(token);\n    const response = await fetch(`${URL}/main/returnAllVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        company_id: company_id\n      })\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n//antonmlz_web2\n//3nSJ&Yx&\n\n/**\n * Gets vacancies object\n *\n * @param {Array} tags {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const getTags = async params => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/getTags`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all users from an api\r\n *\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getUsers = () => {\r\n  const token = getToken();\r\n\r\n  return fetch(`${URL}/admin/all-staff`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const users = {\r\n        staff: data.users,\r\n        partners: data.partners,\r\n        freelancers: data.freeLancers\r\n      };\r\n\r\n      return users;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\n\n\nexport const getAllCandidates = page => {\n  const token = getToken();\n  console.log(':::::getAllCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches sent candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getSentCandidates = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates sent by freelancer\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesFromFreelancers = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewCandidatesFreelancerOnVacancies/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesFromFreelancersData = {\n        candidatesFF: data.candidates,\n        candidatesCountFF: data.Count,\n        totalPagesFF: data.Page,\n        perPageFF: data.perPage,\n        statusesFF: data.statuses,\n        currentPageFF: data.currentPage\n      };\n\n      return candidatesFromFreelancersData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts all candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortAllCandidates = (page, filterAndSort) => {\n  const token = getToken();\n  console.log(':::::Filtered allCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortSentCandidates = (page, filterAndSort) => {\n  console.log(\"Filtered\", filterAndSort);\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByStatuses = (selectedRecruiter, selectedCompany, selectedVacancy, selectedTag, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByStatuses`, {\n  // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByTags = (selectedRecruiter, selectedCompany, selectedVacancy, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByTags`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      // tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getStatuses = () => {\n  const token = getToken();\n  return fetch(`${URL}/main/getStatuses`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n"],"sourceRoot":""}