{"version":3,"sources":["components/shared/Select.js","components/shared/Select.module.css","components/shared/PaginationBackend.js","utils/api/company.js","components/shared/ModalToDelete.js","providers/Localization.js","components/LocaleSelector.js","components/hoc/ModalForLetter/withModalForLetter.js","components/hoc/ModalForLetter/ModalForLetter.module.css","utils/api/vacancy.js","utils/api/freelancer.js","components/Vacancies/Form.js","components/Freelancer/SendCandidateForm.js","components/Freelancer/containers/SendFormContainer.js","components/Vacancies/TableRow.js","components/Vacancies/Table.js","components/Vacancies/Vacancies.js"],"names":["name","defaultValue","isMulti","isDisabled","closeMenuOnSelect","inputValue","value","options","components","theme","styles","selectOption","selectProps","setValue","placeholder","onChange","onInputChange","className","classNamePrefix","module","exports","PaginationBackend","props","setPage","page","totalItems","totalPages","pageSize","allDisabled","pager","state","getPager","setState","onChangePage","setInitialPage","currentPage","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","map","i","this","prevProps","console","log","initialPage","loading","length","style","pointerEvents","disabled","onClick","index","key","active","Component","defaultProps","items","URL","getToken","localStorage","getItem","getCompanies","isActive","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","company","id","nazva","logo","email","skype","phone","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","Pages","current_page","perPage","per_page","catch","error","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","toLowerCase","isChecked","all_platforms","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","ModalToDelete","modal","isOpenModal","toggle","onRequestClose","title","onDelete","isOpen","color","LocalizationContext","createContext","currentColumn","locales","sort","top","bottom","changeLocale","Localization","locale","onSort","reversedSort","Provider","children","Consumer","LocaleSelector","context","topBottomArrow","classnames","icons","scope","minWidth","padding","fontWeight","textAlign","background","border","contextType","withModalForLetter","WrappedComponent","toggleModal","nextProps","getVacancyProfile","vacancy","date","date_create","status","location","salary","link","description","opus","details","createNewVacancy","updateVacancy","deleteVacancy","getVacanciesForFreelancer","addVacanciesForFreelancer","vacanciesToAdd","deleteVacanciesFromFreelancer","vacanciesToDelete","getCandidates","platformId","sendCandidateForVacancy","updateRecruiterForFreelancer","getDataForSendResumeForm","candidateId","vacancyId","candId","objCompany","emailTemplate","emailTemplay","text","emailSubject","subject","filterFreelancerVacancies","VacanciesForm","selectPlatforms","selectSeniorities","selectCandidateStatus","selectStatuses","handlePlatformChange","onFilter","handleSeniorityChange","handleCandidateStatusChange","handleVacancyStatusChange","prevState","userRole","Form","Row","Col","lg","md","FormGroup","Select","INITIAL_STATE","checkedCandidates","Map","FreelancerSendCandidateForm","handleCheckboxCandidateChange","target","checked","item","set","handleSubmit","e","preventDefault","companyId","sendCandidate","checkedCandidatesEntries","from","resetForm","candidatesJSX","candidate","ListGroupItem","width","platId","CustomInput","type","get","onSubmit","marginBottom","Label","for","Button","FreelancerSendFormContainer","WithModalFreelancerSendCandidateForm","VacanciesTableRow","onDeleteVacancy","onChangeVacancyStatus","Link","to","moment","format","find","paddingLeft","marginRight","textDecoration","showModal","hideModal","margin","backgroundColor","borderColor","VacanciesTable","vacanciesJSX","idx","colSpan","align","role","aria-label","Table","responsive","hover","localesVacancies","Vacancies","vacanciesData","filterAndSortVacancies","updateVacanciesData","changeVacancyStatus","user","display","justifyContent","maxWidth","fontSize","alignSelf","xl","xs","sm"],"mappings":"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","file":"static/js/15.c06bb4a0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport './Select.module.css'; \r\n// import makeAnimated from \"react-select/lib/animated\";\r\n\r\nexport default ({\r\n  name = \"select\",\r\n  defaultValue,\r\n  isMulti = false,\r\n  isDisabled = false,\r\n  closeMenuOnSelect,\r\n  inputValue,\r\n  value,\r\n  options,\r\n  components,\r\n  theme,\r\n  styles,\r\n  selectOption,\r\n  selectProps,\r\n  setValue,\r\n  placeholder,\r\n  onChange,\r\n  onInputChange\r\n}) => (\r\n  <Select\r\n    name={name}\r\n    styles={styles}\r\n    defaultValue={defaultValue}\r\n    isMulti={isMulti}\r\n    isDisabled={isDisabled}\r\n    inputValue={inputValue}\r\n    value={value}\r\n    options={options}\r\n    closeMenuOnSelect={closeMenuOnSelect}\r\n    components={components}\r\n    theme={theme}\r\n    selectOption={selectOption}\r\n    selectProps={selectProps}\r\n    setValue={setValue}\r\n    placeholder={placeholder}\r\n    className=\"basic-multi-select\"\r\n    classNamePrefix=\"select\"\r\n    onChange={onChange}\r\n    onInputChange={onInputChange}\r\n  />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select__menu\":\"Select_select__menu__3aDwY\"};","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\n\r\nconst propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({})),\r\n  initialPage: PropTypes.number,\r\n  pageSize: PropTypes.number,\r\n  totalItems: PropTypes.number,\r\n  totalPages: PropTypes.number,\r\n  onChangePage: PropTypes.func,\r\n  loading: PropTypes.bool\r\n  // onPageChange: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  items: [],\r\n  initialPage: 1,\r\n  pageSize: 10,\r\n  totalItems: null,\r\n  totalPages: null,\r\n  onChangePage: () => null\r\n  // onPageChange: () => null\r\n};\r\n\r\nclass PaginationBackend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { pager: {} };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    // if (this.props.items && this.props.items.length) {\r\n    //   this.setPage(this.props.initialPage);\r\n    // }\r\n    this.setInitialPage();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log('update from PaginationBackend');\r\n    // reset page if initialPage has changed\r\n    if (\r\n      this.props.initialPage !== prevProps.initialPage ||\r\n      this.props.totalItems !== prevProps.totalItems\r\n    ) {\r\n      console.log('condition update from PaginationBackend');\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  setPage = page => {\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(page);\r\n    // this.props.onPageChange(page);\r\n\r\n  };\r\n\r\n  setInitialPage = () => {\r\n    let page = 1;\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n  }\r\n\r\n  getPager = (totalItems, currentPage, pageSize) => {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  };\r\n\r\n  render() {\r\n    let pager = this.state.pager;\r\n\r\n    const {loading} = this.props;\r\n\r\n    const loadingStyle = {\r\n      pointerEvents: \"none\",\r\n      // opacity: 0.4\r\n    }\r\n\r\n    const paginationStyle = {};\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n    // console.log(this);\r\n    return (\r\n      <Pagination style={loading ? loadingStyle : paginationStyle}  className=\"pagination justify-content-end\">\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink className=\"page-link\" onClick={() => this.setPage(1)}>\r\n            First\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage - 1)}\r\n          >\r\n            Previous\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        {pager.pages.map((page, index) => (\r\n          <PaginationItem\r\n            key={index}\r\n            className=\"page-item\"\r\n            active={pager.currentPage === page ? true : false}\r\n            disabled={this.allDisabled}\r\n          >\r\n            <PaginationLink\r\n              className=\"page-link\"\r\n              onClick={() => this.setPage(page)}\r\n            >\r\n              {page}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage + 1)}\r\n          >\r\n            Next\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.totalPages)}\r\n          >\r\n            Last\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  }\r\n}\r\n\r\nPaginationBackend.propTypes = propTypes;\r\nPaginationBackend.defaultProps = defaultProps;\r\n\r\nexport default PaginationBackend;\r\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all companies from an api\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanies = (page, isActive) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Filters companies\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @param {Object} filter { name, email, skype, phone }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAllCompanies = (page, isActive, filter) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filter)\r\n  })\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Creates new company\r\n *\r\n * @param {Object} company new company object\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewCompany = async company => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewCompany`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(company)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's info by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companyInfo = {\r\n        name: data.nazva,\r\n        logo: data.logo,\r\n        phone: data.phone,\r\n        email: data.email,\r\n        skype: data.skype,\r\n        about: data.about,\r\n        map: data.map,\r\n        calendarEvents: data.calendar,\r\n        sendDetails: data.otpravka,\r\n        termsOfCooperation: data.uslovia,\r\n        interviewDetails: data.interview_detail,\r\n        contacts: data.contacts,\r\n        managers: data.manager\r\n      };\r\n\r\n      return companyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's candidates by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyCandidates = (id, page) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's comments from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyComments = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's vacancies\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacanciesData = {\r\n        vacancies: data.vacancies,\r\n        vacanciesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        candidateStatus: data.candidateStatus,\r\n        vacancyStatus: data.vacancyStatus,\r\n        platform: data.platforms,\r\n        seniority: data.seniorities\r\n      };\r\n\r\n      return vacanciesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's candidates\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Changes vacancy status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateVacancyStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Changes candidate status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCandidateStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's settings by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanySettings = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Uploads company's logo (image) to the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} file image to upload\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const uploadCompanyLogo = async (id, file) => {\r\n  const token = getToken();\r\n  const obj = {\r\n    logo: file\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company's settings on the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} companyInfo {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfo = async (id, companyInfo) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(companyInfo)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Posts user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} comment contains key 'comment' with text (comment) value\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addUserComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Edit companies comment\r\n *\r\n * @param {Number} id comment id\r\n * @param {String} comment comment\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} commentId comment id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteUserComment = async (id, commentId) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentId)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches contact info from an api\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getContactInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const contactState = {\r\n        contact: {\r\n          id: data.id,\r\n          name: data.name,\r\n          email: data.email,\r\n          phone: data.phone,\r\n          skype: data.skype,\r\n          selectedPlatforms: data.platforms.map(platform => {\r\n            const arrOfPlatforms = Object.values(platform.platform);\r\n\r\n            const selectedPlatforms = {\r\n              id: arrOfPlatforms[0],\r\n              label: arrOfPlatforms[1],\r\n              value: arrOfPlatforms[1].toLowerCase()\r\n            };\r\n\r\n            return selectedPlatforms;\r\n          })\r\n        },\r\n        isChecked: data.all_platforms === 1 ? true : false,\r\n        isDisabled: data.all_platforms === 1 ? true : false\r\n      };\r\n\r\n      return contactState;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Adds contact into company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates contact in company profile\r\n *\r\n * @param {Number} id contact id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes contact from company profile\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCompanyContact = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company info in company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfoProfile = (id, content) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editInformations/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(content)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      for (const key in data) {\r\n        if (key === \"otpravka\") {\r\n          const sendDetails = {\r\n            sendDetails: data[key]\r\n          };\r\n          return sendDetails;\r\n        } else if (key === \"interview_detail\") {\r\n          const interviewDetails = {\r\n            interviewDetails: data[key]\r\n          };\r\n          return interviewDetails;\r\n        } else if (key === \"about\") {\r\n          const about = {\r\n            about: data[key]\r\n          };\r\n          return about;\r\n        } else {\r\n          return data;\r\n        }\r\n      }\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"reactstrap\";\r\n\r\nexport default class ModalToDelete extends Component {\r\n  state = {\r\n    modal: this.props.isOpenModal\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(state => ({\r\n      modal: !state.modal\r\n    }));\r\n\r\n    const { onRequestClose } = this.props;\r\n    onRequestClose();\r\n  };\r\n\r\n  render() {\r\n    const { modal } = this.state;\r\n    const { title, name, className, onDelete } = this.props;\r\n\r\n    return (\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={this.toggle}\r\n        className={`modal-danger \" + ${className ? className : \"\"}`}\r\n      >\r\n        <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\r\n        <ModalBody>{`Are you sure to delete ${name}?`}</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>\r\n            Delete\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={this.toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, createContext } from \"react\";\r\n\r\nexport const LocalizationContext = createContext({\r\n  currentColumn: \"\",\r\n  locales: [],\r\n  sort: null,\r\n  top: true,\r\n  bottom: false,\r\n  changeLocale: () => null\r\n});\r\n\r\nexport default class Localization extends Component {\r\n  static Consumer = LocalizationContext.Consumer;\r\n\r\n  state = {\r\n    currentColumn: \"\",\r\n    locales: this.props.locales,\r\n    sort: null,\r\n    top: true,\r\n    bottom: false\r\n  };\r\n\r\n  changeLocale = locale => {\r\n    const { onSort } = this.props;\r\n\r\n    if (this.state.currentColumn !== locale) {\r\n      this.setState(\r\n        {\r\n          currentColumn: locale,\r\n          sort: 0,\r\n          top: false,\r\n          bottom: true\r\n        },\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    } else {\r\n      const reversedSort = this.state.sort === 0 ? 1 : 0;\r\n\r\n      this.setState(\r\n        state => ({\r\n          currentColumn: locale,\r\n          sort: reversedSort,\r\n          top: !state.top,\r\n          bottom: !state.bottom\r\n        }),\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LocalizationContext.Provider\r\n        value={{ ...this.state, changeLocale: this.changeLocale }}\r\n      >\r\n        {this.props.children}\r\n      </LocalizationContext.Provider>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n// Context\r\nimport { LocalizationContext } from \"../providers/Localization\";\r\n\r\nexport class LocaleSelector extends Component {\r\n  static contextType = LocalizationContext;\r\n\r\n  render() {\r\n    const { currentColumn, locales, top, bottom, changeLocale } = this.context;\r\n\r\n    const topBottomArrow = classnames({\r\n      \"cui-arrow-top\": top,\r\n      \"cui-arrow-bottom\": bottom,\r\n      icons: true,\r\n      \"font-xs\": true\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {locales.map(locale => (\r\n          <th scope=\"col\" key={locale}>\r\n            <Button\r\n              style={{\r\n                minWidth: \"80px\",\r\n                padding: 0,\r\n                fontWeight: \"bold\",\r\n                textAlign: \"start\",\r\n                background: \"transparent\",\r\n                border: 0\r\n              }}\r\n              onClick={() => changeLocale(locale)}\r\n            >\r\n              {/* className={getBtnClass(locale, currentLocale)} */}\r\n              {locale}{\" \"}\r\n              <i className={currentColumn === locale ? topBottomArrow : \"\"} />\r\n            </Button>\r\n          </th>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocaleSelector;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\n// Instruments\r\nimport styles from \"./ModalForLetter.module.css\";\r\n\r\nconst withModalForLetter = WrappedComponent =>\r\n  class withModalForLetter extends Component {\r\n    state = {\r\n      modal: false\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps) {\r\n      if (nextProps) {\r\n        return {\r\n          modal: nextProps.isOpenModal\r\n        };\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    toggleModal = () => {\r\n      this.setState(state => ({\r\n        modal: !state.modal\r\n      }));\r\n\r\n      const { onRequestClose } = this.props;\r\n      onRequestClose();\r\n    };\r\n\r\n    render() {\r\n      const { modal } = this.state;\r\n      const { title } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <Modal\r\n            isOpen={modal}\r\n            toggle={this.toggleModal}\r\n            className={`modal-success \" + ${styles.modal}`}\r\n          >\r\n            <ModalHeader toggle={this.toggleModal}>{title}</ModalHeader>\r\n            <ModalBody>\r\n              {modal && <WrappedComponent {...this.props} />}\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default withModalForLetter;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalForLetter_modal__wIKv1\"};","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches vacancy profile by id from an api\r\n *\r\n * @param {Number} id vacancy id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getVacancyProfile = id => {\r\n  const token = getToken();\r\n  // console.log(\"vacancy before\");\r\n  return fetch(`${URL}/main/viewVacancy/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacancy = data[0];\r\n\r\n      const vacancyInfo = {\r\n        id: vacancy.id,\r\n        date: vacancy.date_create,\r\n        company: vacancy.company,\r\n        platform: vacancy.platforms,\r\n        seniority: vacancy.seniorities,\r\n        status: vacancy.status,\r\n        location: vacancy.location,\r\n        salary: vacancy.salary,\r\n        link: vacancy.link,\r\n        description: vacancy.opus,\r\n        details: vacancy.details\r\n      };\r\n\r\n      return vacancyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n/**\r\n * Creates new vacancy object\r\n *\r\n * @param {Object} vacancy {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewVacancy = async vacancy => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewVacancy`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(vacancy)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n *  Updates vacancy by id\r\n *\r\n * @param {Number} id vacancy id\r\n * @param {Object} vacancy {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateVacancy = (id, vacancy) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editVacancy/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(vacancy)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacancy = data[0];\r\n      console.log(\"vacancy response\", data);\r\n      const vacancyInfo = {\r\n        id: vacancy.id,\r\n        date: vacancy.date_create,\r\n        company: vacancy.company,\r\n        platform: vacancy.platforms,\r\n        seniority: vacancy.seniorities,\r\n        status: vacancy.status,\r\n        location: vacancy.location,\r\n        salary: vacancy.salary,\r\n        link: vacancy.link,\r\n        description: vacancy.opus,\r\n        details: vacancy.details\r\n      };\r\n\r\n      return vacancyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Removes vacancy by id from an api\r\n *\r\n * @param {Number} id vacancy id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteVacancy = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteVacancy/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all vacancies for freelancer\r\n *\r\n * @param {Number} id freelancer id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getVacanciesForFreelancer = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/vacancyForFreelancer/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Adds vacancies for freelancer\r\n *\r\n * @param {Number} id freelancer id\r\n * @param {Array} vacanciesToAdd Array of vacancies' objects\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addVacanciesForFreelancer = async (id, vacanciesToAdd) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addVacancyForFreelancer/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(vacanciesToAdd)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes vacancies from freelancer\r\n *\r\n * @param {Number} id freelancer id\r\n * @param {Array} vacanciesToDelete Array of vacancies' objects\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteVacanciesFromFreelancer = async (id, vacanciesToDelete) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(\r\n      `${URL}/main/deleteVacancyForFreelancer/${id}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(vacanciesToDelete)\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches freelancer's candidates by platform\r\n *\r\n * @param {Number} platformId platform id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCandidates = async platformId => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(\r\n      `${URL}/main/viewCandForVacFreelancer/${platformId}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Sends candidate on vacancy\r\n *\r\n * @param {Object} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const sendCandidateForVacancy = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/sendCandFreelancer`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Changes recruiter for freelancer\r\n *\r\n * @param {Object} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateRecruiterForFreelancer = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/admin/updateRecruiter`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches data for Send resume form\r\n *\r\n * @param {Number} candidateId candidate id\r\n * @param {Number} vacancyId vacancy id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getDataForSendResumeForm = (candidateId, vacancyId) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/interview/viewInformationForSendCV/${candidateId}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(vacancyId)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidateId = data.candId;\r\n\r\n      const objCompany = data.companies;\r\n      const companies = Object.values(objCompany);\r\n\r\n      const emailTemplate = data.emailTemplay.text;\r\n      const emailSubject = data.subject;\r\n\r\n      const dataForSendResume = {\r\n        candidateId,\r\n        companies,\r\n        emailTemplate,\r\n        emailSubject\r\n      };\r\n\r\n      return dataForSendResume;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Filters vacancies\r\n *\r\n * @param {Number} id freelancer id\r\n * @param {Object} filter object of selected platforms, seniorities, companies\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterFreelancerVacancies = async (id, filter) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/vacancyForFreelancer/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(filter)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Form, FormGroup, Row } from \"reactstrap\";\r\n// Components\r\nimport Select from \"../shared/Select\";\r\n\r\nexport default class VacanciesForm extends Component {\r\n  static propTypes = {\r\n    userRole: PropTypes.number.isRequired,\r\n    platform: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    seniority: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    candidateStatus: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    vacancyStatus: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    onFilter: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    selectPlatforms: [],\r\n    selectSeniorities: [],\r\n    selectCandidateStatus: [],\r\n    selectStatuses: []\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { vacancyStatus } = this.props;\r\n    const { selectStatuses } = this.state;\r\n\r\n    if (prevProps.vacancyStatus.length === 0) {\r\n      const selectStatuses = vacancyStatus.map(status =>\r\n        status.id === 0 || status.id === 1 ? status : null\r\n      );\r\n      this.setState({\r\n        selectStatuses\r\n      });\r\n    } else if (selectStatuses.length !== prevState.selectStatuses.length) {\r\n      this.setState({\r\n        selectStatuses\r\n      });\r\n    }\r\n  }\r\n\r\n  handlePlatformChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectPlatforms: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleSeniorityChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectSeniorities: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleCandidateStatusChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectCandidateStatus: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleVacancyStatusChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectStatuses: value\r\n      },\r\n      () => {\r\n        // console.log(\"this.state.selectStatuses: \", this.state.selectStatuses);\r\n\r\n        onFilter(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { platform, seniority, candidateStatus, vacancyStatus } = this.props;\r\n    const {\r\n      selectPlatforms,\r\n      selectSeniorities,\r\n      selectCandidateStatus,\r\n      selectStatuses\r\n    } = this.state;\r\n    const { userRole } = this.props;\r\n    // console.log(\"[VacanciesForm] props: \", this.props);\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col lg={3} md={12}>\r\n            <FormGroup>\r\n              <Select\r\n                isMulti\r\n                value={selectPlatforms}\r\n                options={platform}\r\n                placeholder=\"Platforms\"\r\n                onChange={this.handlePlatformChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col lg={3} md={12}>\r\n            <FormGroup>\r\n              <Select\r\n                isMulti\r\n                value={selectSeniorities}\r\n                options={seniority}\r\n                placeholder=\"Seniority\"\r\n                onChange={this.handleSeniorityChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          {userRole !== 4 ? (\r\n            <>\r\n              <Col lg={3} md={12}>\r\n                <FormGroup>\r\n                  <Select\r\n                    isMulti\r\n                    value={selectCandidateStatus}\r\n                    options={candidateStatus}\r\n                    placeholder=\"Candidate status\"\r\n                    onChange={this.handleCandidateStatusChange}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col lg={3} md={12}>\r\n                <FormGroup>\r\n                  <Select\r\n                    isMulti\r\n                    value={selectStatuses}\r\n                    options={vacancyStatus}\r\n                    placeholder=\"Vacancy status\"\r\n                    onChange={this.handleVacancyStatusChange}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </>\r\n          ) : null}\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  CustomInput,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  ListGroupItem,\r\n  Row\r\n} from \"reactstrap\";\r\n\r\nconst INITIAL_STATE = {\r\n  candidates: [],\r\n  checkedCandidates: new Map()\r\n};\r\n\r\nexport default class FreelancerSendCandidateForm extends Component {\r\n  static propTypes = {\r\n    candidates: PropTypes.array,\r\n    sendCandidate: PropTypes.func.isRequired,\r\n    onRequestClose: PropTypes.func\r\n  };\r\n\r\n  static defaultProps = {\r\n    candidates: [],\r\n    onRequestClose: () => null\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps) {\r\n    console.log(nextProps);\r\n    if (nextProps) {\r\n      return {\r\n        candidates: nextProps.candidates\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  state = {\r\n    ...INITIAL_STATE\r\n  };\r\n\r\n  handleCheckboxCandidateChange = ({ target: { id, checked } }) => {\r\n    const item = id;\r\n    const isChecked = checked;\r\n\r\n    this.setState(prevState => ({\r\n      checkedCandidates: prevState.checkedCandidates.set(item, isChecked)\r\n    }));\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { checkedCandidates } = this.state;\r\n    const { companyId, vacancyId, sendCandidate, onRequestClose } = this.props;\r\n\r\n    const checkedCandidatesEntries = Array.from(checkedCandidates);\r\n\r\n    const content = {\r\n      companyId,\r\n      vacancyId,\r\n      checkedCandidatesEntries\r\n    };\r\n\r\n    sendCandidate(content);\r\n    this.resetForm();\r\n    onRequestClose();\r\n  };\r\n\r\n  resetForm = () => this.setState({ ...INITIAL_STATE });\r\n\r\n  render() {\r\n    const { candidates, checkedCandidates } = this.state;\r\n\r\n    const candidatesJSX =\r\n      candidates.length > 0 &&\r\n      candidates.map(candidate => (\r\n        <ListGroupItem\r\n          style={{ width: \"100%\" }}\r\n          key={`${candidate.id}-${candidate.platId}`}\r\n        >\r\n          <CustomInput\r\n            type=\"checkbox\"\r\n            id={candidate.id}\r\n            checked={checkedCandidates.get(candidate.id)}\r\n            label={`${candidate.platform !== null ? candidate.platform : \"\"} ${\r\n              candidate.name !== null ? candidate.name : \"\"\r\n            } ${candidate.email !== null ? candidate.email : \"\"} ${\r\n              candidate.salary !== null ? candidate.salary : \"\"\r\n            }`}\r\n            onChange={this.handleCheckboxCandidateChange}\r\n          />\r\n        </ListGroupItem>\r\n      ));\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <Row style={{ marginBottom: \"1.5rem\" }}>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"exampleCheckbox\">My Candidates</Label>\r\n              {candidatesJSX}\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Button type=\"submit\" color=\"primary\" className=\"pull-right\">\r\n              <i className=\"icon-paper-plane icons font-lg\" /> Send\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\n// Components\r\nimport SendCandidateForm from \"../SendCandidateForm\";\r\n// Instruments\r\nimport {\r\n  getCandidates,\r\n  sendCandidateForVacancy\r\n} from \"../../../utils/api/freelancer\";\r\n\r\nexport default class FreelancerSendFormContainer extends Component {\r\n  state = {\r\n    candidates: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { platformId } = this.props;\r\n    getCandidates(platformId).then(candidates => {\r\n      this.setState({\r\n        candidates\r\n      });\r\n    });\r\n  }\r\n\r\n  sendCandidate = content => {\r\n    sendCandidateForVacancy(content);\r\n  };\r\n\r\n  render() {\r\n    const { candidates } = this.state;\r\n    return (\r\n      <SendCandidateForm\r\n        candidates={candidates}\r\n        sendCandidate={this.sendCandidate}\r\n        {...this.props}\r\n      />\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\n// Components\r\nimport FreelancerSendFormContainer from \"../Freelancer/containers/SendFormContainer\";\r\nimport Select from \"../shared/Select\";\r\nimport ModalToDelete from \"../shared/ModalToDelete\";\r\n// HOC\r\nimport withModalForLetter from \"../hoc/ModalForLetter/withModalForLetter\";\r\n// Context\r\nimport { ModalConsumer } from \"../../providers/ModalProvider\";\r\n\r\nconst WithModalFreelancerSendCandidateForm = withModalForLetter(\r\n  FreelancerSendFormContainer\r\n);\r\n\r\nconst VacanciesTableRow = ({\r\n  id,\r\n  companyId,\r\n  company,\r\n  platId,\r\n  platform,\r\n  seniority,\r\n  location,\r\n  salary,\r\n  date,\r\n  status,\r\n  vacancyStatus,\r\n  userRole,\r\n  onDeleteVacancy,\r\n  onChangeVacancyStatus\r\n}) => (\r\n  <>\r\n    <td>\r\n      {userRole !== 4 ? (\r\n        <Link to={`/companies/${companyId}`}>{company}</Link>\r\n      ) : (\r\n        company\r\n      )}\r\n    </td>\r\n    <td>\r\n      <Link to={`/vacancies/${id}`}>{platform !== null && platform}</Link>\r\n    </td>\r\n    <td>{seniority !== null && seniority}</td>\r\n    <td>{location !== null && location}</td>\r\n    <td>{salary}</td>\r\n    <td>{moment(date).format(\"DD.MM.YY\")}</td>\r\n    {userRole !== 4 ? (\r\n      <td>\r\n        <Select\r\n          defaultValue={vacancyStatus.find(\r\n            vacancyStatus => vacancyStatus.label === status\r\n          )}\r\n          options={vacancyStatus}\r\n          onChange={value => {\r\n            const content = {\r\n              id,\r\n              value\r\n            };\r\n            onChangeVacancyStatus(content);\r\n          }}\r\n        />\r\n      </td>\r\n    ) : (\r\n      <td style={{ paddingLeft: \"2.5rem\" }}>{status}</td>\r\n    )}\r\n    {userRole !== 4 ? (\r\n      <td>\r\n        <Link\r\n          to={`/vacancies/${id}/edit`}\r\n          title=\"edit\"\r\n          style={{\r\n            marginRight: \"0.25rem\",\r\n            padding: \"0.2rem\",\r\n            color: \"var(--dark)\",\r\n            textDecoration: \"none\"\r\n          }}\r\n        >\r\n          <i className=\"cui-pencil icons font-lg\" />\r\n        </Link>\r\n        <ModalConsumer>\r\n          {({ showModal, hideModal }) => (\r\n            <Button\r\n              title=\"delete\"\r\n              style={{\r\n                margin: 0,\r\n                padding: \"0.2rem\",\r\n                backgroundColor: \"transparent\",\r\n                borderColor: \"transparent\"\r\n              }}\r\n              onClick={() =>\r\n                showModal(ModalToDelete, {\r\n                  isOpenModal: true,\r\n                  title: \"Delete vacancy\",\r\n                  name: `vacancy ${platform} in ${company}`,\r\n                  onDelete: () => {\r\n                    onDeleteVacancy(id);\r\n                    hideModal();\r\n                  }\r\n                })\r\n              }\r\n            >\r\n              <i className=\"cui-trash icons font-lg\" />\r\n            </Button>\r\n          )}\r\n        </ModalConsumer>\r\n      </td>\r\n    ) : (\r\n      <td style={{ paddingLeft: \"1.5rem\" }}>\r\n        <ModalConsumer>\r\n          {({ showModal }) => (\r\n            <Button\r\n              title=\"select candidate\"\r\n              style={{\r\n                margin: 0,\r\n                padding: \"0.2rem\",\r\n                color: \"var(--dark)\",\r\n                backgroundColor: \"transparent\",\r\n                borderColor: \"transparent\"\r\n              }}\r\n              onClick={() =>\r\n                showModal(WithModalFreelancerSendCandidateForm, {\r\n                  isOpenModal: true,\r\n                  title: \"Select candidate\",\r\n                  platformId: platId,\r\n                  companyId: companyId,\r\n                  vacancyId: id\r\n                })\r\n              }\r\n            >\r\n              <i className=\"cui-user-follow icons font-lg\" />\r\n            </Button>\r\n          )}\r\n        </ModalConsumer>\r\n      </td>\r\n    )}\r\n  </>\r\n);\r\n\r\nVacanciesTableRow.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  companyId: PropTypes.number.isRequired,\r\n  company: PropTypes.string,\r\n  platId: PropTypes.number.isRequired,\r\n  platform: PropTypes.string,\r\n  seniority: PropTypes.string,\r\n  location: PropTypes.string,\r\n  salary: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  date: PropTypes.string,\r\n  status: PropTypes.string,\r\n  vacancyStatus: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  onDeleteVacancy: PropTypes.func.isRequired,\r\n  onChangeVacancyStatus: PropTypes.func.isRequired\r\n};\r\n\r\nVacanciesTableRow.defaultProps = {\r\n  company: \"\",\r\n  platform: \"\",\r\n  seniority: \"\",\r\n  location: \"\",\r\n  salary: \"\",\r\n  date: \"\",\r\n  status: \"\"\r\n};\r\n\r\nexport default VacanciesTableRow;\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row, Table } from \"reactstrap\";\r\n// Components\r\nimport VacanciesTableRow from \"./TableRow\";\r\nimport LocaleSelector from \"../LocaleSelector\";\r\nimport PaginationBackend from \"../shared/PaginationBackend\";\r\n\r\nconst VacanciesTable = ({\r\n  userRole,\r\n  vacancies,\r\n  vacancyStatus,\r\n  pageSize,\r\n  totalItems,\r\n  totalPages,\r\n  currentPage,\r\n  onChangePage,\r\n  onSort,\r\n  onDeleteVacancy,\r\n  onChangeVacancyStatus\r\n}) => {\r\n  const vacanciesJSX =\r\n    vacancies.length > 0 ? (\r\n      vacancies.map((vacancy, idx) => (\r\n        <tr key={vacancy.id}>\r\n          <VacanciesTableRow\r\n            idx={idx}\r\n            {...vacancy}\r\n            userRole={userRole}\r\n            vacancyStatus={vacancyStatus}\r\n            onDeleteVacancy={onDeleteVacancy}\r\n            onChangeVacancyStatus={onChangeVacancyStatus}\r\n          />\r\n        </tr>\r\n      ))\r\n    ) : (\r\n      <tr style={{ color: \"var(--secondary)\" }}>\r\n        <td colSpan={9} align=\"center\">\r\n          Nothing found{\" \"}\r\n          <span role=\"img\" aria-label=\"confused face\">\r\n            😕\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Table style={{ background: \"var(--white)\" }} responsive hover>\r\n        <thead>\r\n          <tr>\r\n            <LocaleSelector onSort={onSort} />\r\n            <th scope=\"col\">Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{vacanciesJSX}</tbody>\r\n      </Table>\r\n      {vacancies.length > 0 ? (\r\n        <Row>\r\n          <Col>\r\n            <PaginationBackend\r\n              items={vacancies}\r\n              totalItems={totalItems}\r\n              pageSize={pageSize}\r\n              totalPages={totalPages}\r\n              initialPage={currentPage}\r\n              onChangePage={onChangePage}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nVacanciesTable.propTypes = {\r\n  userRole: PropTypes.number.isRequired,\r\n  vacancies: PropTypes.arrayOf(PropTypes.shape({})),\r\n  vacancyStatus: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  pageSize: PropTypes.number,\r\n  totalItems: PropTypes.number,\r\n  totalPages: PropTypes.number,\r\n  onChangePage: PropTypes.func,\r\n  onSort: PropTypes.func,\r\n  onDeleteVacancy: PropTypes.func.isRequired,\r\n  onChangeVacancyStatus: PropTypes.func.isRequired\r\n};\r\n\r\nVacanciesTable.defaultProps = {\r\n  vacancies: [],\r\n  pageSize: null,\r\n  totalItems: null,\r\n  totalPages: null,\r\n  onChangePage: () => null,\r\n  onSort: () => null\r\n};\r\n\r\nexport default VacanciesTable;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\n// Components\r\nimport VacanciesForm from \"./Form\";\r\nimport VacanciesTable from \"./Table\";\r\n// Context Provider\r\nimport Localization from \"../../providers/Localization\";\r\n// Instruments\r\nimport { deleteVacancy } from \"../../utils/api/vacancy\";\r\nimport {\r\n  filterAndSortCompanyVacancies,\r\n  updateVacancyStatus\r\n} from \"../../utils/api/company\";\r\nimport \"./Vacancies.css\";\r\n\r\nconst localesVacancies = [\r\n  \"Company\",\r\n  \"Platform\",\r\n  \"Seniority\",\r\n  \"Location\",\r\n  \"Salary\",\r\n  \"Date\",\r\n  \"Status\"\r\n];\r\n\r\nexport default class Vacancies extends Component {\r\n  static propTypes = {\r\n    user: PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      role: PropTypes.number.isRequired\r\n    })\r\n  };\r\n\r\n  state = {\r\n    vacanciesData: {\r\n      vacancies: [],\r\n      vacanciesCount: null,\r\n      totalPages: null,\r\n      perPage: null,\r\n      currentPage: 1,\r\n      vacancyStatus: [],\r\n      candidateStatus: [],\r\n      platform: [],\r\n      seniority: []\r\n    },\r\n    filterAndSortVacancies: {\r\n      selectPlatforms: [],\r\n      selectSeniorities: [],\r\n      selectCandidateStatus: [],\r\n      selectStatuses: [\r\n        { id: 0, label: \"Hot\", value: \"hot\" },\r\n        { id: 1, label: \"Open\", value: \"open\" }\r\n      ]\r\n    }\r\n  };\r\n  // TODO: удалить дублирующуюся функцию getVacancies в api, заменить на getCompanyVacancies\r\n  componentDidMount() {\r\n    const {\r\n      vacanciesData: { currentPage },\r\n      filterAndSortVacancies\r\n    } = this.state;\r\n    this.updateVacanciesData(currentPage, filterAndSortVacancies);\r\n  }\r\n\r\n  updateVacanciesData = (currentPage, filter) => {\r\n    filterAndSortCompanyVacancies(null, currentPage, filter).then(\r\n      vacanciesData => {\r\n        this.setState({\r\n          vacanciesData: { ...this.state.vacanciesData, ...vacanciesData }\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  filterAndSortVacancies = filterAndSort => {\r\n    const { filterAndSortVacancies } = this.state;\r\n\r\n    this.setState(\r\n      {\r\n        filterAndSortVacancies: {\r\n          ...filterAndSortVacancies,\r\n          ...filterAndSort\r\n        }\r\n      },\r\n      () => {\r\n        const {\r\n          vacanciesData: { currentPage },\r\n          filterAndSortVacancies\r\n        } = this.state;\r\n\r\n        this.updateVacanciesData(currentPage, filterAndSortVacancies);\r\n      }\r\n    );\r\n  };\r\n\r\n  changeVacancyStatus = content => {\r\n    updateVacancyStatus(content).then(data => console.log(data));\r\n  };\r\n\r\n  onDeleteVacancy = id => {\r\n    deleteVacancy(id);\r\n\r\n    const { vacanciesData } = this.state;\r\n\r\n    this.setState(state => ({\r\n      ...state,\r\n      vacanciesData: {\r\n        ...vacanciesData,\r\n        vacancies: vacanciesData.vacancies.filter(vacancy => vacancy.id !== id)\r\n      }\r\n    }));\r\n  };\r\n\r\n  onChangePage = currentPage => {\r\n    const { filterAndSortVacancies } = this.state;\r\n\r\n    this.updateVacanciesData(currentPage, filterAndSortVacancies);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      vacanciesData: {\r\n        vacancies,\r\n        vacanciesCount,\r\n        totalPages,\r\n        perPage,\r\n        currentPage,\r\n        vacancyStatus,\r\n        candidateStatus,\r\n        platform,\r\n        seniority\r\n      }\r\n    } = this.state;\r\n    const {\r\n      user: { role }\r\n    } = this.props;\r\n\r\n    return (\r\n      <Localization\r\n        locales={localesVacancies}\r\n        onSort={this.filterAndSortVacancies}\r\n      >\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              maxWidth: 180,\r\n              marginBottom: \"0.5rem\"\r\n            }}\r\n          >\r\n            <h1 style={{ marginBottom: 0, fontSize: 24 }}>Vacancies</h1>\r\n            <span\r\n              style={{\r\n                alignSelf: \"flex-end\",\r\n                color: \"var(--gray)\"\r\n              }}\r\n            >\r\n              {vacanciesCount}\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xl={12}>\r\n            <VacanciesForm\r\n              userRole={role}\r\n              platform={platform}\r\n              seniority={seniority}\r\n              candidateStatus={candidateStatus}\r\n              vacancyStatus={vacancyStatus}\r\n              onFilter={this.filterAndSortVacancies}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        {role !== 4 ? (\r\n          <Row style={{ marginBottom: \"1rem\" }}>\r\n            <Col xs={12} sm={6}>\r\n              <Link to=\"/new-vacancy\" className=\"btn btn-success pull-left\">\r\n                <i className=\"fa fa-plus-circle\" /> Create\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n        <VacanciesTable\r\n          userRole={role}\r\n          vacancies={vacancies}\r\n          vacancyStatus={vacancyStatus}\r\n          totalItems={vacanciesCount}\r\n          pageSize={perPage}\r\n          totalPages={totalPages}\r\n          currentPage={currentPage}\r\n          onChangePage={this.onChangePage}\r\n          onChangeVacancyStatus={this.changeVacancyStatus}\r\n          onDeleteVacancy={this.onDeleteVacancy}\r\n        />\r\n      </Localization>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}