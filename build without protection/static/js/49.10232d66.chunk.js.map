{"version":3,"sources":["utils/selectors.js","components/Dashboard/Card/Card.js","components/Dashboard/SparkLineChart/SparkLineChart.js","components/Dashboard/SparkLineChart/Form.js","assets/data/dashboard/cards.js","components/Dashboard/Dashboard.js"],"names":["isEmpty","obj","key","hasOwnProperty","getBase64","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","getSparkLineChartData","arr","label","reduce","acc","value","data","concat","makeSparkLineData","dataSetNo","variant","sparkLineChartData","labels","dataset","datasets","backgroundColor","borderColor","sparklineChartOpts","tooltips","enabled","custom","CustomTooltips","responsive","maintainAspectRatio","scales","xAxes","display","yAxes","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","hoverBorderWidth","legend","DashboardCard","state","dropdownOpen","toggle","setState","this","props","card","amount","history","links","map","link","DropdownItem","id","onClick","push","route","title","Card","className","color","style","minHeight","CardBody","ButtonGroup","ButtonDropdown","isOpen","DropdownToggle","caret","DropdownMenu","right","desc","time","Component","defaultProps","withRouter","brandPrimary","getStyle","brandDanger","SparkLineChart","dataArray","Object","values","reducedStatuses","review","Review","interview","Interview","statuses","name","amountCandidates","dataKeys","keys","sparkLine","arrOfKeys","status","idx","colorSparkLine","Col","sm","toUpperCase","options","width","height","sparkLineData","chart","objWithStatuses","Progress","String","chartData","Badge","pill","CardHeader","moment","format","Row","justifyContent","DashboardForm","dateFrom","dateTo","handleInputChange","target","onFilter","Form","xs","md","lg","FormGroup","Input","type","onChange","companies","vacancies","recruiters","freelancers","candidates","calendar","interviews","offerCandidates","Dashboard","dashboardData","companiesWithCandidates","vacanciesOnCandidates","countCandidatesOnVacancies","countUsersAndFreelancers","countCompanies","countVacancies","countVacanciesOnPlatforms","worseVacancies","countOfferCandidates","usersWithoutOfferCandidates","usersOnCandidates","countVacanciesOpenAndHot","dateFilter","filterData","filter","filterDataForAdminDashboard","then","countRevInterComp","countRevInterVac","countReviewAndInterviewCandidatesOnVacancies","countUsersAndFreelancer","countCom","countVac","countVacanciesOpenAndHotForPlatform","listNotSendVacancies","offersCandidates","allCount","users","topUsers","loading","getDataForAdminDashboard","amountRecruiters","Recruiter","amountFreelancers","Freelancer","amountVacancies","amountVacanciesOnPlatformsJSX","pct","toFixed","sparkLineChartDataCompanies","sparkLineChartDataVacancies","candidatesOnStatus","usersWithCandidatesOnReviewStatus","length","user","role","amountReviewCandidates","count","usersWithCandidatesOnReviewStatusJSX","src","alt","usersWithCandidatesOnInterviewStatus","amountInterviewCandidates","usersWithCandidatesOnInterviewStatusJSX","listOfWorstVacancies","vacancy","Link","to","listOfWorstUsers","cards","xl","Button","size","data-toggle","data-placement","data-original-title","Table","hover"],"mappings":"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","file":"static/js/49.10232d66.chunk.js","sourcesContent":["import { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\n\r\nexport const isEmpty = obj => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getBase64 = (file, cb) => {\r\n  let reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.onload = function() {\r\n    cb(reader.result);\r\n  };\r\n  reader.onerror = function(error) {\r\n    console.log(\"Error: \", error);\r\n  };\r\n};\r\n\r\nexport const descSort = arr => {\r\n  return arr.sort((a, b) => b - a);\r\n};\r\n\r\nexport const getSparkLineChartData = (arr, label) =>\r\n  arr.reduce(\r\n    (acc, value) => {\r\n      const data = value[label]\r\n        ? acc.data.concat(value[label])\r\n        : acc.data.concat(0);\r\n\r\n      return {\r\n        data,\r\n        label\r\n      };\r\n    },\r\n    { data: [], label }\r\n  );\r\n\r\nexport const makeSparkLineData = (\r\n  dataSetNo,\r\n  variant,\r\n  sparkLineChartData,\r\n  labels\r\n) => {\r\n  const dataset = sparkLineChartData[dataSetNo];\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: \"transparent\",\r\n        borderColor: variant ? variant : \"#c2cfd6\",\r\n        data: dataset.data,\r\n        label: dataset.label\r\n      }\r\n    ]\r\n  };\r\n  return () => data;\r\n};\r\n\r\nexport const sparklineChartOpts = {\r\n  tooltips: {\r\n    enabled: false,\r\n    custom: CustomTooltips\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: true,\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        display: false\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        display: false\r\n      }\r\n    ]\r\n  },\r\n  elements: {\r\n    line: {\r\n      borderWidth: 2\r\n    },\r\n    point: {\r\n      radius: 0,\r\n      hitRadius: 10,\r\n      hoverRadius: 4,\r\n      hoverBorderWidth: 3\r\n    }\r\n  },\r\n  legend: {\r\n    display: false\r\n  }\r\n};\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  ButtonGroup,\r\n  ButtonDropdown,\r\n  Card,\r\n  CardBody,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from \"reactstrap\";\r\n\r\nclass DashboardCard extends Component {\r\n  static propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    desc: PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    color: \"primary\",\r\n    title: \"\",\r\n    amount: null,\r\n    desc: \"\"\r\n  };\r\n\r\n  state = {\r\n    dropdownOpen: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { card, amount, history } = this.props;\r\n\r\n    const links =\r\n      card.links &&\r\n      card.links.map(link => (\r\n        <DropdownItem key={link.id} onClick={() => history.push(link.route)}>\r\n          {link.title}\r\n        </DropdownItem>\r\n      ));\r\n\r\n    return (\r\n      <Card\r\n        className={`text-white bg-${card.color}`}\r\n        style={{ minHeight: \"113px\" }}\r\n      >\r\n        <CardBody>\r\n          <ButtonGroup className=\"float-right\">\r\n            {links && (\r\n              <ButtonDropdown\r\n                id={card.title}\r\n                isOpen={this.state.dropdownOpen}\r\n                toggle={this.toggle}\r\n              >\r\n                <DropdownToggle caret className=\"p-0\" color=\"transparent\">\r\n                  <i className=\"icon-link\" />\r\n                </DropdownToggle>\r\n                <DropdownMenu right>{links}</DropdownMenu>\r\n              </ButtonDropdown>\r\n            )}\r\n          </ButtonGroup>\r\n          {card.title && (\r\n            <div className=\"text-value\">\r\n              {card.title}: {amount}\r\n            </div>\r\n          )}\r\n          <div>{card.desc}</div>\r\n          {card.time && <div>on {card.time}</div>}\r\n          {/* <div className=\"chart-wrapper mt-3\" style={{ height: \"70px\" }}>\r\n          <Line\r\n            data={cardChartData2}\r\n            options={cardChartOpts2}\r\n            height={70}\r\n          />\r\n        </div> */}\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DashboardCard);\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Badge,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Col,\r\n  Progress,\r\n  Row\r\n} from \"reactstrap\";\r\nimport { Line } from \"react-chartjs-2\";\r\n// Instruments\r\nimport { getStyle } from \"@coreui/coreui-pro/dist/js/coreui-utilities\";\r\nimport {\r\n  getSparkLineChartData,\r\n  makeSparkLineData,\r\n  sparklineChartOpts\r\n} from \"../../../utils/selectors\";\r\n\r\nconst brandPrimary = getStyle(\"--primary\");\r\nconst brandDanger = getStyle(\"--danger\");\r\n\r\nconst SparkLineChart = ({ title, data }) => {\r\n  const reducingReviewInterviewStatus = arr =>\r\n    arr.reduce(\r\n      (acc, value) => {\r\n        const review = value.Review ? acc.review + value.Review : acc.review;\r\n        const interview = value.Interview\r\n          ? acc.interview + value.Interview\r\n          : acc.interview;\r\n\r\n        return {\r\n          review,\r\n          interview\r\n        };\r\n      },\r\n      { review: 0, interview: 0 }\r\n    );\r\n\r\n  const sparkLineData = (arr, sparkLineChartData, arrOfKeys) => {\r\n    return arr.map((status, idx) => {\r\n      const colorSparkLine = idx === 0 ? brandPrimary : brandDanger;\r\n\r\n      return (\r\n        <Col key={`${status.name}-${status.amountCandidates}`} sm=\"6\">\r\n          <div className=\"callout callout-info\">\r\n            <small className=\"text-muted\">{status.name.toUpperCase()}</small>\r\n            <br />\r\n            <strong className=\"h4\">{status.amountCandidates}</strong>\r\n            <div className=\"chart-wrapper\">\r\n              <Line\r\n                data={makeSparkLineData(\r\n                  idx,\r\n                  colorSparkLine,\r\n                  sparkLineChartData,\r\n                  arrOfKeys\r\n                )}\r\n                options={sparklineChartOpts}\r\n                width={100}\r\n                height={30}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      );\r\n    });\r\n  };\r\n\r\n  const chartData = (arr, objWithStatuses) =>\r\n    arr.map(value => {\r\n      const review = objWithStatuses[value].Review;\r\n      const interview = objWithStatuses[value].Interview;\r\n\r\n      return (\r\n        <div\r\n          className=\"progress-group mb-4\"\r\n          key={`${value}-${review}-${interview}`}\r\n        >\r\n          <div className=\"progress-group-prepend\">\r\n            <span className=\"progress-group-text\">{value}</span>\r\n          </div>\r\n          <div className=\"progress-group-bars\">\r\n            <Progress\r\n              className=\"progress-xs\"\r\n              color=\"info\"\r\n              value={String(review)}\r\n            />\r\n            <Progress\r\n              className=\"progress-xs\"\r\n              color=\"danger\"\r\n              value={String(interview)}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n  const dataArray = Object.values(data);\r\n\r\n  const reducedStatuses = reducingReviewInterviewStatus(dataArray);\r\n\r\n  const { review, interview } = reducedStatuses;\r\n\r\n  const sparkLineChartDataReview = getSparkLineChartData(dataArray, \"Review\");\r\n\r\n  const sparkLineChartDataInterview = getSparkLineChartData(\r\n    dataArray,\r\n    \"Interview\"\r\n  );\r\n\r\n  const statuses = [\r\n    { name: \"Review\", amountCandidates: review },\r\n    { name: \"Interview\", amountCandidates: interview }\r\n  ];\r\n\r\n  const sparkLineChartData = [\r\n    sparkLineChartDataReview,\r\n    sparkLineChartDataInterview\r\n  ];\r\n\r\n  const dataKeys = Object.keys(data);\r\n\r\n  const sparkLine = sparkLineData(statuses, sparkLineChartData, dataKeys);\r\n\r\n  const chart = chartData(dataKeys, data);\r\n\r\n  const legend = statuses.map((status, idx) => {\r\n    const color = idx === 0 ? \"info\" : \"danger\";\r\n\r\n    return (\r\n      <div key={status.name}>\r\n        <sup className=\"px-1\">\r\n          <Badge pill color={color}>\r\n            &nbsp;\r\n          </Badge>\r\n        </sup>\r\n        {status.name} &nbsp;\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>{`${title} of ${moment().format(\"MMMM\")}`}</CardHeader>\r\n      <CardBody>\r\n        <Row>{sparkLine}</Row>\r\n        <hr className=\"mt-0\" />\r\n        {chart}\r\n        <div className=\"legend text-center\">\r\n          <small style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {legend}\r\n          </small>\r\n        </div>\r\n        <br />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nSparkLineChart.propTypes = {\r\n  title: PropTypes.string,\r\n  data: PropTypes.shape({})\r\n};\r\n\r\nSparkLineChart.defaultProps = {\r\n  title: \"\",\r\n  data: {}\r\n};\r\n\r\nexport default SparkLineChart;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Form, FormGroup, Input, Row } from \"reactstrap\";\r\n\r\nclass DashboardForm extends Component {\r\n  static propTypes = {\r\n    onFilter: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    dateFrom: \"\",\r\n    dateTo: \"\"\r\n  };\r\n\r\n  handleInputChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value }, () => this.props.onFilter(this.state));\r\n  };\r\n\r\n  render() {\r\n    const { dateFrom, dateTo } = this.state;\r\n\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col xs={12} sm={12} md={6} lg={6}>\r\n            <FormGroup>\r\n              <Input\r\n                id=\"date-from\"\r\n                type=\"date\"\r\n                name=\"dateFrom\"\r\n                value={dateFrom}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col xs={12} sm={12} md={6} lg={6}>\r\n            <FormGroup>\r\n              <Input\r\n                id=\"date-to\"\r\n                type=\"date\"\r\n                name=\"dateTo\"\r\n                value={dateTo}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardForm;\r\n","import moment from \"moment\";\r\n\r\nexport const companies = {\r\n  id: \"1\",\r\n  color: \"primary\",\r\n  title: \"Companies\",\r\n  desc: \"Amount of companies with vacancies in Open/Hot status\",\r\n  links: [\r\n    { title: \"Companies\", route: \"/companies\" },\r\n    { title: \"Vacancies\", route: \"/vacancies\" }\r\n  ]\r\n};\r\n\r\nexport const vacancies = {\r\n  id: \"2\",\r\n  color: \"primary\",\r\n  title: \"Vacancies\",\r\n  desc: \"Amount of vacancies in Open/Hot status\",\r\n  links: [\r\n    { title: \"Vacancies\", route: \"/vacancies\" },\r\n    { title: \"Companies\", route: \"/companies\" }\r\n  ]\r\n};\r\n\r\nexport const recruiters = {\r\n  id: \"3\",\r\n  color: \"info\",\r\n  title: \"Recruiters\",\r\n  desc: \"Amount of recruiters\",\r\n  links: [{ title: \"Users\", route: \"/users\" }]\r\n};\r\n\r\nexport const freelancers = {\r\n  id: \"4\",\r\n  color: \"info\",\r\n  title: \"Freelancers\",\r\n  desc: \"Amount of freelancers\",\r\n  links: [{ title: \"Users\", route: \"/users\" }]\r\n};\r\n\r\nexport const candidates = {\r\n  id: \"5\",\r\n  color: \"danger\",\r\n  title: \"Candidates\",\r\n  desc: \"Amount of candidates sent on vacancies\",\r\n  links: [\r\n    { title: \"Candidates\", route: \"/candidates\" },\r\n    { title: \"Vacancies\", route: \"/vacancies\" }\r\n  ],\r\n  time: moment().calendar()\r\n};\r\n\r\nexport const interviews = {\r\n  id: \"6\",\r\n  color: \"danger\",\r\n  title: \"Interviews\",\r\n  desc: \"Amount of scheduled interviews\",\r\n  links: [{ title: \"Candidates\", route: \"/candidates\" }],\r\n  time: moment().calendar()\r\n};\r\n\r\nexport const offerCandidates = {\r\n  id: \"7\",\r\n  color: \"success\",\r\n  title: \"OFFER Candidates\",\r\n  desc: \"Amount of candidates with offer\",\r\n  links: [{ title: \"Candidates\", route: \"/candidates\" }],\r\n  time: moment().format(\"MMMM YYYY\")\r\n};\r\n","// Core\nimport React, {Component} from \"react\";\nimport moment from \"moment\";\nimport {Link} from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Progress,\n  Row,\n  Table\n} from \"reactstrap\";\n// Components\nimport DashboardCard from \"./Card/Card\";\nimport SparkLineChart from \"./SparkLineChart/SparkLineChart\";\nimport DashboardForm from \"./SparkLineChart/Form\";\n// Instruments\nimport * as cards from \"../../assets/data/dashboard/cards\";\nimport {getStyle} from \"@coreui/coreui-pro/dist/js/coreui-utilities\";\nimport {\n  getDataForAdminDashboard,\n  filterDataForAdminDashboard\n} from \"../../utils/api\";\nimport {isEmpty} from \"../../utils/selectors\";\n\nconst brandPrimary = getStyle(\"--primary\");\n\nexport default class Dashboard extends Component {\n  state = {\n    dashboardData: {\n      companiesWithCandidates: {},\n      vacanciesOnCandidates: {},\n      countCandidatesOnVacancies: {},\n      countUsersAndFreelancers: {},\n      countCompanies: null,\n      countVacancies: null,\n      countVacanciesOnPlatforms: {},\n      worseVacancies: [],\n      countOfferCandidates: null,\n      usersWithoutOfferCandidates: [],\n      usersOnCandidates: [],\n      countVacanciesOpenAndHot: {}\n    },\n    dateFilter: {\n      dateFrom: \"\",\n      dateTo: \"\"\n    }\n  };\n\n  componentDidMount() {\n    getDataForAdminDashboard().then(data => {\n      if (data) {\n        const dashboardData = {\n          companiesWithCandidates: data.countRevInterComp,\n          vacanciesOnCandidates: data.countRevInterVac,\n          countCandidatesOnVacancies:\n          data.countReviewAndInterviewCandidatesOnVacancies,\n          countUsersAndFreelancers: data.countUsersAndFreelancer,\n          countCompanies: data.countVacanciesOpenAndHot.countCom,\n          countVacancies: data.countVacanciesOpenAndHot.countVac,\n          countVacanciesOnPlatforms: data.countVacanciesOpenAndHotForPlatform,\n          worseVacancies: data.listNotSendVacancies,\n          countOfferCandidates: data.offersCandidates.allCount,\n          usersWithoutOfferCandidates: data.offersCandidates.users,\n          usersOnCandidates: data.topUsers,\n          countVacanciesOpenAndHot: data.countVacanciesOpenAndHot\n        };\n\n        this.setState({\n          ...this.state,\n          dashboardData\n        });\n      }\n    });\n  }\n\n  filterData = filter => {\n    this.setState(\n      {\n        dateFilter: filter\n      },\n      () => {\n        const {dateFilter} = this.state;\n\n        filterDataForAdminDashboard(dateFilter).then(data => {\n          const dashboardData = {\n            companiesWithCandidates: data.countRevInterComp,\n            vacanciesOnCandidates: data.countRevInterVac,\n            countCandidatesOnVacancies:\n            data.countReviewAndInterviewCandidatesOnVacancies,\n            countUsersAndFreelancers: data.countUsersAndFreelancer,\n            countCompanies: data.countVacanciesOpenAndHot.countCom,\n            countVacancies: data.countVacanciesOpenAndHot.countVac,\n            countVacanciesOnPlatforms: data.countVacanciesOpenAndHotForPlatform,\n            worseVacancies: data.listNotSendVacancies,\n            countOfferCandidates: data.offersCandidates.allCount,\n            usersWithoutOfferCandidates: data.offersCandidates.users,\n            usersOnCandidates: data.topUsers,\n            countVacanciesOpenAndHot: data.countVacanciesOpenAndHot\n          };\n\n          this.setState({\n            ...this.state,\n            dashboardData\n          });\n        });\n      }\n    );\n  };\n\n  loading = () => (\n    <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n  );\n\n  render() {\n    const {\n      dashboardData: {\n        countCompanies,\n        countVacancies,\n        countUsersAndFreelancers,\n        countVacanciesOnPlatforms,\n        companiesWithCandidates,\n        vacanciesOnCandidates,\n        countCandidatesOnVacancies,\n        usersOnCandidates,\n        countOfferCandidates,\n        usersWithoutOfferCandidates,\n        worseVacancies\n      }\n    } = this.state;\n\n    const amountRecruiters = !isEmpty(countUsersAndFreelancers)\n      ? countUsersAndFreelancers.Recruiter\n      : null;\n\n    const amountFreelancers = !isEmpty(countUsersAndFreelancers)\n      ? countUsersAndFreelancers.Freelancer\n      : null;\n\n    const amountVacancies =\n      !isEmpty(countVacanciesOnPlatforms) &&\n      Object.values(countVacanciesOnPlatforms).reduce(\n        (acc, value) => acc + value,\n        0\n      );\n\n    // sorts an array with numbers, but it's completely not that we want\n    // const arrValues =\n    //   !isEmpty(this.state.dashboardData) &&\n    //   descSort(Object.values(countVacanciesOnPlatforms));\n\n    const amountVacanciesOnPlatformsJSX =\n      amountVacancies &&\n      Object.keys(countVacanciesOnPlatforms).map(key => {\n        const vacanciesOnPlatform = countVacanciesOnPlatforms[key];\n\n        const pct = ((vacanciesOnPlatform / amountVacancies) * 100).toFixed(1);\n\n        return (\n          <li key={key} className=\"progress-group\">\n            <div className=\"progress-group-header\">\n              <i className=\"icon-globe progress-group-icon\"/>\n              <span className=\"title\">{key}</span>\n              <span className=\"ml-auto font-weight-bold\">\n                {countVacanciesOnPlatforms[key]}{\" \"}\n                <span className=\"text-muted small\">\n                  ({pct}\n                  {\"%\"})\n                </span>\n              </span>\n            </div>\n            <div className=\"progress-group-bars\">\n              <Progress className=\"progress-xs\" color=\"success\" value={pct}/>\n            </div>\n          </li>\n        );\n      });\n\n    const sparkLineChartDataCompanies = !isEmpty(companiesWithCandidates)\n      ? companiesWithCandidates\n      : {};\n\n    const sparkLineChartDataVacancies = !isEmpty(vacanciesOnCandidates)\n      ? vacanciesOnCandidates\n      : {};\n\n    const candidatesOnStatus =\n      !isEmpty(countCandidatesOnVacancies) && countCandidatesOnVacancies;\n\n    const {Review, Interview} = candidatesOnStatus;\n\n    const usersWithCandidatesOnReviewStatus =\n      usersOnCandidates.length > 0 &&\n      usersOnCandidates.reduce((acc, user) => {\n        if (acc) {\n          user.role !== \"Admin\" && user.status === \"Review\" && acc.push(user);\n        }\n\n        return acc;\n      }, []);\n\n    const amountReviewCandidates =\n      usersWithCandidatesOnReviewStatus.length > 0 &&\n      usersWithCandidatesOnReviewStatus.reduce(\n        (acc, user) => acc + user.count,\n        0\n      );\n\n    const usersWithCandidatesOnReviewStatusJSX =\n      usersWithCandidatesOnReviewStatus.length > 0 &&\n      usersWithCandidatesOnReviewStatus.map(user => {\n        const pct = ((user.count / amountReviewCandidates) * 100).toFixed();\n\n        return (\n          <tr key={user.id}>\n            <td className=\"text-center\">\n              <div className=\"avatar\">\n                <img\n                  src={\"assets/img/avatars/1.jpg\"}\n                  className=\"img-avatar\"\n                  alt=\"admin@bootstrapmaster.com\"\n                />\n                <span className=\"avatar-status badge-success\"/>\n              </div>\n            </td>\n            <td>\n              <div>{user.name}</div>\n              {/* <div className=\"small text-muted\">\n                <span>New</span> | Registered: Jan 1, 2015\n              </div> */}\n            </td>\n            <td className=\"text-center\">{user.role}</td>\n            <td>\n              <div className=\"clearfix\">\n                <div className=\"float-left\">\n                  <strong>{`${user.count} (${String(pct)}%)`}</strong>\n                </div>\n                <div className=\"float-right\">\n                  <small className=\"text-muted\">\n                    on {moment().format(\"MMMM YYYY\")}\n                  </small>\n                </div>\n              </div>\n              <Progress\n                className=\"progress-xs\"\n                color=\"success\"\n                value={`${String(pct)}`}\n              />\n            </td>\n          </tr>\n        );\n      });\n\n    const usersWithCandidatesOnInterviewStatus =\n      usersOnCandidates.length > 0 &&\n      usersOnCandidates.reduce((acc, user) => {\n        if (acc) {\n          user.role !== \"Admin\" &&\n          user.status === \"Interview\" &&\n          acc.push(user);\n        }\n\n        return acc;\n      }, []);\n\n    const amountInterviewCandidates =\n      usersWithCandidatesOnInterviewStatus.length > 0 &&\n      usersWithCandidatesOnInterviewStatus.reduce(\n        (acc, user) => acc + user.count,\n        0\n      );\n\n    const usersWithCandidatesOnInterviewStatusJSX =\n      usersWithCandidatesOnInterviewStatus.length > 0 &&\n      usersWithCandidatesOnInterviewStatus.map(user => {\n        const pct = ((user.count / amountInterviewCandidates) * 100).toFixed();\n\n        return (\n          <tr key={user.id}>\n            <td className=\"text-center\">\n              <div className=\"avatar\">\n                <img\n                  src={\"assets/img/avatars/1.jpg\"}\n                  className=\"img-avatar\"\n                  alt=\"admin@bootstrapmaster.com\"\n                />\n                <span className=\"avatar-status badge-success\"/>\n              </div>\n            </td>\n            <td>\n              <div>{user.name}</div>\n              {/* <div className=\"small text-muted\">\n                <span>New</span> | Registered: Jan 1, 2015\n              </div> */}\n            </td>\n            <td className=\"text-center\">{user.role}</td>\n            <td>\n              <div className=\"clearfix\">\n                <div className=\"float-left\">\n                  <strong>{`${user.count} (${String(pct)}%)`}</strong>\n                </div>\n                <div className=\"float-right\">\n                  <small className=\"text-muted\">\n                    on {moment().format(\"MMMM YYYY\")}\n                  </small>\n                </div>\n              </div>\n              <Progress\n                className=\"progress-xs\"\n                color=\"success\"\n                value={`${String(pct)}`}\n              />\n            </td>\n          </tr>\n        );\n      });\n\n    const listOfWorstVacancies =\n      worseVacancies.length > 0 &&\n      worseVacancies.map(vacancy => (\n        <tr key={vacancy.id}>\n          <td>\n            <Link to={`/vacancies/${vacancy.id}`}>{vacancy.vacancy}</Link>\n          </td>\n        </tr>\n      ));\n\n    const listOfWorstUsers =\n      usersWithoutOfferCandidates.length > 0 &&\n      usersWithoutOfferCandidates.map(user => (\n        <tr key={user.id}>\n          <td>\n            <Link to={`/users/${user.id}`}>{user.name}</Link>\n          </td>\n        </tr>\n      ));\n\n    return (\n      <div className=\"animated fadeIn\">\n        <DashboardForm onFilter={this.filterData}/>\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard card={cards.candidates} amount={Review}/>\n          </Col>\n\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard card={cards.interviews} amount={Interview}/>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\">\n            <DashboardCard\n              card={cards.offerCandidates}\n              amount={countOfferCandidates}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader>Amount of vacancies in Open/Hot status</CardHeader>\n              <CardBody>\n                <Row>\n                  <Col xs=\"12\" md=\"12\" xl=\"12\">\n                    <Row>\n                      {/* <Col sm=\"6\">\n                        <div className=\"callout callout-warning\">\n                          <small className=\"text-muted\">Pageviews</small>\n                          <br />\n                          <strong className=\"h4\">78,623</strong>\n                          <div className=\"chart-wrapper\">\n                            <Line\n                              data={makeSparkLineData(2, brandWarning)}\n                              options={sparklineChartOpts}\n                              width={100}\n                              height={30}\n                            />\n                          </div>\n                        </div>\n                      </Col> */}\n                      <Col sm=\"12\">\n                        <div className=\"callout callout-success\">\n                          <small className=\"text-muted\">\n                            {\"Vacancies\".toUpperCase()}\n                          </small>\n                          <br/>\n                          <strong className=\"h4\">{amountVacancies}</strong>\n                          {/* <div className=\"chart-wrapper\">\n                            <Line\n                              data={makeSparkLineData(3, brandSuccess)}\n                              options={sparklineChartOpts}\n                              width={100}\n                              height={30}\n                            />\n                          </div> */}\n                        </div>\n                      </Col>\n                    </Row>\n                    <hr className=\"mt-0\"/>\n                    <ul className=\"pl-0\">\n                      {amountVacanciesOnPlatformsJSX}\n                      <div className=\"divider text-center\">\n                        <Button\n                          color=\"link\"\n                          size=\"sm\"\n                          className=\"text-muted\"\n                          data-toggle=\"tooltip\"\n                          data-placement=\"top\"\n                          title=\"\"\n                          data-original-title=\"show more\"\n                        >\n                          <i className=\"icon-options\"/>\n                        </Button>\n                      </div>\n                    </ul>\n                  </Col>\n                </Row>\n                <br/>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <SparkLineChart\n              title=\"Companies with candidates in Review/Interview status\"\n              data={sparkLineChartDataCompanies}\n            />\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <SparkLineChart\n              title=\"Vacancies with candidates in Review/Interview status\"\n              data={sparkLineChartDataVacancies}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard\n              card={cards.companies}\n              amount={countCompanies}\n              brandPrimary={brandPrimary}\n            />\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard card={cards.vacancies} amount={countVacancies}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard card={cards.recruiters} amount={amountRecruiters}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\n            <DashboardCard\n              card={cards.freelancers}\n              amount={amountFreelancers}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>Users with candidates in Review status</CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">\n                      <i className=\"icon-people\"/>\n                    </th>\n                    <th>User</th>\n                    <th className=\"text-center\">Role</th>\n                    <th>Pct</th>\n                  </tr>\n                  </thead>\n                  <tbody>{usersWithCandidatesOnReviewStatusJSX}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>Users with candidates in Interview status</CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">\n                      <i className=\"icon-people\"/>\n                    </th>\n                    <th>User</th>\n                    <th className=\"text-center\">Role</th>\n                    <th>Pct</th>\n                  </tr>\n                  </thead>\n                  <tbody>{usersWithCandidatesOnInterviewStatusJSX}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>\n                Vacancies on which didn't send any candidate at last 10 days\n              </CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <tbody>{listOfWorstVacancies}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n            <Card>\n              <CardHeader>\n                Users who don't have candidates with offer at last 60 days\n              </CardHeader>\n              <CardBody>\n                <Table\n                  hover\n                  responsive\n                  className=\"table-outline mb-0 d-none d-sm-table\"\n                >\n                  <tbody>{listOfWorstUsers}</tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}