{"version":3,"sources":["components/Admin/Vacancy dashboard/Canban.js","utils/api/company.js","utils/api/users.js","utils/api/candidates.js","components/Admin/Vacancy dashboard/TableRow.js"],"names":["Kanban","state","recruiters","companies","statuses","selectedRecruiter","selectedCompany","canbanData","lanes","fetchCompanies","a","getCompanies","companies_result","filter","company","vacancies","indexOf","id","setState","fetchStatuses","getStatuses","fetchCanbanData","getCandidatesGrouped","candidates","length","forEach","status","i","arr","cards","Object","entries","data","candidate","main","other_vacancies","status_id","map","vacancy","style","backgroundColor","color","display","padding","margin","fontSize","company_name","platform_name","candidate_url","candidate_id","push","vacancy_id","company_id","title","href","candidate_name","description","marginLeft","label","date","fetchRecruiters","getUsers","users","staff","user","role_id","loading","className","handleRecruiterSelect","handleCompanySelect","handleCardDragEnd","candidateIdVacancyId","prevStatusId","newStatusId","position","cardDetails","changeStatus","split","handleCardDelete","StatusId","this","prevProps","prevState","justifyContent","maxWidth","marginBottom","marginTop","alignSelf","xs","sm","md","lg","xl","value","options","isClearable","getOptionValue","getOptionLabel","name","placeholder","onChange","handleDragEnd","onCardDelete","Component","URL","getToken","localStorage","getItem","page","isActive","withRecruiters","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","nazva","logo","email","skype","phone","vacancy_count","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","console","log","filterAllCompanies","body","JSON","stringify","createNewCompany","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","values","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","partners","freelancers","freeLancers","getAllCandidates","allCandidates","allCandidatesCount","allTotalPages","Page","allPerPage","currentAllPage","allPlatforms","allStatuses","allRecruiters","recruiter","allSeniority","getSentCandidates","sentCandidates","sentCandidatesCount","sentTotalPages","sentPerPage","currentSentPage","sentPlatforms","sentCompanies","sentStatuses","sentRecruiters","loadingSent","getCandidatesFromFreelancers","candidatesFF","candidatesCountFF","totalPagesFF","perPageFF","statusesFF","currentPageFF","filterAndSortAllCandidates","filterAndSortSentCandidates","getCandidatesAmountByStatuses","selectedVacancy","selectedTag","startDate","endDate","recruiter_id","tag_id","start_date","end_date","getCandidatesAmountByTags","getCandidatesAmountByVacancies","candidateId","vacancyId","companyId","statusId","TableRow","recruiterId","quantity","recruiterName","conpanyName","find","to","target"],"mappings":"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","file":"static/js/50.a0ef0eb9.chunk.js","sourcesContent":["// Core;\nimport React, {Component} from \"react\";\nimport Select from \"react-select\";\nimport {Col, Row, Table, FormGroup} from \"reactstrap\";\nimport Board from 'react-trello'\n// Components\nimport TableRow from \"./TableRow\";\nimport {getUsers} from \"../../../utils/api/users\";\nimport {getCompanies} from \"../../../utils/api/company\";\nimport {changeStatus, getCandidatesGrouped, getStatuses} from \"../../../utils/api/candidates\";\n\nexport default class Kanban extends Component {\n  state = {\n    recruiters: [],\n    companies: [],\n    statuses: [],\n\n    selectedRecruiter: null,\n    selectedCompany: null,\n\n    canbanData: {\n      lanes: []\n    },\n  };\n\n  componentDidMount() {\n    this.fetchCompanies();\n    this.fetchRecruiters();\n    this.fetchStatuses();\n    this.fetchCanbanData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.selectedRecruiter !== prevState.selectedRecruiter ||\n      this.state.selectedCompany !== prevState.selectedCompany ||\n      this.state.statuses !== prevState.statuses\n    ) {\n      this.fetchCanbanData();\n    }\n\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter) {\n      this.fetchCompanies();\n    }\n  }\n\n  fetchCompanies = async () => {\n    let companies_result = await getCompanies(0, 1, 1);\n    const {selectedRecruiter} = this.state;\n    const companies = companies_result.companies.filter((company) => company.vacancies > 0 &&\n      (selectedRecruiter !== null && company.recruiters.indexOf(selectedRecruiter.id) + 1 > 0 || selectedRecruiter === null));\n    this.setState({companies});\n  };\n\n  fetchStatuses = async () => {\n    const statuses = await getStatuses();\n    this.setState({statuses});\n  };\n\n  fetchCanbanData = async () => {\n    const {selectedCompany, selectedRecruiter, statuses} = this.state;\n\n    let candidates = await getCandidatesGrouped(\n      selectedRecruiter ? selectedRecruiter.id : 0,\n      selectedCompany ? selectedCompany.id : 0,\n    );\n    let canbanData = {\n      lanes: []\n    };\n\n    if (statuses.length > 0 && candidates !== null) {\n\n      statuses.forEach(function (status, i, arr) {\n        let cards = [];\n        Object.entries(candidates.data).forEach(function (candidate, i, arr) {\n\n          let main = candidate[1].main;\n          let other_vacancies = candidate[1].vacancies;\n\n          if (main.status_id === status.id) {\n            let vacancies = '';\n            if (other_vacancies.length > 0) {\n              vacancies = other_vacancies.map(vacancy => (\n                <span style={{\n                  backgroundColor: vacancy.color,\n                  display: \"inline-block\",\n                  padding: \"1px 5px\",\n                  margin: \"3px\",\n                  fontSize: \"10px\"\n                }}>\n              {vacancy.company_name} ({vacancy.platform_name})\n              </span>));\n            }\n            let candidate_url = \"/#/candidates/\" + main.candidate_id;\n            cards.push(\n              {\n                id: main.candidate_id + ':' + main.vacancy_id + ':' + main.company_id,\n                title: (<>< a href={candidate_url}>{main.candidate_name}</a></>),\n                description: (\n                  <>\n                    <h4 style={{\n                      fontSize: \"14px\",\n                      marginLeft: \"5px\"\n                    }}>\n                      {main.company_name} ({main.platform_name})\n                    </h4>\n                    {vacancies}\n                  </>\n                ),\n\n                label: main.date,\n                // metadata: {sha: 'be312a1'}\n              })\n          }\n        });\n        canbanData.lanes.push({\n          id: status.id,\n          title: status.label,\n          label: cards.length,\n          cards: cards\n        });\n\n      });\n    }\n\n    this.setState({canbanData});\n  };\n\n  fetchRecruiters = async () => {\n    const users = await getUsers();\n\n    const recruiters = users.staff.filter((user) => user.role_id === 2);\n    this.setState({recruiters});\n  };\n\n  loading = () => (\n    <div className='animated fadeIn pt-1 text-center'>Loading...</div>\n  );\n\n  handleRecruiterSelect = (selectedRecruiter) => {\n    this.setState({selectedRecruiter});\n  };\n\n  handleCompanySelect = (selectedCompany) => {\n    this.setState({selectedCompany});\n  };\n\n  handleCardDragEnd = async (candidateIdVacancyId, prevStatusId, newStatusId, position, cardDetails) => {\n    const result = await changeStatus(candidateIdVacancyId.split(':')[0], candidateIdVacancyId.split(':')[1], candidateIdVacancyId.split(':')[2], newStatusId);\n  };\n\n  handleCardDelete = async (candidateIdVacancyId, StatusId) => {\n    // const conf = window.confirm(\"Are you sure you want to delete candidate from this vacancy?\");\n    //   if (conf) {\n      const result = await changeStatus(candidateIdVacancyId.split(':')[0], candidateIdVacancyId.split(':')[1], candidateIdVacancyId.split(':')[2]);\n    // }\n  };\n\n  render() {\n    const {\n      canbanData,\n      recruiters,\n      companies,\n      selectedRecruiter,\n      selectedCompany,\n    } = this.state;\n\n    return (\n      <div className='animated fadeIn'>\n        <Row>\n          <Col\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              maxWidth: 180,\n              marginBottom: \"0.5rem\",\n            }}\n          >\n            <h1 style={{marginBottom: 0, marginTop: 20, fontSize: 24}}>\n              Canban\n            </h1>\n            <span\n              style={{\n                alignSelf: \"flex-end\",\n                color: \"var(--gray)\",\n              }}\n            ></span>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{marginBottom: 15}}\n                value={selectedRecruiter}\n                options={recruiters}\n                isClearable\n                getOptionValue={(user) => user.id}\n                getOptionLabel={(user) => user.name}\n                placeholder='Recruiters'\n                onChange={this.handleRecruiterSelect}\n              />\n            </FormGroup>\n          </Col>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{marginBottom: \"1rem\"}}\n                value={selectedCompany}\n                options={companies}\n                isClearable\n                getOptionValue={(company) => company.id}\n                getOptionLabel={(company) => company.name}\n                placeholder='Companies'\n                onChange={this.handleCompanySelect}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' md='12' xl='12'>\n            <Board\n              style={{backgroundColor: '#edf0f4'}}\n              data={canbanData}\n              handleDragEnd={this.handleCardDragEnd}\n              onCardDelete={this.handleCardDelete}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive, withRecruiters = false) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}/${withRecruiters}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        recruiters: company.recruiters,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit companies comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all users from an api\r\n *\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getUsers = () => {\r\n  const token = getToken();\r\n\r\n  return fetch(`${URL}/admin/all-staff`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const users = {\r\n        staff: data.users,\r\n        partners: data.partners,\r\n        freelancers: data.freeLancers\r\n      };\r\n\r\n      return users;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\n\n\nexport const getAllCandidates = page => {\n  const token = getToken();\n  console.log(':::::getAllCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches sent candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getSentCandidates = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates sent by freelancer\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesFromFreelancers = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewCandidatesFreelancerOnVacancies/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesFromFreelancersData = {\n        candidatesFF: data.candidates,\n        candidatesCountFF: data.Count,\n        totalPagesFF: data.Page,\n        perPageFF: data.perPage,\n        statusesFF: data.statuses,\n        currentPageFF: data.currentPage\n      };\n\n      return candidatesFromFreelancersData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts all candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortAllCandidates = (page, filterAndSort) => {\n  const token = getToken();\n  console.log(':::::Filtered allCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortSentCandidates = (page, filterAndSort) => {\n  console.log(\"Filtered\", filterAndSort);\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByStatuses = (selectedRecruiter, selectedCompany, selectedVacancy, selectedTag, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByStatuses`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByTags = (selectedRecruiter, selectedCompany, selectedVacancy, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByTags`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      // tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getStatuses = () => {\n  const token = getToken();\n  return fetch(`${URL}/main/getStatuses`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByVacancies = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByVacancies`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesGrouped = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesGrouped`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * changes status on sent candidate\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const changeStatus = (candidateId, vacancyId, companyId, statusId) => {\n  const token = getToken();\n  return fetch(`${URL}/main/changeStatusOnVacancy`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      candidate_id: candidateId,\n      vacancy_id: vacancyId,\n      company_id: companyId,\n      status_id: statusId\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * changes status on sent candidate\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteSentCandidateFromVacancy = (candidateId, vacancyId, companyId) => {\n  const token = getToken();\n  return fetch(`${URL}/main/deleteSentCandidateFromVacancy`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      candidate_id: candidateId,\n      vacancy_id: vacancyId,\n      company_id: companyId,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TableRow = ({\r\n  vacancyId,\r\n  vacancy,\r\n  quantity,\r\n  recruiterName,\r\n  conpanyName,\r\n  recruiters,\r\n  companies,\r\n}) => {\r\n  let companyId;\r\n  companies.find((company) => {\r\n    if (company.name === conpanyName) companyId = company.id;\r\n  });\r\n\r\n  let recruiterId;\r\n  recruiters.find((recruiter) => {\r\n    if (recruiter.name === recruiterName) recruiterId = recruiter.id;\r\n  });\r\n\r\n  return (\r\n    <tr>\r\n      <td className='text-center'>\r\n        <Link to={`/vacancies/${vacancyId}`} target='_blank'>\r\n          {\" \"}\r\n          {vacancy}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/companies/${companyId}`} target='_blank'>\r\n          {\" \"}\r\n          {conpanyName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/users/${recruiterId}`} target='_blank'>\r\n          {recruiterName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <div>{quantity}</div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default TableRow;\r\n"],"sourceRoot":""}