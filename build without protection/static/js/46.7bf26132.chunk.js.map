{"version":3,"sources":["utils/api/candidate.js","components/shared/Tabs/Tabs.js","components/Candidates/CommentSentForm.js","components/Candidates/Form.js","components/Candidates/SentTableRow.js","components/Candidates/ExpandableSentTableRow.js","components/Candidates/SentTable.js","components/hoc/withToggle.js","components/DashboardRecruiter/Links.js","components/DashboardRecruiter/ListCandidatesInterview.js","components/DashboardRecruiter/ListCandidates.js","components/DashboardRecruiter/DashboardRecruiter.js"],"names":["URL","getToken","localStorage","getItem","getCandidateProfile","id","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","candidate","candidateStatuses","statusesCandidate","map","candidateStatus","platform","seniority","vacancy","company","dateUpdate","date_last_change","vacancyStatus","status_vac","details","rej_text","selectCandidateStatus","select","avatar","name","date","platforms","seniority_id","tag","tags","salary","language","phone","mobile","email","skype","linkedIn","linkedin","resume","link","comment","comments","about","text_rezume","catch","error","console","log","getCandidateComments","a","addCandidateComment","body","JSON","stringify","editCandidateComment","deleteCandidateComment","commentId","uploadCandidateAvatar","file","obj","createNewCandidate","updateCandidateProfile","deleteCandidateProfile","getDataForSendResumeForm","objCompanies","companies","Object","keys","key","emailTemplate","emailTemplay","text","emailSubject","subject","sendCandidateResume","content","getDataForAppointInterviewForm","appointInterviewForCandidate","cancelCandidateFromFreelancer","saveCommentToCandidate","saveFollowUp","getCadidateLogs","Tabs","state","activeTabId","props","activeTabToggle","tab","setState","prevProps","this","vacanciesCount","candidatesCount","commentsCount","interviewsCount","reviewsCount","testsCount","offersCount","tabs","tabsJSX","active","onClick","tabName","renderTabName","className","xs","md","activeTab","children","Component","defaultProps","CandidatesCommentForm","value","dataSaved","handleChange","target","handleSubmit","event","preventDefault","candId","compId","onSave","candidate_id","company_id","onSubmit","row","sm","lg","type","placeholder","onChange","color","isOpen","CandidatesForm","search","dateFrom","dateTo","dateFromAllCandidates","dateToAllCandidates","dateFromSentCandidates","dateToSentCandidates","dateFromFreelancersCandidates","dateToFreelancersCandidates","dateFollowUpFrom","dateFollowUpTo","selectPlatforms","selectCompanies","selectStatuses","selectSeniority","handleInputChange","onFilter","handleAllInputChange","onAllFilter","handleSentInputChange","onSentFilter","handlePlatformChange","handleCompanyChange","handleStatusChange","handleSeniorityChange","statuses","userRole","autoComplete","style","position","top","right","htmlFor","isMulti","options","CandidateTableRow","recruiter","open","close","status","getBadge","contactCopied","e","mobileValue","emailValue","linkedinValue","skypeValue","explode","split","parse","length","cursor","moment","format","Link","to","href","idx","parsedCompany","Badge","vacStat","CandidateExpandableTableRow","parsedStatus","compName","commentVac","Select","defaultValue","find","label","updateCandidateStatus","colSpan","align","valign","role","aria-label","loadingStyle","background","pointerEvents","opacity","tableStyle","SentCandidatesTable","candidates","pageSize","totalItems","totalPages","currentPage","onChangePage","onSort","loading","candidatesJSX","OpenClose","render","Table","size","responsive","LocaleSelector","Row","Col","PaginationBackend","items","initialPage","withToggle","WrappedComponent","show","toggle","prevState","colorBtn","marginBottom","Button","toUpperCase","Links","listOfLinks","links","title","Card","CardHeader","CardBody","ButtonGroup","display","flexWrap","ListCandidatesInterview","candidatesList","item","ListGroupItem","interview","textAlign","ListGroup","ListCandidates","Review","localesCandidates","DashboardRecruiter","dashboardData","listAllCandInterview","listAllCandOffer","listAllCandReview","listAllCandTest","candidatesData","perPage","filterAndSortCandidates","dropdownOpen","filterAndSort","filterAndSortRecruiterCandidates","getDataForRecruiterDashboard","user","xl","TabPane","tabId","Localization","locales","headerColumns"],"mappings":"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","file":"static/js/46.7bf26132.chunk.js","sourcesContent":["const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n\n/**\n * Fetches candidate's profile from an api by id\n *\n * @param {Number} id candidate id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidateProfile = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewOneCandidate/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidate = data[0];\n      const statuses =\n        data.statusesCandidate !== null && data.statusesCandidate;\n\n      const candidateStatuses = statuses.map(candidateStatus => ({\n        id: candidateStatus.id,\n        platform: candidateStatus.platform,\n        seniority: candidateStatus.seniority,\n        vacancy: candidateStatus.vacancy,\n        company: candidateStatus.company,\n        dateUpdate: candidateStatus.date_last_change,\n        vacancyStatus: candidateStatus.status_vac,\n        details: candidateStatus.rej_text\n      }));\n\n      const selectCandidateStatus = data.select.candidateStatus;\n\n      const candidateInfo = {\n        candidate: {\n          id: candidate.id,\n          avatar: candidate.avatar,\n          name: candidate.name,\n          date: candidate.date,\n          platform: candidate.platforms,\n          seniority_id: candidate.seniority_id,\n          tag:candidate.tags,\n          salary: candidate.salary,\n          language: candidate.language,\n          phone: candidate.mobile,\n          email: candidate.email,\n          skype: candidate.skype,\n          linkedIn: candidate.linkedin,\n          resume: candidate.link,\n          comment: candidate.comments,\n          about: candidate.text_rezume\n        },\n        candidateStatuses,\n        selectCandidateStatus\n      };\n\n      return candidateInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates comments from an api\n *\n * @param {Number} id candidate id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidateComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCandidate/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts Candidates comment\n *\n * @param {Number} id candidate id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCandidateComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCandidate/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit candidates comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCandidateComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCandidate/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes candidates comment\n *\n * @param {Number} id candidate id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCandidateComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCandidate/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads candidate's avatar (image) to the server\n *\n * @param {Number} id candidate id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCandidateAvatar = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    avatar: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addAvatarCandidate/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Creates new candidate object\n *\n * @param {Object} candidate candidate to create\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCandidate = async candidate => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCandidate`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(candidate)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates candidate's profile by id\n *\n * @param {Number} id candidate id\n * @param {Object} candidate candidate to update\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateProfile = (id, candidate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editCandidate/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(candidate)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const candidate = data[0];\n\n      const candidateInfo = {\n        id: candidate.id,\n        name: candidate.name,\n        date: candidate.date,\n        platform: candidate.platforms,\n        seniority_id: candidate.seniority_id,\n        salary: candidate.salary,\n        language: candidate.language,\n        phone: candidate.mobile,\n        email: candidate.email,\n        skype: candidate.skype,\n        linkedIn: candidate.linkedin,\n        resume: candidate.link,\n        comment: candidate.comments,\n        about: candidate.text_rezume\n      };\n\n      return candidateInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Removes candidate by id\n *\n * @param {Number} id candidate id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCandidateProfile = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCandidate/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Receives data from an api for Candidate's send resume form\n *\n * @param {Number} id candidate id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getDataForSendResumeForm = id => {\n  const token = getToken();\n  return fetch(`${URL}/interview/viewInformationForSendCV/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const objCompanies = data.companies;\n      const companies = Object.keys(objCompanies).map(key => objCompanies[key]);\n      const emailTemplate = data.emailTemplay.text;\n      const emailSubject = data.subject;\n\n      const dataForSendResume = {\n        companies,\n        emailTemplate,\n        emailSubject\n      };\n\n      return dataForSendResume;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Sends candidate's resume to the company\n *\n * @param {Number} id candidate id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const sendCandidateResume = async (id, content) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/interview/sendCV/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches data for Appoint interview form by candidate id\n *\n * @param {Number} id candidate id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getDataForAppointInterviewForm = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(\n      `${URL}/interview/inviteOnInterviewView/${id}`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    if (response.ok) {\n      console.log(\"response: \", response);\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Sets day and time of an interview and sends corresponding letters to the company's contacts and candidate\n *\n * @param {Number} id candidate id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const appointInterviewForCandidate = async (id, content) => {\n  const token = getToken();\n\n  try {\n    const response = await fetch(\n      `${URL}/interview/inviteOnInterviewSend/${id}`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(content)\n      }\n    );\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Cancel candidate getting from freelancer in admin/manager/recruiter/ candidates' panel\n *\n * @param {Number} id candidate id\n * @param {Object} content { company id, vacancy id, freelacer id, comment }\n * @returns {Promise} Promise object represents operation result\n */\nexport const cancelCandidateFromFreelancer = async (id, content) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/cancelCandFreelancer/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Saves comment to candidate in Candidate's expandable table\n *\n * @param {Object} content { candidate id, company id, comment }\n * @returns {Promise} Promise object represents operation result\n */\nexport const saveCommentToCandidate = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForVac`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Saves comment and date_follow_up to candidate in Candidate's expandable table\n *\n * @param {Object} content { candidate id, company id, comment }\n * @returns {Promise} Promise object represents operation result\n */\nexport const saveFollowUp = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/saveFollowUp`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches candidate's logs from an api\n *\n * @param {Number} id candidate id\n * @returns {Object} Promise object represents operation result\n */\nexport const getCadidateLogs = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/admin/returnLogsForCand/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Nav, NavItem, NavLink, Row, TabContent } from \"reactstrap\";\r\n\r\nexport default class Tabs extends Component {\r\n  static propTypes = {\r\n    tabs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    vacanciesCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    candidatesCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    commentsCount: PropTypes.number,\r\n    children: PropTypes.node,\r\n    activeTabId: PropTypes.string,\r\n    activeTabToggle: PropTypes.func\r\n  };\r\n\r\n  static defaultProps = {\r\n    vacanciesCount: null,\r\n    candidatesCount: null,\r\n    commentsCount: null,\r\n    children: [],\r\n    activeTabId: '1',\r\n    activeTabToggle: null\r\n  };\r\n\r\n    state = {\r\n      activeTabId: this.props.activeTabId\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if(prevProps.activeTabId !== this.props.activeTabId){\r\n        this.setState({\r\n          activeTabId: this.props.activeTabId\r\n        })\r\n      }\r\n    }\r\n\r\n  activeTabToggle = (tab) => {\r\n      const { activeTabToggle } = this.props;\r\n      if(activeTabToggle) return activeTabToggle(tab)\r\n      this.setState({\r\n        activeTabId: tab\r\n      })\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      vacanciesCount,\r\n      candidatesCount,\r\n      commentsCount,\r\n      interviewsCount,\r\n      reviewsCount,\r\n      testsCount,\r\n      offersCount,\r\n      tabs\r\n    } = this.props;\r\n\r\n    const { activeTabId } = this.state;\r\n\r\n    const renderTabName = tabName => {\r\n      switch (tabName) {\r\n        case \"Vacancies\":\r\n          return `${tabName} ${vacanciesCount ? vacanciesCount : \"\"}`;\r\n        case \"Candidates\":\r\n          return `${tabName} ${candidatesCount ? candidatesCount : \"\"}`;\r\n        case \"Comments\":\r\n          return `${tabName} ${commentsCount ? commentsCount : \"\"}`;\r\n        case \"Interviews\":\r\n          return `${tabName} ${interviewsCount ? interviewsCount : \"\"}`;\r\n        case \"Reviews\":\r\n          return `${tabName} ${reviewsCount ? reviewsCount : \"\"}`;\r\n        case \"Tests\":\r\n          return `${tabName} ${testsCount ? testsCount : \"\"}`;\r\n        case \"Offers\":\r\n          return `${tabName} ${offersCount ? offersCount : \"\"}`;\r\n        default:\r\n          return tabName;\r\n      }\r\n    };\r\n\r\n    const tabsJSX = tabs.map(tab => (\r\n      <NavItem key={tab.id}>\r\n        <NavLink\r\n          active={activeTabId === tab.id}\r\n          name={tab.name}\r\n          onClick={() => this.activeTabToggle(tab.id)}\r\n        >\r\n          {renderTabName(tab.name)}\r\n        </NavLink>\r\n      </NavItem>\r\n    ));\r\n\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" md=\"12\" className=\"mb-4\">\r\n            <Nav tabs>{tabsJSX}</Nav>\r\n            <TabContent activeTab={activeTabId}>\r\n              {this.props.children}\r\n            </TabContent>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// Components\r\nimport { Button, Col, Input, Form, FormGroup, Alert } from \"reactstrap\";\r\n\r\nexport default class CandidatesCommentForm extends Component {\r\n  static propTypes = {\r\n    onSave: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    comment: this.props.value,\r\n    dataSaved: false\r\n  };\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    this.setState({ comment: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { comment } = this.state;\r\n    const { candId, compId, onSave } = this.props;\r\n\r\n    const content = {\r\n      candidate_id: candId,\r\n      company_id: compId,\r\n      comment\r\n    };\r\n\r\n    onSave(content);\r\n    this.setState({ dataSaved: true});\r\n  };\r\n\r\n  render() {\r\n    const { comment, dataSaved } = this.state;\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormGroup row>\r\n          <Col xs={6} sm={6} md={8} lg={8}>\r\n            <Input\r\n              type=\"textarea\"\r\n              name=\"comment\"\r\n              value={comment || ''}\r\n              placeholder=\"Type a comment\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs={6} sm={6} md={4} lg={4}>\r\n          <Alert color=\"success\" isOpen={dataSaved}>\r\n                  Data saved\r\n                </Alert>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </FormGroup>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Form, FormGroup, Input, Row } from \"reactstrap\";\r\n// Components\r\nimport Select from \"../shared/Select\";\r\n\r\nclass CandidatesForm extends Component {\r\n  static propTypes = {\r\n    platforms: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    companies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    statuses: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    seniority: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    onFilter: PropTypes.func.isRequired,\r\n    activeTabId: PropTypes.string.isRequired,\r\n    onAllFilter: PropTypes.func.isRequired,\r\n    onSentFilter: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    search: \"\",\r\n    dateFrom: \"\",\r\n    dateTo: \"\",\r\n    dateFromAllCandidates: \"\",\r\n    dateToAllCandidates: \"\",\r\n    dateFromSentCandidates: \"\",\r\n    dateToSentCandidates: \"\",\r\n    dateFromFreelancersCandidates: \"\",\r\n    dateToFreelancersCandidates: \"\",\r\n    dateFollowUpFrom: \"\",\r\n    dateFollowUpTo: \"\",\r\n    selectPlatforms: [],\r\n    selectCompanies: [],\r\n    selectStatuses: [],\r\n    selectSeniority: []\r\n  };\r\n\r\n  handleInputChange = ({ target: { name, value } }) => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState({ [name]: value }, () => onFilter(this.state));\r\n  };\r\n\r\n  handleAllInputChange = ({ target: { name, value } }) => {\r\n    const { onAllFilter } = this.props;\r\n    console.log('>>>>>>>>>name', [name]);\r\n    console.log('>>>>>>>>>value', value);\r\n\r\n    if([name] == 'dateFromAllCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateFrom: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateToAllCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateTo: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateFollowUpFrom'){\r\n      this.setState({ [name]: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateFollowUpTo'){\r\n      this.setState({ [name]: value }, () => onAllFilter(this.state));\r\n    }\r\n    \r\n  };\r\n\r\n  \r\n\r\n  handleSentInputChange = ({ target: { name, value } }) => {\r\n    const { onSentFilter } = this.props;\r\n\r\n    if([name] == 'dateFromSentCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateFrom: value }, () => onSentFilter(this.state));\r\n    }else if([name] == 'dateToSentCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateTo: value }, () => onSentFilter(this.state));\r\n    }\r\n\r\n    // this.setState({ [name]: value }, () => onSentFilter(this.state));\r\n  };\r\n\r\n  handlePlatformChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectPlatforms: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleCompanyChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectCompanies: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleStatusChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectStatuses: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleSeniorityChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectSeniority: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      search,\r\n      dateFrom,\r\n      dateTo,\r\n      dateFromAllCandidates,\r\n      dateToAllCandidates,\r\n      dateFromSentCandidates,\r\n      dateToSentCandidates,\r\n      dateFromFreelancersCandidates,\r\n      dateToFreelancersCandidates,\r\n      dateFollowUpFrom,\r\n      dateFollowUpTo,\r\n      selectPlatforms,\r\n      selectSeniority,\r\n      selectCompanies,\r\n      selectStatuses,\r\n    } = this.state;\r\n    const { platforms, companies, statuses, seniority, activeTabId, userRole } = this.props;\r\n\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col lg={12}>\r\n            <FormGroup className=\"search-wrap\">\r\n              <Input\r\n                id=\"search\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                value={search}\r\n                placeholder=\"Search\"\r\n                onChange={this.handleInputChange}\r\n                autoComplete=\"off\"\r\n              />\r\n              <i\r\n                className=\"fa fa-search\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0.6rem\",\r\n                  right: \"1.75rem\",\r\n                  color: \"var(--gray)\"\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        {userRole !== 4 ? (\r\n          <Row>\r\n            \r\n            { activeTabId === \"1\" ? (\r\n              <>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFromAllCandidates} className=\"date-filter-label\">Date From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFromAllCandidates\"\r\n                      value={dateFromAllCandidates}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateToAllCandidates} className=\"date-filter-label\">Date To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateToAllCandidates\"\r\n                      value={dateToAllCandidates}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFrom} className=\"date-filter-label\">Date FollowUp From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFollowUpFrom\"\r\n                      value={dateFollowUpFrom}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateTo} className=\"date-filter-label\">Date FollowUp To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateFollowUpTo\"\r\n                      value={dateFollowUpTo}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectPlatforms}\r\n                      options={platforms}\r\n                      placeholder=\"Platforms\"\r\n                      onChange={this.handlePlatformChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectSeniority}\r\n                      options={seniority}\r\n                      placeholder=\"Seniority\"\r\n                      onChange={this.handleSeniorityChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </> )\r\n              : \r\n              activeTabId === \"2\" ? (\r\n                <>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup>\r\n                      <label htmlFor={dateFromSentCandidates} className=\"date-filter-label\">Date From</label>\r\n                      <Input\r\n                        id=\"date-from\"\r\n                        type=\"date\"\r\n                        name=\"dateFromSentCandidates\"\r\n                        value={dateFromSentCandidates}\r\n                        onChange={this.handleSentInputChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup>\r\n                      <label htmlFor={dateToSentCandidates} className=\"date-filter-label\">Date To</label>\r\n                      <Input\r\n                        id=\"date-to\"\r\n                        type=\"date\"\r\n                        name=\"dateToSentCandidates\"\r\n                        value={dateToSentCandidates}\r\n                        onChange={this.handleSentInputChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={3} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectPlatforms}\r\n                        options={platforms}\r\n                        placeholder=\"Platforms\"\r\n                        onChange={this.handlePlatformChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={3} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectCompanies}\r\n                        options={companies}\r\n                        placeholder=\"Companies\"\r\n                        onChange={this.handleCompanyChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectStatuses}\r\n                        options={statuses}\r\n                        placeholder=\"Statuses\"\r\n                        onChange={this.handleStatusChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n              </>) :\r\n              (<>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFromFreelancersCandidates} className=\"date-filter-label\">Date From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFromFreelancersCandidates\"\r\n                      value={dateFromFreelancersCandidates}\r\n                      // onChange={this.handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateToFreelancersCandidates} className=\"date-filter-label\">Date To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateToFreelancersCandidates\"\r\n                      value={dateToFreelancersCandidates}\r\n                      // onChange={this.handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={3} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectPlatforms}\r\n                      options={platforms}\r\n                      placeholder=\"Platforms\"\r\n                      onChange={this.handlePlatformChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={3} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectCompanies}\r\n                      options={companies}\r\n                      placeholder=\"Companies\"\r\n                      onChange={this.handleCompanyChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectStatuses}\r\n                      options={statuses}\r\n                      placeholder=\"Statuses\"\r\n                      onChange={this.handleStatusChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </>\r\n            )}\r\n          </Row>\r\n        ) : null}\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CandidatesForm;\r\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { Badge } from \"reactstrap\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\n\nconst CandidateTableRow = ({\n  id,\n  date,\n  name,\n  platform,\n  salary,\n  email,\n  mobile,\n  linkedin,\n  skype,\n  companies,\n  recruiter,\n  isOpen,\n  open,\n  close,\n  status\n}) => {\n  const getBadge = status => {\n    return status === \"OFFER\" || status === \"Hired\"\n      ? \"success\"\n      : status === \"Hold\"\n      ? \"secondary\"\n      : status === \"Interview\"\n      ? \"warning\"\n      : status === \"Rejected\" || status === \"Refused\"\n      ? \"danger\"\n      : status === \"Review\"\n      ? \"primary\"\n      : null;\n  };\n\n  const contactCopied = e => {\n    e.target.style.color = \"var(--green)\"\n  };\n\n  let mobileValue = mobile;\n  let emailValue = email;\n  let linkedinValue = linkedin;\n  let skypeValue = skype;\n\n  if(mobile === \"\" || null){\n    mobileValue = null\n  }\n\n  if(email === \"\" || null){\n    emailValue = null\n  }\n\n  if(linkedin === \"\" || null){\n    linkedinValue = null\n  }\n\n  if(skype === \"\" || null){\n    skypeValue = null\n  }\n\n  if (status !== \"\" || null) {\n    let explode = status.split(';');\n    status = JSON.parse(explode[explode.length - 1]);\n  }\n\n  return (\n    <>\n      <td>\n        {isOpen ? (\n          <i\n            className=\"icon-close icons font-xl\"\n            style={{ color: \"var(--red)\", cursor: \"pointer\" }}\n            onClick={close}\n          />\n        ) : (\n          <i\n            className=\"icon-plus icons font-xl\"\n            style={{ color: \"var(--green)\", cursor: \"pointer\" }}\n            onClick={open}\n          />\n        )}\n      </td>\n      <td>{moment(date).format(\"DD.MM.YY\")}</td>\n      <td>{platform}</td>\n      <td>\n        <Link to={`/candidates/${id}`} target=\"_blank\">{name}</Link>\n      </td>\n      <td>{salary}</td>\n      <td>\n        <div className=\"contacts-col-icons-wrap\">\n          {\n            mobileValue !== null ?\n              <CopyToClipboard text={mobileValue}>\n                <i className=\"icon-phone icons font-xl contact-icon\"\n                   style={{color: \"var(--black)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n          {\n            emailValue !== null ?\n              <CopyToClipboard text={emailValue}>\n                <i className=\"icon-envelope icons font-xl contact-icon\"\n                   style={{color: \"var(--black)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n          {\n            linkedinValue !== null ?\n              <a href={linkedinValue} target=\"_blank\">\n                <i className=\"icon-social-linkedin icons font-xl contact-icon\"\n                   style={{color: \"var(--blue)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </a>\n              : null\n          }\n          {\n            skypeValue !== null ?\n              <CopyToClipboard text={skypeValue}>\n                <i className=\"icon-social-skype icons font-xl contact-icon\"\n                   style={{color: \"var(--blue)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n        </div>\n      </td>\n      <td>{status[\"vacStat\"]}</td>\n      <td>\n        {companies &&\n          companies.split(\";\").map((company, idx) => {\n            const parsedCompany = JSON.parse(company);\n            return (\n              <Link\n                to={`/companies/${parsedCompany.id}`}\n                key={`${idx}-${id}-${parsedCompany.id}`}\n              >\n                <Badge color={getBadge(parsedCompany.vacStat)}>\n                  {parsedCompany.name}\n                </Badge>\n              </Link>\n            );\n          })}\n      </td>\n      <td>{recruiter}</td>\n    </>\n  );\n};\n\nCandidateTableRow.propTypes = {\n  id: PropTypes.number.isRequired,\n  date: PropTypes.string,\n  name: PropTypes.string,\n  platform: PropTypes.string,\n  salary: PropTypes.string,\n  mobile: PropTypes.string,\n  email: PropTypes.string,\n  linkedin: PropTypes.string,\n  skype: PropTypes.string,\n  companies: PropTypes.string,\n  recruiter: PropTypes.string,\n  open: PropTypes.func,\n  close: PropTypes.func,\n  isOpen: PropTypes.bool.isRequired\n};\n\nCandidateTableRow.defaultProps = {\n  date: \"\",\n  name: \"\",\n  platform: \"\",\n  salary: \"\",\n  mobile: \"\",\n  email: \"\",\n  linkedin: \"\",\n  skype: \"\",\n  companies: \"\",\n  recruiter: \"\",\n  open: () => null,\n  close: () => null\n};\n\nexport default CandidateTableRow;\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge } from \"reactstrap\";\r\n// Components\r\nimport CandidatesCommentForm from \"./CommentSentForm\";\r\nimport Select from \"../shared/Select\";\r\n// Instruments\r\nimport { updateCandidateStatus } from \"../../utils/api/company\";\r\nimport { saveCommentToCandidate } from \"../../utils/api/candidate\";\r\n\r\nconst CandidateExpandableTableRow = ({\r\n  userRole,\r\n  candId,\r\n  candidateStatus,\r\n  statuses\r\n}) => {\r\n  const getBadge = status => {\r\n    return status === \"OFFER\" || status === \"Hired\"\r\n      ? \"success\"\r\n      : status === \"Hold\"\r\n      ? \"secondary\"\r\n      : status === \"Interview\"\r\n      ? \"warning\"\r\n      : status === \"Rejected\" || status === \"Refused\"\r\n      ? \"danger\"\r\n      : status === \"Review\"\r\n      ? \"primary\"\r\n      : null;\r\n  };\r\n\r\n  const parsedStatus = JSON.parse(candidateStatus);\r\n  const { date, compId, compName, vacStat, commentVac } = parsedStatus;\r\n  const comment = commentVac ? commentVac : \"\";\r\n\r\n  return (\r\n    <>\r\n      {date !== null || compId !== null ? (\r\n        <>\r\n          <td>{date ? moment(date).format(\"DD.MM.YY\") : \"\"}</td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <Link to={`/companies/${compId}`}>{compName}</Link>\r\n            ) : (\r\n              compName\r\n            )}\r\n          </td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <Select\r\n                defaultValue={statuses.find(status => status.label === vacStat)}\r\n                options={statuses}\r\n                onChange={value => {\r\n                  const content = {\r\n                    id: candId,\r\n                    company_id: compId,\r\n                    value\r\n                  };\r\n\r\n                  updateCandidateStatus(content);\r\n                }}\r\n              />\r\n            ) : (\r\n              <Badge color={getBadge(vacStat)}>{vacStat}</Badge>\r\n            )}\r\n          </td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <CandidatesCommentForm\r\n                value={comment}\r\n                candId={candId}\r\n                compId={compId}\r\n                onSave={saveCommentToCandidate}\r\n              />\r\n            ) : (\r\n              comment\r\n            )}\r\n          </td>\r\n        </>\r\n      ) : (\r\n        <td colSpan=\"9\" align=\"middle\" valign=\"middle\">\r\n          There are no previous statuses on the candidate.{\" \"}\r\n          <span role=\"img\" aria-label=\"confused face\">\r\n            😕\r\n          </span>\r\n        </td>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nCandidateExpandableTableRow.propTypes = {\r\n  userRole: PropTypes.number.isRequired,\r\n  candId: PropTypes.number.isRequired,\r\n  candidateStatus: PropTypes.string.isRequired,\r\n  statuses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired\r\n};\r\n\r\nexport default CandidateExpandableTableRow;\r\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row, Table } from \"reactstrap\";\n// Components\nimport CandidateTableRow from \"./SentTableRow\";\nimport CandidateExpandableTableRow from \"./ExpandableSentTableRow\";\nimport LocaleSelector from \"../LocaleSelector\";\nimport PaginationBackend from \"../shared/PaginationBackend\";\n// HOC\nimport OpenClose from \"../../render_prop/OpenClose\";\n\nconst loadingStyle = {\n  background: \"var(--white)\",\n  pointerEvents: \"none\",\n  opacity: 0.4\n}\n\nconst tableStyle = {\n  background: \"var(--white)\",\n};\n\nconst SentCandidatesTable = ({\n  userRole,\n  candidates,\n  statuses,\n  pageSize,\n  totalItems,\n  totalPages,\n  currentPage,\n  onChangePage,\n  onSort,\n  loading\n}) => {\n  const candidatesJSX =\n    candidates.length > 0 ? (\n      candidates.map((candidate, idx) => (\n        <OpenClose\n          key={candidate.id}\n          render={(isOpen, open, close) =>\n            isOpen ? (\n              <>\n                <tr key={candidate.id}>\n                  <CandidateTableRow\n                    idx={idx}\n                    isOpen={isOpen}\n                    close={close}\n                    {...candidate}\n                  />\n                </tr>\n                {candidate.status &&\n                  candidate.status.split(\";\").map(status => (\n                    <tr key={candidate.id}>\n                      <td colSpan=\"8\">\n                        <Table style={{ background: \"var(--white)\" }} size=\"sm\">\n                          <thead>\n                            <tr>\n                              <th>Date</th>\n                              <th>Company</th>\n                              <th>Status</th>\n                              <th>Comment</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <CandidateExpandableTableRow\n                                userRole={userRole}\n                                candId={candidate.id}\n                                candidateStatus={status}\n                                statuses={statuses}\n                              />\n                            </tr>\n                          </tbody>\n                        </Table>\n                      </td>\n                    </tr>\n                  ))}\n              </>\n            ) : (\n              <tr key={candidate.id}>\n                <CandidateTableRow\n                  idx={idx}\n                  {...candidate}\n                  isOpen={isOpen}\n                  open={open}\n                />\n              </tr>\n            )\n          }\n        />\n      ))\n    ) : (\n      <tr style={{ color: \"var(--secondary)\" }}>\n        <td colSpan={9} align=\"center\">\n          Nothing found{\" \"}\n          <span role=\"img\" aria-label=\"confused face\">\n            😕\n          </span>\n        </td>\n      </tr>\n    );\n\n  return (\n    <>\n      <Table style={loading ? loadingStyle : tableStyle} responsive>\n        <thead>\n          <tr>\n            <th>+/-</th>\n            <LocaleSelector onSort={onSort} />\n          </tr>\n        </thead>\n        <tbody>{candidatesJSX}</tbody>\n      </Table>\n      {candidates.length > 0 ? (\n        <Row>\n          <Col>\n            <PaginationBackend\n              items={candidates}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              totalPages={totalPages}\n              initialPage={currentPage}\n              onChangePage={onChangePage}\n              loading={loading}\n            />\n          </Col>\n        </Row>\n      ) : null}\n    </>\n  );\n};\n\nSentCandidatesTable.propTypes = {\n  userRole: PropTypes.number.isRequired,\n  candidates: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      date: PropTypes.string,\n      name: PropTypes.string,\n      email: PropTypes.string,\n      platform: PropTypes.string,\n      salary: PropTypes.string,\n      companies: PropTypes.string,\n      recruiter: PropTypes.string,\n      status: PropTypes.string\n    })\n  ),\n  statuses: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number,\n  totalPages: PropTypes.number,\n  onChangePage: PropTypes.func,\n  onSort: PropTypes.func,\n  loading: PropTypes.bool\n};\n\nSentCandidatesTable.defaultProps = {\n  candidates: [],\n  currentPage: null,\n  pageSize: null,\n  totalItems: null,\n  totalPages: null,\n  onChangePage: () => null,\n  onSort: () => null\n};\n\nexport default SentCandidatesTable;\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button, Col, Row } from \"reactstrap\";\r\n\r\nconst withToggle = WrappedComponent =>\r\n  class withToggle extends Component {\r\n    state = {\r\n      show: false\r\n    };\r\n\r\n    toggle = () => {\r\n      this.setState(prevState => ({\r\n        show: !prevState.show\r\n      }));\r\n    };\r\n\r\n    render() {\r\n      const { show } = this.state;\r\n      const { text, color } = this.props;\r\n      const colorBtn = show ? \"danger\" : color;\r\n      return (\r\n        <>\r\n          <Row\r\n            style={{\r\n              marginBottom: \"1rem\"\r\n            }}\r\n          >\r\n            <Col>\r\n              <Button color={colorBtn} onClick={this.toggle}>\r\n                {text.toUpperCase()}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          {show && <WrappedComponent {...this.props} />}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default withToggle;\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, ButtonGroup, Card, CardBody, CardHeader } from \"reactstrap\";\r\n// HOC\r\nimport withToggle from \"../hoc/withToggle\";\r\n\r\nconst Links = ({ links }) => {\r\n  const listOfLinks = links.map(link => (\r\n    <Button tag=\"a\" key={link.id} href={link.link} color=\"link\" target=\"_blank\">\r\n      {link.title}\r\n    </Button>\r\n  ));\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>Links</CardHeader>\r\n      <CardBody>\r\n        <ButtonGroup\r\n          style={{ display: \"flex\", flexWrap: \"wrap\", marginBottom: \"1rem\" }}\r\n        >\r\n          {listOfLinks}\r\n        </ButtonGroup>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nLinks.propTypes = {\r\n  links: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string,\r\n      link: PropTypes.string\r\n    })\r\n  )\r\n};\r\n\r\nLinks.defaultProps = {\r\n  links: []\r\n};\r\n\r\nexport default withToggle(Links);\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nconst ListCandidatesInterview = ({ candidates }) => {\r\n  const candidatesList =\r\n    candidates.length > 0 ? (\r\n      candidates.map((item, idx) => (\r\n        <ListGroupItem key={idx}>{item.interview}</ListGroupItem>\r\n      ))\r\n    ) : (\r\n      <p style={{ textAlign: \"center\" }}>\r\n        There are no candidates scheduled on the interview today{\" \"}\r\n        <span role=\"img\" aria-label=\"confused face\">\r\n          😕\r\n        </span>\r\n      </p>\r\n    );\r\n\r\n  return <ListGroup>{candidatesList}</ListGroup>;\r\n};\r\n\r\nListCandidatesInterview.propTypes = {\r\n  candidates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      interview: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nListCandidatesInterview.defaultProps = {\r\n  candidates: []\r\n};\r\n\r\nexport default ListCandidatesInterview;\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nconst ListCandidates = ({ candidates }) => {\r\n  const candidatesList =\r\n    candidates.length > 0 ? (\r\n      candidates.map(item => (\r\n        <ListGroupItem\r\n          key={item.candId}\r\n          tag=\"a\"\r\n          href={`#/candidates/${item.candId}`}\r\n        >\r\n          {item.Review}\r\n        </ListGroupItem>\r\n      ))\r\n    ) : (\r\n      <p style={{ textAlign: \"center\" }}>\r\n        There are no candidates who match{\" \"}\r\n        <span role=\"img\" aria-label=\"confused face\">\r\n          😕\r\n        </span>\r\n      </p>\r\n    );\r\n\r\n  return <ListGroup>{candidatesList}</ListGroup>;\r\n};\r\n\r\nListCandidates.propTypes = {\r\n  candidates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      candId: PropTypes.number.isRequired,\r\n      Review: PropTypes.string\r\n    })\r\n  )\r\n};\r\n\r\nListCandidates.defaultProps = {\r\n  candidates: []\r\n};\r\n\r\nexport default ListCandidates;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Col, Row, TabPane } from \"reactstrap\";\r\n// Components\r\nimport Links from \"./Links\";\r\nimport ListCandidatesInterview from \"./ListCandidatesInterview\";\r\nimport ListCandidates from \"./ListCandidates\";\r\nimport CandidatesForm from \"../Candidates/Form\";\r\nimport SentCandidatesTable from \"../Candidates/SentTable\";\r\nimport Tabs from \"../shared/Tabs/Tabs\";\r\n// Context\r\nimport Localization from \"../../providers/Localization\";\r\n// Instruments\r\nimport {\r\n  getDataForRecruiterDashboard,\r\n  filterAndSortRecruiterCandidates\r\n} from \"../../utils/api\";\r\n\r\nconst tabs = [\r\n  { id: \"1\", name: \"Interviews\" },\r\n  { id: \"2\", name: \"Reviews\" },\r\n  { id: \"3\", name: \"Tests\" },\r\n  { id: \"4\", name: \"Offers\" }\r\n];\r\n\r\nconst localesCandidates = [\r\n  \"Date\",\r\n  \"Platform\",\r\n  \"Name\",\r\n  \"Email\",\r\n  \"Salary\",\r\n  \"Companies\",\r\n  \"Recruiter\"\r\n];\r\n\r\nexport default class DashboardRecruiter extends Component {\r\n  state = {\r\n    dashboardData: {\r\n      links: [],\r\n      listAllCandInterview: [],\r\n      listAllCandOffer: [],\r\n      listAllCandReview: [],\r\n      listAllCandTest: []\r\n    },\r\n    candidatesData: {\r\n      candidates: [],\r\n      candidatesCount: null,\r\n      totalPages: null,\r\n      perPage: null,\r\n      currentPage: 1,\r\n      platforms: [],\r\n      companies: [],\r\n      statuses: [],\r\n      recruiter: []\r\n    },\r\n    filterAndSortCandidates: {\r\n      search: \"\",\r\n      dateFrom: \"\",\r\n      dateTo: \"\",\r\n      selectCompanies: [],\r\n      selectPlatforms: [],\r\n      selectStatuses: []\r\n    },\r\n    dropdownOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { filterAndSortCandidates } = this.state;\r\n    getDataForRecruiterDashboard().then(dashboardData => {\r\n      if (dashboardData) {\r\n        this.setState({\r\n          ...this.state,\r\n          dashboardData\r\n        });\r\n      }\r\n    });\r\n\r\n    filterAndSortRecruiterCandidates(1, filterAndSortCandidates).then(\r\n      candidatesData => {\r\n        if (candidatesData) {\r\n          this.setState({\r\n            ...this.state,\r\n            candidatesData\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  loading = () => (\r\n    <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\r\n  );\r\n\r\n  filterAndSortCandidates = filterAndSort => {\r\n    const { filterAndSortCandidates } = this.state;\r\n\r\n    this.setState(\r\n      {\r\n        filterAndSortCandidates: {\r\n          ...filterAndSortCandidates,\r\n          ...filterAndSort\r\n        }\r\n      },\r\n      () => {\r\n        const {\r\n          candidatesData: { currentPage },\r\n          filterAndSortCandidates\r\n        } = this.state;\r\n\r\n        filterAndSortRecruiterCandidates(\r\n          currentPage,\r\n          filterAndSortCandidates\r\n        ).then(candidatesData => {\r\n          this.setState({\r\n            ...this.state,\r\n            candidatesData\r\n          });\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  onChangePage = currentPage => {\r\n    const { filterAndSortCandidates } = this.state;\r\n\r\n    filterAndSortRecruiterCandidates(currentPage, filterAndSortCandidates).then(\r\n      candidatesData => {\r\n        this.setState({\r\n          ...this.state,\r\n          candidatesData\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state);\r\n    const {\r\n      dashboardData: {\r\n        links,\r\n        listAllCandInterview,\r\n        listAllCandOffer,\r\n        listAllCandReview,\r\n        listAllCandTest\r\n      },\r\n      candidatesData: {\r\n        candidates,\r\n        candidatesCount,\r\n        totalPages,\r\n        perPage,\r\n        currentPage,\r\n        platforms,\r\n        companies,\r\n        statuses\r\n      }\r\n    } = this.state;\r\n    const { role } = this.props.user;\r\n\r\n    const interviewsCount = listAllCandInterview.length;\r\n    const reviewsCount = listAllCandReview.length;\r\n    const testsCount = listAllCandTest.length;\r\n    const offersCount = listAllCandOffer.length;\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n            <Links links={links} text=\"links\" color=\"primary\" />\r\n          </Col>\r\n        </Row>\r\n        <Tabs\r\n          tabs={tabs}\r\n          interviewsCount={interviewsCount}\r\n          reviewsCount={reviewsCount}\r\n          testsCount={testsCount}\r\n          offersCount={offersCount}\r\n        >\r\n          <TabPane tabId=\"1\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidatesInterview candidates={listAllCandInterview} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"2\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandReview} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"3\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandTest} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"4\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandOffer} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n        </Tabs>\r\n        <Row>\r\n          <Col xl={12}>\r\n            <CandidatesForm\r\n              platforms={platforms}\r\n              companies={companies}\r\n              statuses={statuses}\r\n              onFilter={this.filterAndSortCandidates}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Localization\r\n              locales={localesCandidates}\r\n              onSort={this.filterAndSortCandidates}\r\n            >\r\n              {candidates.length > 0 && (\r\n                <SentCandidatesTable\r\n                  userRole={role}\r\n                  candidates={candidates}\r\n                  statuses={statuses}\r\n                  headerColumns={localesCandidates}\r\n                  totalItems={candidatesCount}\r\n                  pageSize={perPage}\r\n                  totalPages={totalPages}\r\n                  currentPage={currentPage}\r\n                  onChangePage={this.onChangePage}\r\n                />\r\n              )}\r\n            </Localization>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}