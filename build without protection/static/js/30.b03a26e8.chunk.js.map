{"version":3,"sources":["utils/api/vacancy.js","utils/api/users.js"],"names":["URL","getToken","localStorage","getItem","getVacancyProfile","id","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","vacancy","date","date_create","company","platform","platforms","seniority","seniorities","status","location","salary","link","description","opus","details","catch","error","console","log","createNewVacancy","a","body","JSON","stringify","updateVacancy","deleteVacancy","getVacancies","company_id","isActive","withRecruiters","getTags","params","getUsers","staff","users","partners","freelancers","freeLancers"],"mappings":"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","file":"static/js/30.b03a26e8.chunk.js","sourcesContent":["const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches vacancy profile by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancyProfile = id => {\n  const token = getToken();\n  // console.log(\"vacancy before\");\n  return fetch(`${URL}/main/viewVacancy/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n/**\n * Creates new vacancy object\n *\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewVacancy = async vacancy => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(vacancy)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n *  Updates vacancy by id\n *\n * @param {Number} id vacancy id\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancy = (id, vacancy) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editVacancy/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(vacancy)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n      console.log(\"vacancy response\", data);\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Removes vacancy by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteVacancy = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteVacancy/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n\n/**\n * Gets vacancies object\n *\n * @param {Interger} company_id {}\n * @param {Boolean} isActive active vacancies - true, all vacancies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancies = (company_id, isActive = false, withRecruiters = false) => {\n  const token = getToken();\n  // try {\n  console.log(token);\n  return fetch(`${URL}/main/returnAllVacancy`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      company_id: company_id,\n      withRecruiters: withRecruiters,\n      isActive:isActive\n    })\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(`${response.statusText}`);\n  }).catch(error => console.log(\"error in fetch: \", error));\n};\n//antonmlz_web2\n//3nSJ&Yx&\n\n/**\n * Gets vacancies object\n *\n * @param {Array} tags {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const getTags = async params => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/getTags`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all users from an api\r\n *\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getUsers = () => {\r\n  const token = getToken();\r\n\r\n  return fetch(`${URL}/admin/all-staff`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const users = {\r\n        staff: data.users,\r\n        partners: data.partners,\r\n        freelancers: data.freeLancers\r\n      };\r\n\r\n      return users;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n"],"sourceRoot":""}