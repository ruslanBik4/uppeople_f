{"version":3,"sources":["utils/api/vacancy.js","utils/api/users.js"],"names":["URL","getToken","localStorage","getItem","getVacancyProfile","id","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","vacancy","console","log","date","date_create","company","platform","platforms","seniority","seniorities","status","location","salary","link","description","opus","details","recruiters_ids","catch","error","createNewVacancy","a","body","JSON","stringify","updateVacancy","deleteVacancy","getVacancies","company_id","isActive","withRecruiters","getTags","params","getUsers","staff","users","partners","freelancers","freeLancers","recruiters"],"mappings":"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","file":"static/js/12.505e46f2.chunk.js","sourcesContent":["const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches vacancy profile by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancyProfile = id => {\n  const token = getToken();\n  // console.log(\"vacancy before\");\n  return fetch(`${URL}/main/viewVacancy/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n\n      console.log( vacancy);\n\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details,\n        recruiters_ids: vacancy.recruiters_ids\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n/**\n * Creates new vacancy object\n *\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewVacancy = async vacancy => {\n  console.log(vacancy);\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(vacancy)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n *  Updates vacancy by id\n *\n * @param {Number} id vacancy id\n * @param {Object} vacancy {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancy = (id, vacancy) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editVacancy/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(vacancy)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const vacancy = data[0];\n      console.log(\"vacancy response\", data);\n      const vacancyInfo = {\n        id: vacancy.id,\n        date: vacancy.date_create,\n        company: vacancy.company,\n        platform: vacancy.platforms,\n        seniority: vacancy.seniorities,\n        status: vacancy.status,\n        location: vacancy.location,\n        salary: vacancy.salary,\n        link: vacancy.link,\n        description: vacancy.opus,\n        details: vacancy.details\n      };\n\n      return vacancyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Removes vacancy by id from an api\n *\n * @param {Number} id vacancy id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteVacancy = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteVacancy/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n\n/**\n * Gets vacancies object\n *\n * @param {Interger} company_id {}\n * @param {Boolean} isActive active vacancies - true, all vacancies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getVacancies = (company_id, isActive = false, withRecruiters = false) => {\n  const token = getToken();\n  // try {\n  console.log(token);\n  return fetch(`${URL}/main/returnAllVacancy`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      company_id: company_id,\n      withRecruiters: withRecruiters,\n      isActive:isActive\n    })\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(`${response.statusText}`);\n  }).catch(error => console.log(\"error in fetch: \", error));\n};\n//antonmlz_web2\n//3nSJ&Yx&\n\n/**\n * Gets vacancies object\n *\n * @param {Array} tags {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const getTags = async params => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/getTags`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all users from an api\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getUsers = () => {\n  const token = getToken();\n\n  return fetch(`${URL}/admin/all-staff`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const users = {\n        staff: data.users,\n        partners: data.partners,\n        freelancers: data.freeLancers,\n        recruiters:data.recruiters\n      };\n\n      return users;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n"],"sourceRoot":""}