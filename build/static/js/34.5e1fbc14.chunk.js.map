{"version":3,"sources":["components/Admin/Acquisition funnel/Acquisition funnel.js"],"names":["AcquisitionFunnel","props","fetchRecruiters","a","getUsers","undefined","users","staff","recruiters","filter","user","role_id","setState","selectedRecruiter","recruitersIsClearable","fetchCompanies","getCompanies","companies_result","state","companies","company","vacancies","indexOf","id","fetchVacancies","selectedCompany","getVacancies","vacancies_result","vacancy","fetchTags","getTags","tags","selectedTags","fetchCandidatesData","selectedVacancy","selectedStartDate","selectedEndDate","getCandidatesAmountByTags","data","funnelData","main","pieChartData","reject","fetchStatuses","getStatuses","statuses","selectedStatuses","handleRecruiterSelect","handleCompanySelect","handleVacancySelect","company_id","handleTagsSelect","handleStatusChange","handleDate","target","name","value","renderPieChart","total","Object","entries","count","series","push","category","color","title","position","type","field","categoryField","labels","visible","content","formatedNumber","Number","dataItem","toLocaleString","style","minimumFractionDigits","formatLabel","label","formatted_labels","Map","set","get","renderFunnelChart","final_data","index","selectedTag","length","parseInt","stat","percentage","parseFloat","toFixed","dynamicSlope","dynamicHeight","margin","width","height","className","text","colorField","background","format","render","point","date","Date","y","getFullYear","m","getMonth","firstDay","toJSON","slice","lastDay","this","prevProps","prevState","marginBottom","fontSize","xs","sm","md","lg","xl","options","isClearable","getOptionValue","getOptionLabel","placeholder","onChange","isMulti","tag","Component","String","prototype","replaceAll","search","replace","split","join"],"mappings":"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","file":"static/js/34.5e1fbc14.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Col, FormGroup, Input, Row} from \"reactstrap\";\nimport Select from \"react-select\";\nimport {getUsers} from \"../../../utils/api/users\"; // вакансии\nimport {getCompanies} from \"../../../utils/api/company\"; // компании\nimport {getVacancies, getTags} from \"../../../utils/api/vacancy\"; // вакансии и теги\nimport {getStatuses, getCandidatesAmountByTags} from \"../../../utils/api/candidates\"; // вакансии и теги\nimport {\n  Chart,\n  ChartTitle,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTooltip,\n  ChartSeriesLabels,\n} from \"@progress/kendo-react-charts\";\n// Import the styles\nimport {styles} from \"../../../assets/css/analitycs.css\";\n\nexport default class AcquisitionFunnel extends Component {\n  constructor(props) {\n    super(props);\n\n    // let date = new Date();\n    // let end_date = date.toJSON().slice(0, 10);\n    // date.setMonth(date.getMonth() - 1);\n    // let start_date = date.toJSON().slice(0, 10);\n\n\n    let date = new Date(), y = date.getFullYear(), m = date.getMonth();\n    let firstDay = new Date(y, m, 2).toJSON().slice(0, 10);\n    let lastDay = new Date(y, m + 1, 0).toJSON().slice(0, 10);\n\n\n    this.state = {\n      recruiters: [],\n      companies: [],\n      vacancies: [],\n      tags: [],\n      // statuses: [],\n\n      selectedRecruiter: null,\n      selectedCompany: null,\n      selectedVacancy: null,\n      selectedTags: null,\n      selectedStartDate: firstDay,\n      selectedEndDate: lastDay,\n\n      recruitersIsClearable: true,\n\n      funnelData: null,\n      pieChartData: null,\n      dynamicSlope: true,\n      dynamicHeight: false\n    };\n  }\n\n  componentDidMount() { // тут пишеться те, що потрібно підгрузити з АПІ\n    this.fetchRecruiters();\n    this.fetchCompanies();\n    this.fetchVacancies();\n    this.fetchTags();\n    this.fetchCandidatesData();\n    this.fetchStatuses();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter ||\n      this.state.selectedCompany !== prevState.selectedCompany ||\n      this.state.selectedVacancy !== prevState.selectedVacancy ||\n      this.state.selectedTags !== prevState.selectedTags ||\n      this.state.selectedStartDate !== prevState.selectedStartDate ||\n      this.state.selectedEndDate !== prevState.selectedEndDate) {\n      this.fetchCandidatesData();\n    }\n\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter) {\n      this.fetchCompanies();\n      this.fetchVacancies();\n    }\n\n    if (this.state.selectedCompany !== prevState.selectedCompany) {\n      this.fetchVacancies();\n    }\n  }\n\n  fetchRecruiters = async () => {\n    const users = await getUsers();\n\n    if (users.staff !== undefined) {\n      const recruiters = users.staff.filter((user) => user.role_id === 2); // recruiter\n      this.setState({recruiters});\n    } else if (users.recruiters !== undefined) {\n      const recruiters = users.recruiters; // recruiter\n      this.setState({recruiters});\n      this.setState({selectedRecruiter: recruiters[0]});\n      this.setState({recruitersIsClearable: false});\n    }\n  };\n\n  fetchCompanies = async () => {\n    let companies_result = await getCompanies(0, 1, 1);\n    const {selectedRecruiter} = this.state;\n    const companies = companies_result.companies.filter((company) => company.vacancies > 0 &&\n      (selectedRecruiter !== null && company.recruiters.indexOf(selectedRecruiter.id) + 1 > 0 || selectedRecruiter === null));\n    this.setState({companies});\n  };\n\n  fetchVacancies = async () => {\n    const {selectedCompany, selectedRecruiter} = this.state;\n    const vacancies_result = await getVacancies(selectedCompany !== null ? selectedCompany.id : null, true, true);\n    const vacancies = vacancies_result.vacancies.filter((vacancy) =>\n      (selectedRecruiter !== null && vacancy.recruiters.indexOf(selectedRecruiter.id) + 1 > 0 || selectedRecruiter === null)\n    );\n    this.setState({vacancies});\n  };\n\n  fetchTags = async () => {\n    const tags = await getTags({'main': true});\n    this.setState({tags});\n    this.setState({selectedTags: tags});\n  };\n\n  fetchCandidatesData = async () => {\n    const {selectedRecruiter, selectedCompany, selectedVacancy, selectedStartDate, selectedEndDate} = this.state;\n    let data = await getCandidatesAmountByTags(\n      selectedRecruiter ? selectedRecruiter.id : 0,\n      selectedCompany ? selectedCompany.id : 0,\n      selectedVacancy ? selectedVacancy.id : 0,\n      selectedStartDate, selectedEndDate);\n    if (data !== undefined) {\n      let funnelData = data.data.main;\n      let pieChartData = data.data.reject;\n\n      this.setState({funnelData});\n      this.setState({pieChartData});\n    } else {\n      this.setState({funnelData: null});\n    }\n  };\n\n  fetchStatuses = async () => {\n    const statuses = await getStatuses();\n    this.setState({statuses});\n    this.setState({selectedStatuses: statuses});\n  };\n\n\n  handleRecruiterSelect = (selectedRecruiter) => {\n    this.setState({selectedRecruiter});\n  };\n\n  handleCompanySelect = (selectedCompany) => {\n    this.setState({selectedCompany});\n  };\n\n  handleVacancySelect = (selectedVacancy) => {\n    let {selectedCompany, companies} = this.state;\n    if (selectedVacancy !== null) {\n      selectedCompany = companies.filter((company) => company.id === selectedVacancy.company_id)[0];\n    }\n    this.setState({selectedVacancy, selectedCompany});\n  };\n\n  handleTagsSelect = (selectedTags) => {\n    this.setState({selectedTags});\n  };\n\n  handleStatusChange = (selectedStatuses) => {\n    this.setState({selectedStatuses});\n  };\n\n  handleDate = ({target: {name, value}}) => {\n    this.setState({[name]: value});\n  };\n\n\n  renderPieChart = () => {\n\n    const {pieChartData} = this.state;\n    let total = 0;\n    if (pieChartData !== undefined && pieChartData !== null) {\n      for (const [index, value] of Object.entries(pieChartData)) {\n        total += value.count;\n      }\n\n      let series = [];\n      for (const [index, value] of Object.entries(pieChartData)) {\n        if (value.count > 0) {\n          series.push({\n            category: value.name,\n            value: value.count / total,\n            color: value.color,\n            count: value.count\n          });\n        }\n      }\n\n      const labelContent = (props) => {\n        let formatedNumber = Number(props.dataItem.value).toLocaleString(undefined, {\n          style: 'percent',\n          minimumFractionDigits: 2\n        });\n        // return `${props.dataItem.category.replaceAll(\" \", \"\\n\") + \"\\n\"} ${props.dataItem.count} -  ${formatedNumber}`;\n        return `${this.formatLabel(props.dataItem.category)} \\n ${props.dataItem.count} -  ${formatedNumber}`;\n        // return `${props.dataItem.category.replaceAll(\" \", \"\\n\")} ${props.dataItem.value}`;\n\n      };\n      return (\n\n        <Chart title=\"World Population by Broad Age Groups\">\n          <ChartLegend position=\"bottom\"/>\n          <ChartSeries>\n            <ChartSeriesItem type=\"pie\" data={series} field=\"value\" categoryField=\"category\"\n                             labels={{visible: true, content: labelContent}}/>\n          </ChartSeries>\n        </Chart>\n      );\n    }\n    // }\n    // else {\n    //   return (<p>No data found</p>);\n    // }\n    // }\n\n  };\n\n  formatLabel = (label) => {\n    let formatted_labels = new Map();\n// setting the values\n    formatted_labels.set('closed to offers', \"closed\" + \"\\n\" + \"to offers\");\n    formatted_labels.set('low salary rate', \"low\" + \"\\n\" + \"salary rate\");\n    formatted_labels.set('was contacted earlier', \"was contacted\" + \"\\n\" + \"earlier\");\n    formatted_labels.set('does not like the project', \"does not like\" + \"\\n\" + \"the project\");\n    formatted_labels.set('terms don’t fit', \"terms\" + \"\\n\" + \"don’t fit\");\n    formatted_labels.set('remote only', \"remote\" + \"\\n\" + \"only\");\n    formatted_labels.set(\"does not fit\", \"doesn't fit\");\n\n    return formatted_labels.get(label);\n  };\n\n  renderFunnelChart = () => {\n    const {funnelData, selectedTags} = this.state;\n\n    if (funnelData !== null && funnelData !== undefined) {\n\n      // //////\n      //\n      // console.log('до нового циклу');\n      // console.log(funnelData);\n      let final_data = [];\n\n      let total = 0;\n      for (const [index, value] of Object.entries(funnelData)) {\n        total += value.count;\n      }\n\n\n      for (const [index, value] of Object.entries(funnelData)) {\n        if (selectedTags !== null) {\n          let in_tags = selectedTags.filter((selectedTag) => selectedTag.id === value.id);\n          if (in_tags.length > 0) {\n            // console.log(index);\n            if (parseInt(index) === 0) {\n              final_data.push({\n                stat: value.name,\n                count: total,\n                color: value.color,\n                percentage: 100\n              });\n            }\n            if (index > 0) {\n              final_data.push({\n                stat: value.name + ' ' + parseFloat(parseInt(value.count) / total * 100).toFixed(2) + '%',\n                count: value.count,\n                color: value.color,\n                percentage: parseInt(value.count) / total * 100\n              });\n            }\n            // data.push({\n            //   stat: value.name,\n            //   count: value.count,\n            //   color: value.color,\n            //   percentage: 100\n            // });\n          }\n        }\n      }\n      // console.log(\"після нового циклу\");\n      // console.log(final_data);\n\n      /////////\n//\n//       console.log('до циклу');\n//       console.log(funnelData);\n//       const result = Object.entries(funnelData).reduceRight(\n//         (acc, [currentKey, currentValue], index, array) => {\n//           console.log(currentValue);\n//           const prev = array[index + 1];\n//           if (prev) {\n//             // console.log(prev);\n//             const [prevKey] = prev;\n//             acc[currentKey] = {\n//               ...currentValue,\n//               count: acc[prevKey].count + currentValue.count\n//             };\n//           } else {\n//             acc[currentKey] = currentValue;\n//           }\n//           return acc;\n//         },\n//         {}\n//       );\n//       console.log('після циклу');\n//       console.log(result);\n//       console.log(' ');\n//       // let data = [];\n//       for (const [index, value] of Object.entries(result)) {\n//         if (selectedTags !== null) {\n//           let in_tags = selectedTags.filter((selectedTag) => selectedTag.id === value.id);\n//           if (in_tags.length > 0) {\n//             data.push({\n//               stat: value.name,\n//               count: value.count,\n//               color: value.color,\n//               percentage: 100\n//             });\n//           }\n//         }\n//       }\n// //\n//       data = data.reduce(\n//         (acc_, currentValue, index, array) => {\n//           const prev = array[index - 1];\n//\n//           if (prev) {\n//             if (prev.count > 0) {\n//               currentValue.percentage = (parseFloat(currentValue.count) * 100 / parseFloat(prev.count)).toFixed(0)\n//             } else {\n//               currentValue.percentage = 0;\n//             }\n//           }\n//\n//           acc_[index] = currentValue;\n//\n//           return acc_;\n//         },\n//         {}\n//       );\n//\n//       let final_data = [];\n//       for (const [index, value] of Object.entries(data)) {\n//         final_data.push({\n//           stat: value.stat + ' ' + value.percentage + '%',\n//           count: value.count,\n//           color: value.color,\n//         });\n//       }\n\n      const tooltipRender = (({point = {}}) => (point.category));\n\n      const {dynamicSlope, dynamicHeight} = this.state;\n      return (\n\n        <Chart style={{margin: \"25px auto 0\", width: 300, height: 350}} className={\"pie_chart\"}>\n          <ChartTitle text=\"Acquisition funnel\"/>\n          <ChartSeries style={{height: 350}}>\n            <ChartSeriesItem\n              type=\"funnel\"\n              data={final_data}\n              categoryField=\"stat\"\n              field=\"count\"\n              colorField=\"color\"\n              dynamicHeight={dynamicHeight}\n              dynamicSlope={dynamicSlope}\n            >\n              <ChartSeriesLabels color=\"black\" background=\"none\" format=\"N0\"/>\n            </ChartSeriesItem>\n          </ChartSeries>\n          <ChartTooltip render={tooltipRender}/>\n          <ChartLegend visible={false}/>\n        </Chart>\n      );\n      // }\n      // else {\n      //   return (<p>No data found</p>);\n      // }\n    }\n  };\n\n\n  render() {\n    // захист\n    // if (Date.now() > 1603379532000) {\n    //   return (\n    //     <>\n    //       <Row style={{marginBottom: \"1rem\"}}>\n    //         <Col>\n    //           <h1 style={{marginBottom: 0, fontSize: 24}}>Sorry, but this page is not payed yet. Please pay to make it\n    //             available</h1>\n    //         </Col>\n    //       </Row>\n    //     </>\n    //   )\n    // } else {\n\n\n      const {recruiters, selectedRecruiter, recruitersIsClearable} = this.state;\n      const {companies, selectedCompany} = this.state;\n      const {vacancies, selectedVacancy} = this.state;\n      const {tags, selectedTags} = this.state;\n      const {selectedStartDate, selectedEndDate} = this.state;\n\n      return (\n        <>\n          <Row style={{marginBottom: \"1rem\"}}>\n            <Col>\n              <h1 style={{marginBottom: 0, fontSize: 24}}>Acquisition funnel</h1>\n            </Col>\n          </Row>\n          <Row style={{marginBottom: \"1rem\"}}>\n            <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n              <FormGroup className=\"filter-select\">\n                <label className=\"date-filter-label\">Filters</label>\n                <Select\n                  style={{marginBottom: 15}}\n                  value={selectedRecruiter}\n                  options={recruiters}\n                  isClearable={recruitersIsClearable}\n                  getOptionValue={(user) => user.id}\n                  getOptionLabel={(user) => user.name}\n                  placeholder=\"Recruiters\"\n                  onChange={this.handleRecruiterSelect}\n                />\n              </FormGroup>\n              <FormGroup className=\"filter-select\">\n                <Select\n                  style={{marginBottom: \"1rem\"}}\n                  value={selectedCompany}\n                  options={companies}\n                  isClearable\n                  getOptionValue={(company) => company.id}\n                  getOptionLabel={(company) => company.name}\n                  placeholder=\"Companies\"\n                  onChange={this.handleCompanySelect}\n                />\n              </FormGroup>\n              <FormGroup className=\"filter-select\">\n                <Select\n                  style={{marginBottom: \"1rem\"}}\n                  value={selectedVacancy}\n                  options={vacancies}\n                  isClearable\n                  getOptionValue={(vacancy) => vacancy.id}\n                  getOptionLabel={(vacancy) => vacancy.label}\n                  placeholder=\"Vacancies\"\n                  onChange={this.handleVacancySelect}\n                />\n              </FormGroup>\n              <FormGroup className=\"filter-select\">\n                <Select\n                  style={{marginBottom: \"1rem\"}}\n                  isMulti\n                  value={selectedTags}\n                  options={tags}\n                  isClearable\n                  getOptionValue={(tag) => tag.id}\n                  getOptionLabel={(tag) => tag.name}\n                  placeholder=\"Tags\"\n                  onChange={this.handleTagsSelect}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n              <Row style={{marginBottom: \"1rem\"}}>\n                {this.renderFunnelChart()}\n              </Row>\n            </Col>\n            <Col lg={6} md={6}>\n              <Row style={{marginBottom: \"1rem\"}}>\n                <Col lg={6} md={6}>\n                  <FormGroup>\n                    <label className=\"date-filter-label\">Date From</label>\n                    <Input\n                      id=\"date-from\"\n                      type=\"date\"\n                      name=\"selectedStartDate\"\n                      value={selectedStartDate}\n                      onChange={this.handleDate}\n                    />\n                  </FormGroup>\n                </Col>\n                <Col lg={6} md={6}>\n                  <FormGroup>\n                    <label className=\"date-filter-label\">Date To</label>\n                    <Input\n                      id=\"date-to\"\n                      type=\"date\"\n                      name=\"selectedEndDate\"\n                      value={selectedEndDate}\n                      onChange={this.handleDate}\n                    />\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                  {this.renderPieChart()}\n                </Col>\n              </Row>\n            </Col>\n\n          </Row>\n\n        </>\n\n      );\n    }\n  // }\n}\nString.prototype.replaceAll = function (search, replace) {\n  return this.split(search).join(replace);\n};\n"],"sourceRoot":""}