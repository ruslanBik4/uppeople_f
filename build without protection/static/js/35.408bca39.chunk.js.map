{"version":3,"sources":["components/shared/Select.js","components/shared/Select.module.css","components/shared/PaginationBackend.js","utils/api/company.js","utils/api/candidate.js","providers/Localization.js","components/LocaleSelector.js","components/shared/Tabs/Tabs.js","components/Candidates/CommentSentForm.js","components/Candidates/Form.js","components/Candidates/SentTableRow.js","components/Candidates/ExpandableSentTableRow.js","components/Candidates/SentTable.js","components/hoc/withToggle.js","components/DashboardRecruiter/Links.js","components/DashboardRecruiter/ListCandidatesInterview.js","components/DashboardRecruiter/ListCandidates.js","components/DashboardRecruiter/DashboardRecruiter.js"],"names":["name","defaultValue","isMulti","isDisabled","closeMenuOnSelect","inputValue","value","options","components","theme","styles","selectOption","selectProps","setValue","placeholder","onChange","onInputChange","className","classNamePrefix","module","exports","PaginationBackend","props","setPage","page","totalItems","totalPages","pageSize","allDisabled","pager","state","getPager","setState","onChangePage","setInitialPage","currentPage","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","Array","keys","map","i","this","prevProps","console","log","initialPage","loading","length","style","pointerEvents","disabled","onClick","index","key","active","Component","defaultProps","items","URL","getToken","localStorage","getItem","getCompanies","isActive","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","data","companies","company","id","nazva","logo","email","skype","phone","vacancies","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","Pages","current_page","perPage","per_page","catch","error","filterAllCompanies","filter","body","JSON","stringify","createNewCompany","a","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","label","toLowerCase","isChecked","all_platforms","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","getCandidateProfile","candidate","candidateStatuses","statusesCandidate","vacancy","dateUpdate","date_last_change","status_vac","details","rej_text","selectCandidateStatus","select","avatar","date","seniority_id","salary","language","mobile","linkedIn","linkedin","resume","link","comments","text_rezume","getCandidateComments","addCandidateComment","editCandidateComment","deleteCandidateComment","uploadCandidateAvatar","createNewCandidate","updateCandidateProfile","deleteCandidateProfile","getDataForSendResumeForm","objCompanies","emailTemplate","emailTemplay","text","emailSubject","subject","sendCandidateResume","getDataForAppointInterviewForm","appointInterviewForCandidate","cancelCandidateFromFreelancer","saveCommentToCandidate","saveFollowUp","getCadidateLogs","LocalizationContext","createContext","currentColumn","locales","sort","top","bottom","changeLocale","Localization","locale","onSort","reversedSort","Provider","children","Consumer","LocaleSelector","context","topBottomArrow","classnames","icons","scope","minWidth","padding","fontWeight","textAlign","background","border","contextType","Tabs","activeTabId","activeTabToggle","tab","commentsCount","interviewsCount","reviewsCount","testsCount","offersCount","tabs","tabsJSX","tabName","renderTabName","xs","md","activeTab","CandidatesCommentForm","dataSaved","handleChange","target","handleSubmit","event","preventDefault","candId","compId","onSave","candidate_id","company_id","onSubmit","row","sm","lg","type","color","isOpen","CandidatesForm","search","dateFrom","dateTo","dateFromAllCandidates","dateToAllCandidates","dateFromSentCandidates","dateToSentCandidates","dateFromFreelancersCandidates","dateToFreelancersCandidates","dateFollowUpFrom","dateFollowUpTo","selectPlatforms","selectCompanies","selectStatuses","selectSeniority","handleInputChange","onFilter","handleAllInputChange","onAllFilter","handleSentInputChange","onSentFilter","handlePlatformChange","handleCompanyChange","handleStatusChange","handleSeniorityChange","userRole","autoComplete","position","right","htmlFor","CandidateTableRow","recruiter","open","close","status","getBadge","contactCopied","e","mobileValue","emailValue","linkedinValue","skypeValue","explode","split","parse","cursor","moment","format","Link","to","href","idx","parsedCompany","Badge","vacStat","CandidateExpandableTableRow","parsedStatus","compName","commentVac","Select","find","colSpan","align","valign","role","aria-label","loadingStyle","opacity","tableStyle","SentCandidatesTable","candidatesJSX","OpenClose","render","Table","size","responsive","Row","Col","withToggle","WrappedComponent","show","toggle","prevState","colorBtn","marginBottom","Button","toUpperCase","Links","listOfLinks","links","tag","title","Card","CardHeader","CardBody","ButtonGroup","display","flexWrap","ListCandidatesInterview","candidatesList","item","ListGroupItem","interview","ListGroup","ListCandidates","Review","localesCandidates","DashboardRecruiter","dashboardData","listAllCandInterview","listAllCandOffer","listAllCandReview","listAllCandTest","candidatesData","filterAndSortCandidates","dropdownOpen","filterAndSortRecruiterCandidates","getDataForRecruiterDashboard","user","xl","TabPane","tabId","headerColumns"],"mappings":"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","file":"static/js/35.408bca39.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport './Select.module.css'; \r\n// import makeAnimated from \"react-select/lib/animated\";\r\n\r\nexport default ({\r\n  name = \"select\",\r\n  defaultValue,\r\n  isMulti = false,\r\n  isDisabled = false,\r\n  closeMenuOnSelect,\r\n  inputValue,\r\n  value,\r\n  options,\r\n  components,\r\n  theme,\r\n  styles,\r\n  selectOption,\r\n  selectProps,\r\n  setValue,\r\n  placeholder,\r\n  onChange,\r\n  onInputChange\r\n}) => (\r\n  <Select\r\n    name={name}\r\n    styles={styles}\r\n    defaultValue={defaultValue}\r\n    isMulti={isMulti}\r\n    isDisabled={isDisabled}\r\n    inputValue={inputValue}\r\n    value={value}\r\n    options={options}\r\n    closeMenuOnSelect={closeMenuOnSelect}\r\n    components={components}\r\n    theme={theme}\r\n    selectOption={selectOption}\r\n    selectProps={selectProps}\r\n    setValue={setValue}\r\n    placeholder={placeholder}\r\n    className=\"basic-multi-select\"\r\n    classNamePrefix=\"select\"\r\n    onChange={onChange}\r\n    onInputChange={onInputChange}\r\n  />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select__menu\":\"Select_select__menu__3aDwY\"};","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\n\r\nconst propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({})),\r\n  initialPage: PropTypes.number,\r\n  pageSize: PropTypes.number,\r\n  totalItems: PropTypes.number,\r\n  totalPages: PropTypes.number,\r\n  onChangePage: PropTypes.func,\r\n  loading: PropTypes.bool\r\n  // onPageChange: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  items: [],\r\n  initialPage: 1,\r\n  pageSize: 10,\r\n  totalItems: null,\r\n  totalPages: null,\r\n  onChangePage: () => null\r\n  // onPageChange: () => null\r\n};\r\n\r\nclass PaginationBackend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { pager: {} };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    // if (this.props.items && this.props.items.length) {\r\n    //   this.setPage(this.props.initialPage);\r\n    // }\r\n    this.setInitialPage();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log('update from PaginationBackend');\r\n    // reset page if initialPage has changed\r\n    if (\r\n      this.props.initialPage !== prevProps.initialPage ||\r\n      this.props.totalItems !== prevProps.totalItems\r\n    ) {\r\n      console.log('condition update from PaginationBackend');\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  setPage = page => {\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(page);\r\n    // this.props.onPageChange(page);\r\n\r\n  };\r\n\r\n  setInitialPage = () => {\r\n    let page = 1;\r\n    const { totalItems, totalPages, pageSize } = this.props;\r\n    this.allDisabled = false;\r\n    let pager = this.state.pager;\r\n\r\n    if (page < 1 || page > totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(totalItems, page, pageSize);\r\n\r\n    // update state\r\n    this.setState({ pager });\r\n\r\n  }\r\n\r\n  getPager = (totalItems, currentPage, pageSize) => {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  };\r\n\r\n  render() {\r\n    let pager = this.state.pager;\r\n\r\n    const {loading} = this.props;\r\n\r\n    const loadingStyle = {\r\n      pointerEvents: \"none\",\r\n      // opacity: 0.4\r\n    }\r\n\r\n    const paginationStyle = {};\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n    // console.log(this);\r\n    return (\r\n      <Pagination style={loading ? loadingStyle : paginationStyle}  className=\"pagination justify-content-end\">\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink className=\"page-link\" onClick={() => this.setPage(1)}>\r\n            First\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={pager.currentPage === 1 ? true : false}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage - 1)}\r\n          >\r\n            Previous\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        {pager.pages.map((page, index) => (\r\n          <PaginationItem\r\n            key={index}\r\n            className=\"page-item\"\r\n            active={pager.currentPage === page ? true : false}\r\n            disabled={this.allDisabled}\r\n          >\r\n            <PaginationLink\r\n              className=\"page-link\"\r\n              onClick={() => this.setPage(page)}\r\n            >\r\n              {page}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage + 1)}\r\n          >\r\n            Next\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n        <PaginationItem\r\n          className=\"page-item\"\r\n          disabled={(pager.currentPage === pager.totalPages ? true : false) || this.allDisabled}\r\n        >\r\n          <PaginationLink\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.totalPages)}\r\n          >\r\n            Last\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  }\r\n}\r\n\r\nPaginationBackend.propTypes = propTypes;\r\nPaginationBackend.defaultProps = defaultProps;\r\n\r\nexport default PaginationBackend;\r\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all companies from an api\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanies = (page, isActive) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Filters companies\r\n *\r\n * @param {Number} page current page\r\n * @param {Boolean} isActive active companies - true, all companies - false\r\n * @param {Object} filter { name, email, skype, phone }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAllCompanies = (page, isActive, filter) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filter)\r\n  })\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companies = data.companies.map(company => ({\r\n        id: company.id,\r\n        name: company.nazva,\r\n        logo: company.logo,\r\n        email: company.email,\r\n        skype: company.skype,\r\n        phone: company.phone,\r\n        vacancies: company.vacancy_count,\r\n        candidates: company.candidates_to_company_count\r\n      }));\r\n      const companiesCount = data.Count;\r\n      const totalPages = data.Pages;\r\n      const currentPage = data.current_page;\r\n      const perPage = data.per_page;\r\n\r\n      const companiesData = {\r\n        companies,\r\n        companiesCount,\r\n        totalPages,\r\n        currentPage,\r\n        perPage\r\n      };\r\n\r\n      return companiesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Creates new company\r\n *\r\n * @param {Object} company new company object\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewCompany = async company => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewCompany`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(company)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's info by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const companyInfo = {\r\n        name: data.nazva,\r\n        logo: data.logo,\r\n        phone: data.phone,\r\n        email: data.email,\r\n        skype: data.skype,\r\n        about: data.about,\r\n        map: data.map,\r\n        calendarEvents: data.calendar,\r\n        sendDetails: data.otpravka,\r\n        termsOfCooperation: data.uslovia,\r\n        interviewDetails: data.interview_detail,\r\n        contacts: data.contacts,\r\n        managers: data.manager\r\n      };\r\n\r\n      return companyInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's candidates by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyCandidates = (id, page) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches company's comments from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanyComments = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's vacancies\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const vacanciesData = {\r\n        vacancies: data.vacancies,\r\n        vacanciesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        candidateStatus: data.candidateStatus,\r\n        vacancyStatus: data.vacancyStatus,\r\n        platform: data.platforms,\r\n        seniority: data.seniorities\r\n      };\r\n\r\n      return vacanciesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches, filters and sorts company's candidates\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} page current page\r\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(filterAndSort)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidatesData = {\r\n        candidates: data.candidates,\r\n        candidatesCount: data.Count,\r\n        totalPages: data.totalPages,\r\n        perPage: data.perPage,\r\n        currentPage: data.currentPage,\r\n        platform: data.platforms,\r\n        candidateStatus: data.statuses\r\n      };\r\n\r\n      return candidatesData;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Changes vacancy status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateVacancyStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Changes candidate status\r\n *\r\n * @param {*} content\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCandidateStatus = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches company's settings by id from an api\r\n *\r\n * @param {Number} id company id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCompanySettings = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Uploads company's logo (image) to the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} file image to upload\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const uploadCompanyLogo = async (id, file) => {\r\n  const token = getToken();\r\n  const obj = {\r\n    logo: file\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company's settings on the server\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} companyInfo {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfo = async (id, companyInfo) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(companyInfo)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Posts user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} comment contains key 'comment' with text (comment) value\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addUserComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Edit companies comment\r\n *\r\n * @param {Number} id comment id\r\n * @param {String} comment comment\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes user's comment\r\n *\r\n * @param {Number} id company id\r\n * @param {Number} commentId comment id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteUserComment = async (id, commentId) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentId)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches contact info from an api\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getContactInfo = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const contactState = {\r\n        contact: {\r\n          id: data.id,\r\n          name: data.name,\r\n          email: data.email,\r\n          phone: data.phone,\r\n          skype: data.skype,\r\n          selectedPlatforms: data.platforms.map(platform => {\r\n            const arrOfPlatforms = Object.values(platform.platform);\r\n\r\n            const selectedPlatforms = {\r\n              id: arrOfPlatforms[0],\r\n              label: arrOfPlatforms[1],\r\n              value: arrOfPlatforms[1].toLowerCase()\r\n            };\r\n\r\n            return selectedPlatforms;\r\n          })\r\n        },\r\n        isChecked: data.all_platforms === 1 ? true : false,\r\n        isDisabled: data.all_platforms === 1 ? true : false\r\n      };\r\n\r\n      return contactState;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Adds contact into company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates contact in company profile\r\n *\r\n * @param {Number} id contact id\r\n * @param {Object} contact {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCompanyContact = async (id, contact) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(contact)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes contact from company profile\r\n *\r\n * @param {Number} id contact id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCompanyContact = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates company info in company profile\r\n *\r\n * @param {Number} id company id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCompanyInfoProfile = (id, content) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editInformations/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(content)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      for (const key in data) {\r\n        if (key === \"otpravka\") {\r\n          const sendDetails = {\r\n            sendDetails: data[key]\r\n          };\r\n          return sendDetails;\r\n        } else if (key === \"interview_detail\") {\r\n          const interviewDetails = {\r\n            interviewDetails: data[key]\r\n          };\r\n          return interviewDetails;\r\n        } else if (key === \"about\") {\r\n          const about = {\r\n            about: data[key]\r\n          };\r\n          return about;\r\n        } else {\r\n          return data;\r\n        }\r\n      }\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n\r\n/**\r\n * Fetches candidate's profile from an api by id\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCandidateProfile = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/viewOneCandidate/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidate = data[0];\r\n      const statuses =\r\n        data.statusesCandidate !== null && data.statusesCandidate;\r\n\r\n      const candidateStatuses = statuses.map(candidateStatus => ({\r\n        id: candidateStatus.id,\r\n        platform: candidateStatus.platform,\r\n        seniority: candidateStatus.seniority,\r\n        vacancy: candidateStatus.vacancy,\r\n        company: candidateStatus.company,\r\n        dateUpdate: candidateStatus.date_last_change,\r\n        vacancyStatus: candidateStatus.status_vac,\r\n        details: candidateStatus.rej_text\r\n      }));\r\n\r\n      const selectCandidateStatus = data.select.candidateStatus;\r\n\r\n      const candidateInfo = {\r\n        candidate: {\r\n          id: candidate.id,\r\n          avatar: candidate.avatar,\r\n          name: candidate.name,\r\n          date: candidate.date,\r\n          platform: candidate.platforms,\r\n          seniority_id: candidate.seniority_id,\r\n          salary: candidate.salary,\r\n          language: candidate.language,\r\n          phone: candidate.mobile,\r\n          email: candidate.email,\r\n          skype: candidate.skype,\r\n          linkedIn: candidate.linkedin,\r\n          resume: candidate.link,\r\n          comment: candidate.comments,\r\n          about: candidate.text_rezume\r\n        },\r\n        candidateStatuses,\r\n        selectCandidateStatus\r\n      };\r\n\r\n      return candidateInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Fetches candidates comments from an api\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getCandidateComments = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/commentsCandidate/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`Error while fetching: ${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Posts Candidates comment\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} comment contains key 'comment' with text (comment) value\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const addCandidateComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForCandidate/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Edit candidates comment\r\n *\r\n * @param {Number} id comment id\r\n * @param {String} comment comment\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const editCandidateComment = async (id, comment) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/editCommentCandidate/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(comment)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes candidates comment\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Number} commentId comment id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCandidateComment = async (id, commentId) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCommentCandidate/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentId)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Uploads candidate's avatar (image) to the server\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} file image to upload\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const uploadCandidateAvatar = async (id, file) => {\r\n  const token = getToken();\r\n  const obj = {\r\n    avatar: file\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${URL}/main/addAvatarCandidate/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Creates new candidate object\r\n *\r\n * @param {Object} candidate candidate to create\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const createNewCandidate = async candidate => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addNewCandidate`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(candidate)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates candidate's profile by id\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} candidate candidate to update\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const updateCandidateProfile = (id, candidate) => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/main/editCandidate/${id}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(candidate)\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const candidate = data[0];\r\n\r\n      const candidateInfo = {\r\n        id: candidate.id,\r\n        name: candidate.name,\r\n        date: candidate.date,\r\n        platform: candidate.platforms,\r\n        seniority_id: candidate.seniority_id,\r\n        salary: candidate.salary,\r\n        language: candidate.language,\r\n        phone: candidate.mobile,\r\n        email: candidate.email,\r\n        skype: candidate.skype,\r\n        linkedIn: candidate.linkedin,\r\n        resume: candidate.link,\r\n        comment: candidate.comments,\r\n        about: candidate.text_rezume\r\n      };\r\n\r\n      return candidateInfo;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Removes candidate by id\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const deleteCandidateProfile = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/deleteCandidate/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Receives data from an api for Candidate's send resume form\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getDataForSendResumeForm = id => {\r\n  const token = getToken();\r\n  return fetch(`${URL}/interview/viewInformationForSendCV/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      throw new Error(`${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const objCompanies = data.companies;\r\n      const companies = Object.keys(objCompanies).map(key => objCompanies[key]);\r\n      const emailTemplate = data.emailTemplay.text;\r\n      const emailSubject = data.subject;\r\n\r\n      const dataForSendResume = {\r\n        companies,\r\n        emailTemplate,\r\n        emailSubject\r\n      };\r\n\r\n      return dataForSendResume;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n\r\n/**\r\n * Sends candidate's resume to the company\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const sendCandidateResume = async (id, content) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/interview/sendCV/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches data for Appoint interview form by candidate id\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getDataForAppointInterviewForm = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(\r\n      `${URL}/interview/inviteOnInterviewView/${id}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      console.log(\"response: \", response);\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Sets day and time of an interview and sends corresponding letters to the company's contacts and candidate\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} content {}\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const appointInterviewForCandidate = async (id, content) => {\r\n  const token = getToken();\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `${URL}/interview/inviteOnInterviewSend/${id}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(content)\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Cancel candidate getting from freelancer in admin/manager/recruiter/ candidates' panel\r\n *\r\n * @param {Number} id candidate id\r\n * @param {Object} content { company id, vacancy id, freelacer id, comment }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const cancelCandidateFromFreelancer = async (id, content) => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/cancelCandFreelancer/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Saves comment to candidate in Candidate's expandable table\r\n *\r\n * @param {Object} content { candidate id, company id, comment }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const saveCommentToCandidate = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/addCommentForVac`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Saves comment and date_follow_up to candidate in Candidate's expandable table\r\n *\r\n * @param {Object} content { candidate id, company id, comment }\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const saveFollowUp = async content => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/main/saveFollowUp`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(content)\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches candidate's logs from an api\r\n *\r\n * @param {Number} id candidate id\r\n * @returns {Object} Promise object represents operation result\r\n */\r\nexport const getCadidateLogs = async id => {\r\n  const token = getToken();\r\n  try {\r\n    const response = await fetch(`${URL}/admin/returnLogsForCand/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error(`${response.statusText}`);\r\n  } catch (error) {\r\n    return console.log(\"error in fetch: \", error);\r\n  }\r\n};\r\n","import React, { Component, createContext } from \"react\";\r\n\r\nexport const LocalizationContext = createContext({\r\n  currentColumn: \"\",\r\n  locales: [],\r\n  sort: null,\r\n  top: true,\r\n  bottom: false,\r\n  changeLocale: () => null\r\n});\r\n\r\nexport default class Localization extends Component {\r\n  static Consumer = LocalizationContext.Consumer;\r\n\r\n  state = {\r\n    currentColumn: \"\",\r\n    locales: this.props.locales,\r\n    sort: null,\r\n    top: true,\r\n    bottom: false\r\n  };\r\n\r\n  changeLocale = locale => {\r\n    const { onSort } = this.props;\r\n\r\n    if (this.state.currentColumn !== locale) {\r\n      this.setState(\r\n        {\r\n          currentColumn: locale,\r\n          sort: 0,\r\n          top: false,\r\n          bottom: true\r\n        },\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    } else {\r\n      const reversedSort = this.state.sort === 0 ? 1 : 0;\r\n\r\n      this.setState(\r\n        state => ({\r\n          currentColumn: locale,\r\n          sort: reversedSort,\r\n          top: !state.top,\r\n          bottom: !state.bottom\r\n        }),\r\n        () => {\r\n          const { currentColumn, sort } = this.state;\r\n\r\n          const sorted = {\r\n            currentColumn,\r\n            sort\r\n          };\r\n\r\n          onSort(sorted);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LocalizationContext.Provider\r\n        value={{ ...this.state, changeLocale: this.changeLocale }}\r\n      >\r\n        {this.props.children}\r\n      </LocalizationContext.Provider>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n// Context\r\nimport { LocalizationContext } from \"../providers/Localization\";\r\n\r\nexport class LocaleSelector extends Component {\r\n  static contextType = LocalizationContext;\r\n\r\n  render() {\r\n    const { currentColumn, locales, top, bottom, changeLocale } = this.context;\r\n\r\n    const topBottomArrow = classnames({\r\n      \"cui-arrow-top\": top,\r\n      \"cui-arrow-bottom\": bottom,\r\n      icons: true,\r\n      \"font-xs\": true\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {locales.map(locale => (\r\n          <th scope=\"col\" key={locale}>\r\n            <Button\r\n              style={{\r\n                minWidth: \"80px\",\r\n                padding: 0,\r\n                fontWeight: \"bold\",\r\n                textAlign: \"start\",\r\n                background: \"transparent\",\r\n                border: 0\r\n              }}\r\n              onClick={() => changeLocale(locale)}\r\n            >\r\n              {/* className={getBtnClass(locale, currentLocale)} */}\r\n              {locale}{\" \"}\r\n              <i className={currentColumn === locale ? topBottomArrow : \"\"} />\r\n            </Button>\r\n          </th>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocaleSelector;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Nav, NavItem, NavLink, Row, TabContent } from \"reactstrap\";\r\n\r\nexport default class Tabs extends Component {\r\n  static propTypes = {\r\n    tabs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    vacanciesCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    candidatesCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    commentsCount: PropTypes.number,\r\n    children: PropTypes.node,\r\n    activeTabId: PropTypes.string,\r\n    activeTabToggle: PropTypes.func\r\n  };\r\n\r\n  static defaultProps = {\r\n    vacanciesCount: null,\r\n    candidatesCount: null,\r\n    commentsCount: null,\r\n    children: [],\r\n    activeTabId: '1',\r\n    activeTabToggle: null\r\n  };\r\n\r\n    state = {\r\n      activeTabId: this.props.activeTabId\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if(prevProps.activeTabId !== this.props.activeTabId){\r\n        this.setState({\r\n          activeTabId: this.props.activeTabId\r\n        })\r\n      }\r\n    }\r\n\r\n  activeTabToggle = (tab) => {\r\n      const { activeTabToggle } = this.props;\r\n      if(activeTabToggle) return activeTabToggle(tab)\r\n      this.setState({\r\n        activeTabId: tab\r\n      })\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      vacanciesCount,\r\n      candidatesCount,\r\n      commentsCount,\r\n      interviewsCount,\r\n      reviewsCount,\r\n      testsCount,\r\n      offersCount,\r\n      tabs\r\n    } = this.props;\r\n\r\n    const { activeTabId } = this.state;\r\n\r\n    const renderTabName = tabName => {\r\n      switch (tabName) {\r\n        case \"Vacancies\":\r\n          return `${tabName} ${vacanciesCount ? vacanciesCount : \"\"}`;\r\n        case \"Candidates\":\r\n          return `${tabName} ${candidatesCount ? candidatesCount : \"\"}`;\r\n        case \"Comments\":\r\n          return `${tabName} ${commentsCount ? commentsCount : \"\"}`;\r\n        case \"Interviews\":\r\n          return `${tabName} ${interviewsCount ? interviewsCount : \"\"}`;\r\n        case \"Reviews\":\r\n          return `${tabName} ${reviewsCount ? reviewsCount : \"\"}`;\r\n        case \"Tests\":\r\n          return `${tabName} ${testsCount ? testsCount : \"\"}`;\r\n        case \"Offers\":\r\n          return `${tabName} ${offersCount ? offersCount : \"\"}`;\r\n        default:\r\n          return tabName;\r\n      }\r\n    };\r\n\r\n    const tabsJSX = tabs.map(tab => (\r\n      <NavItem key={tab.id}>\r\n        <NavLink\r\n          active={activeTabId === tab.id}\r\n          name={tab.name}\r\n          onClick={() => this.activeTabToggle(tab.id)}\r\n        >\r\n          {renderTabName(tab.name)}\r\n        </NavLink>\r\n      </NavItem>\r\n    ));\r\n\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" md=\"12\" className=\"mb-4\">\r\n            <Nav tabs>{tabsJSX}</Nav>\r\n            <TabContent activeTab={activeTabId}>\r\n              {this.props.children}\r\n            </TabContent>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// Components\r\nimport { Button, Col, Input, Form, FormGroup, Alert } from \"reactstrap\";\r\n\r\nexport default class CandidatesCommentForm extends Component {\r\n  static propTypes = {\r\n    onSave: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    comment: this.props.value,\r\n    dataSaved: false\r\n  };\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    this.setState({ comment: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { comment } = this.state;\r\n    const { candId, compId, onSave } = this.props;\r\n\r\n    const content = {\r\n      candidate_id: candId,\r\n      company_id: compId,\r\n      comment\r\n    };\r\n\r\n    onSave(content);\r\n    this.setState({ dataSaved: true});\r\n  };\r\n\r\n  render() {\r\n    const { comment, dataSaved } = this.state;\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormGroup row>\r\n          <Col xs={6} sm={6} md={8} lg={8}>\r\n            <Input\r\n              type=\"textarea\"\r\n              name=\"comment\"\r\n              value={comment || ''}\r\n              placeholder=\"Type a comment\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs={6} sm={6} md={4} lg={4}>\r\n          <Alert color=\"success\" isOpen={dataSaved}>\r\n                  Data saved\r\n                </Alert>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </FormGroup>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Form, FormGroup, Input, Row } from \"reactstrap\";\r\n// Components\r\nimport Select from \"../shared/Select\";\r\n\r\nclass CandidatesForm extends Component {\r\n  static propTypes = {\r\n    platforms: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    companies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    statuses: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    seniority: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        value: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    onFilter: PropTypes.func.isRequired,\r\n    activeTabId: PropTypes.string.isRequired,\r\n    onAllFilter: PropTypes.func.isRequired,\r\n    onSentFilter: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    search: \"\",\r\n    dateFrom: \"\",\r\n    dateTo: \"\",\r\n    dateFromAllCandidates: \"\",\r\n    dateToAllCandidates: \"\",\r\n    dateFromSentCandidates: \"\",\r\n    dateToSentCandidates: \"\",\r\n    dateFromFreelancersCandidates: \"\",\r\n    dateToFreelancersCandidates: \"\",\r\n    dateFollowUpFrom: \"\",\r\n    dateFollowUpTo: \"\",\r\n    selectPlatforms: [],\r\n    selectCompanies: [],\r\n    selectStatuses: [],\r\n    selectSeniority: []\r\n  };\r\n\r\n  handleInputChange = ({ target: { name, value } }) => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState({ [name]: value }, () => onFilter(this.state));\r\n  };\r\n\r\n  handleAllInputChange = ({ target: { name, value } }) => {\r\n    const { onAllFilter } = this.props;\r\n    console.log('>>>>>>>>>name', [name]);\r\n    console.log('>>>>>>>>>value', value);\r\n\r\n    if([name] == 'dateFromAllCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateFrom: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateToAllCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateTo: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateFollowUpFrom'){\r\n      this.setState({ [name]: value }, () => onAllFilter(this.state));\r\n    }else if([name] == 'dateFollowUpTo'){\r\n      this.setState({ [name]: value }, () => onAllFilter(this.state));\r\n    }\r\n    \r\n  };\r\n\r\n  \r\n\r\n  handleSentInputChange = ({ target: { name, value } }) => {\r\n    const { onSentFilter } = this.props;\r\n\r\n    if([name] == 'dateFromSentCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateFrom: value }, () => onSentFilter(this.state));\r\n    }else if([name] == 'dateToSentCandidates'){\r\n      this.setState({ [name]: value });\r\n      this.setState({ dateTo: value }, () => onSentFilter(this.state));\r\n    }\r\n\r\n    // this.setState({ [name]: value }, () => onSentFilter(this.state));\r\n  };\r\n\r\n  handlePlatformChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectPlatforms: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleCompanyChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectCompanies: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleStatusChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectStatuses: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  handleSeniorityChange = value => {\r\n    const { onFilter } = this.props;\r\n\r\n    this.setState(\r\n      {\r\n        selectSeniority: value\r\n      },\r\n      () => onFilter(this.state)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      search,\r\n      dateFrom,\r\n      dateTo,\r\n      dateFromAllCandidates,\r\n      dateToAllCandidates,\r\n      dateFromSentCandidates,\r\n      dateToSentCandidates,\r\n      dateFromFreelancersCandidates,\r\n      dateToFreelancersCandidates,\r\n      dateFollowUpFrom,\r\n      dateFollowUpTo,\r\n      selectPlatforms,\r\n      selectSeniority,\r\n      selectCompanies,\r\n      selectStatuses,\r\n    } = this.state;\r\n    const { platforms, companies, statuses, seniority, activeTabId, userRole } = this.props;\r\n\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col lg={12}>\r\n            <FormGroup className=\"search-wrap\">\r\n              <Input\r\n                id=\"search\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                value={search}\r\n                placeholder=\"Search\"\r\n                onChange={this.handleInputChange}\r\n                autoComplete=\"off\"\r\n              />\r\n              <i\r\n                className=\"fa fa-search\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0.6rem\",\r\n                  right: \"1.75rem\",\r\n                  color: \"var(--gray)\"\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        {userRole !== 4 ? (\r\n          <Row>\r\n            \r\n            { activeTabId === \"1\" ? (\r\n              <>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFromAllCandidates} className=\"date-filter-label\">Date From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFromAllCandidates\"\r\n                      value={dateFromAllCandidates}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateToAllCandidates} className=\"date-filter-label\">Date To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateToAllCandidates\"\r\n                      value={dateToAllCandidates}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFrom} className=\"date-filter-label\">Date FollowUp From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFollowUpFrom\"\r\n                      value={dateFollowUpFrom}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateTo} className=\"date-filter-label\">Date FollowUp To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateFollowUpTo\"\r\n                      value={dateFollowUpTo}\r\n                      onChange={this.handleAllInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectPlatforms}\r\n                      options={platforms}\r\n                      placeholder=\"Platforms\"\r\n                      onChange={this.handlePlatformChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectSeniority}\r\n                      options={seniority}\r\n                      placeholder=\"Seniority\"\r\n                      onChange={this.handleSeniorityChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </> )\r\n              : \r\n              activeTabId === \"2\" ? (\r\n                <>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup>\r\n                      <label htmlFor={dateFromSentCandidates} className=\"date-filter-label\">Date From</label>\r\n                      <Input\r\n                        id=\"date-from\"\r\n                        type=\"date\"\r\n                        name=\"dateFromSentCandidates\"\r\n                        value={dateFromSentCandidates}\r\n                        onChange={this.handleSentInputChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup>\r\n                      <label htmlFor={dateToSentCandidates} className=\"date-filter-label\">Date To</label>\r\n                      <Input\r\n                        id=\"date-to\"\r\n                        type=\"date\"\r\n                        name=\"dateToSentCandidates\"\r\n                        value={dateToSentCandidates}\r\n                        onChange={this.handleSentInputChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={3} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectPlatforms}\r\n                        options={platforms}\r\n                        placeholder=\"Platforms\"\r\n                        onChange={this.handlePlatformChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={3} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectCompanies}\r\n                        options={companies}\r\n                        placeholder=\"Companies\"\r\n                        onChange={this.handleCompanyChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg={2} md={12}>\r\n                    <FormGroup className=\"filter-select\">\r\n                      <Select\r\n                        isMulti\r\n                        value={selectStatuses}\r\n                        options={statuses}\r\n                        placeholder=\"Statuses\"\r\n                        onChange={this.handleStatusChange}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n              </>) :\r\n              (<>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateFromFreelancersCandidates} className=\"date-filter-label\">Date From</label>\r\n                    <Input\r\n                      id=\"date-from\"\r\n                      type=\"date\"\r\n                      name=\"dateFromFreelancersCandidates\"\r\n                      value={dateFromFreelancersCandidates}\r\n                      // onChange={this.handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup>\r\n                    <label htmlFor={dateToFreelancersCandidates} className=\"date-filter-label\">Date To</label>\r\n                    <Input\r\n                      id=\"date-to\"\r\n                      type=\"date\"\r\n                      name=\"dateToFreelancersCandidates\"\r\n                      value={dateToFreelancersCandidates}\r\n                      // onChange={this.handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={3} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectPlatforms}\r\n                      options={platforms}\r\n                      placeholder=\"Platforms\"\r\n                      onChange={this.handlePlatformChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={3} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectCompanies}\r\n                      options={companies}\r\n                      placeholder=\"Companies\"\r\n                      onChange={this.handleCompanyChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg={2} md={12}>\r\n                  <FormGroup className=\"filter-select\">\r\n                    <Select\r\n                      isMulti\r\n                      value={selectStatuses}\r\n                      options={statuses}\r\n                      placeholder=\"Statuses\"\r\n                      onChange={this.handleStatusChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </>\r\n            )}\r\n          </Row>\r\n        ) : null}\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CandidatesForm;\r\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { Badge } from \"reactstrap\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\n\nconst CandidateTableRow = ({\n  id,\n  date,\n  name,\n  platform,\n  salary,\n  email,\n  mobile,\n  linkedin,\n  skype,\n  companies,\n  recruiter,\n  isOpen,\n  open,\n  close,\n  status\n}) => {\n  const getBadge = status => {\n    return status === \"OFFER\" || status === \"Hired\"\n      ? \"success\"\n      : status === \"Hold\"\n      ? \"secondary\"\n      : status === \"Interview\"\n      ? \"warning\"\n      : status === \"Rejected\" || status === \"Refused\"\n      ? \"danger\"\n      : status === \"Review\"\n      ? \"primary\"\n      : null;\n  };\n\n  const contactCopied = e => {\n    e.target.style.color = \"var(--green)\"\n  };\n\n  let mobileValue = mobile;\n  let emailValue = email;\n  let linkedinValue = linkedin;\n  let skypeValue = skype;\n\n  if(mobile === \"\" || null){\n    mobileValue = null\n  }\n\n  if(email === \"\" || null){\n    emailValue = null\n  }\n\n  if(linkedin === \"\" || null){\n    linkedinValue = null\n  }\n\n  if(skype === \"\" || null){\n    skypeValue = null\n  }\n\n  if (status !== \"\" || null) {\n    let explode = status.split(';');\n    status = JSON.parse(explode[explode.length - 1]);\n  }\n\n  return (\n    <>\n      <td>\n        {isOpen ? (\n          <i\n            className=\"icon-close icons font-xl\"\n            style={{ color: \"var(--red)\", cursor: \"pointer\" }}\n            onClick={close}\n          />\n        ) : (\n          <i\n            className=\"icon-plus icons font-xl\"\n            style={{ color: \"var(--green)\", cursor: \"pointer\" }}\n            onClick={open}\n          />\n        )}\n      </td>\n      <td>{moment(date).format(\"DD.MM.YY\")}</td>\n      <td>{platform}</td>\n      <td>\n        <Link to={`/candidates/${id}`} target=\"_blank\">{name}</Link>\n      </td>\n      <td>{salary}</td>\n      <td>\n        <div className=\"contacts-col-icons-wrap\">\n          {\n            mobileValue !== null ?\n              <CopyToClipboard text={mobileValue}>\n                <i className=\"icon-phone icons font-xl contact-icon\"\n                   style={{color: \"var(--black)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n          {\n            emailValue !== null ?\n              <CopyToClipboard text={emailValue}>\n                <i className=\"icon-envelope icons font-xl contact-icon\"\n                   style={{color: \"var(--black)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n          {\n            linkedinValue !== null ?\n              <a href={linkedinValue} target=\"_blank\">\n                <i className=\"icon-social-linkedin icons font-xl contact-icon\"\n                   style={{color: \"var(--blue)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </a>\n              : null\n          }\n          {\n            skypeValue !== null ?\n              <CopyToClipboard text={skypeValue}>\n                <i className=\"icon-social-skype icons font-xl contact-icon\"\n                   style={{color: \"var(--blue)\", cursor: \"pointer\"}}\n                   onClick={contactCopied}\n                />\n              </CopyToClipboard>\n              : null\n          }\n        </div>\n      </td>\n      <td>{status[\"vacStat\"]}</td>\n      <td>\n        {companies &&\n          companies.split(\";\").map((company, idx) => {\n            const parsedCompany = JSON.parse(company);\n            return (\n              <Link\n                to={`/companies/${parsedCompany.id}`}\n                key={`${idx}-${id}-${parsedCompany.id}`}\n              >\n                <Badge color={getBadge(parsedCompany.vacStat)}>\n                  {parsedCompany.name}\n                </Badge>\n              </Link>\n            );\n          })}\n      </td>\n      <td>{recruiter}</td>\n    </>\n  );\n};\n\nCandidateTableRow.propTypes = {\n  id: PropTypes.number.isRequired,\n  date: PropTypes.string,\n  name: PropTypes.string,\n  platform: PropTypes.string,\n  salary: PropTypes.string,\n  mobile: PropTypes.string,\n  email: PropTypes.string,\n  linkedin: PropTypes.string,\n  skype: PropTypes.string,\n  companies: PropTypes.string,\n  recruiter: PropTypes.string,\n  open: PropTypes.func,\n  close: PropTypes.func,\n  isOpen: PropTypes.bool.isRequired\n};\n\nCandidateTableRow.defaultProps = {\n  date: \"\",\n  name: \"\",\n  platform: \"\",\n  salary: \"\",\n  mobile: \"\",\n  email: \"\",\n  linkedin: \"\",\n  skype: \"\",\n  companies: \"\",\n  recruiter: \"\",\n  open: () => null,\n  close: () => null\n};\n\nexport default CandidateTableRow;\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge } from \"reactstrap\";\r\n// Components\r\nimport CandidatesCommentForm from \"./CommentSentForm\";\r\nimport Select from \"../shared/Select\";\r\n// Instruments\r\nimport { updateCandidateStatus } from \"../../utils/api/company\";\r\nimport { saveCommentToCandidate } from \"../../utils/api/candidate\";\r\n\r\nconst CandidateExpandableTableRow = ({\r\n  userRole,\r\n  candId,\r\n  candidateStatus,\r\n  statuses\r\n}) => {\r\n  const getBadge = status => {\r\n    return status === \"OFFER\" || status === \"Hired\"\r\n      ? \"success\"\r\n      : status === \"Hold\"\r\n      ? \"secondary\"\r\n      : status === \"Interview\"\r\n      ? \"warning\"\r\n      : status === \"Rejected\" || status === \"Refused\"\r\n      ? \"danger\"\r\n      : status === \"Review\"\r\n      ? \"primary\"\r\n      : null;\r\n  };\r\n\r\n  const parsedStatus = JSON.parse(candidateStatus);\r\n  const { date, compId, compName, vacStat, commentVac } = parsedStatus;\r\n  const comment = commentVac ? commentVac : \"\";\r\n\r\n  return (\r\n    <>\r\n      {date !== null || compId !== null ? (\r\n        <>\r\n          <td>{date ? moment(date).format(\"DD.MM.YY\") : \"\"}</td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <Link to={`/companies/${compId}`}>{compName}</Link>\r\n            ) : (\r\n              compName\r\n            )}\r\n          </td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <Select\r\n                defaultValue={statuses.find(status => status.label === vacStat)}\r\n                options={statuses}\r\n                onChange={value => {\r\n                  const content = {\r\n                    id: candId,\r\n                    company_id: compId,\r\n                    value\r\n                  };\r\n\r\n                  updateCandidateStatus(content);\r\n                }}\r\n              />\r\n            ) : (\r\n              <Badge color={getBadge(vacStat)}>{vacStat}</Badge>\r\n            )}\r\n          </td>\r\n          <td>\r\n            {userRole !== 4 ? (\r\n              <CandidatesCommentForm\r\n                value={comment}\r\n                candId={candId}\r\n                compId={compId}\r\n                onSave={saveCommentToCandidate}\r\n              />\r\n            ) : (\r\n              comment\r\n            )}\r\n          </td>\r\n        </>\r\n      ) : (\r\n        <td colSpan=\"9\" align=\"middle\" valign=\"middle\">\r\n          There are no previous statuses on the candidate.{\" \"}\r\n          <span role=\"img\" aria-label=\"confused face\">\r\n            😕\r\n          </span>\r\n        </td>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nCandidateExpandableTableRow.propTypes = {\r\n  userRole: PropTypes.number.isRequired,\r\n  candId: PropTypes.number.isRequired,\r\n  candidateStatus: PropTypes.string.isRequired,\r\n  statuses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired\r\n};\r\n\r\nexport default CandidateExpandableTableRow;\r\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row, Table } from \"reactstrap\";\n// Components\nimport CandidateTableRow from \"./SentTableRow\";\nimport CandidateExpandableTableRow from \"./ExpandableSentTableRow\";\nimport LocaleSelector from \"../LocaleSelector\";\nimport PaginationBackend from \"../shared/PaginationBackend\";\n// HOC\nimport OpenClose from \"../../render_prop/OpenClose\";\n\nconst loadingStyle = {\n  background: \"var(--white)\",\n  pointerEvents: \"none\",\n  opacity: 0.4\n}\n\nconst tableStyle = {\n  background: \"var(--white)\",\n};\n\nconst SentCandidatesTable = ({\n  userRole,\n  candidates,\n  statuses,\n  pageSize,\n  totalItems,\n  totalPages,\n  currentPage,\n  onChangePage,\n  onSort,\n  loading\n}) => {\n  const candidatesJSX =\n    candidates.length > 0 ? (\n      candidates.map((candidate, idx) => (\n        <OpenClose\n          key={candidate.id}\n          render={(isOpen, open, close) =>\n            isOpen ? (\n              <>\n                <tr key={candidate.id}>\n                  <CandidateTableRow\n                    idx={idx}\n                    isOpen={isOpen}\n                    close={close}\n                    {...candidate}\n                  />\n                </tr>\n                {candidate.status &&\n                  candidate.status.split(\";\").map(status => (\n                    <tr key={candidate.id}>\n                      <td colSpan=\"8\">\n                        <Table style={{ background: \"var(--white)\" }} size=\"sm\">\n                          <thead>\n                            <tr>\n                              <th>Date</th>\n                              <th>Company</th>\n                              <th>Status</th>\n                              <th>Comment</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <CandidateExpandableTableRow\n                                userRole={userRole}\n                                candId={candidate.id}\n                                candidateStatus={status}\n                                statuses={statuses}\n                              />\n                            </tr>\n                          </tbody>\n                        </Table>\n                      </td>\n                    </tr>\n                  ))}\n              </>\n            ) : (\n              <tr key={candidate.id}>\n                <CandidateTableRow\n                  idx={idx}\n                  {...candidate}\n                  isOpen={isOpen}\n                  open={open}\n                />\n              </tr>\n            )\n          }\n        />\n      ))\n    ) : (\n      <tr style={{ color: \"var(--secondary)\" }}>\n        <td colSpan={9} align=\"center\">\n          Nothing found{\" \"}\n          <span role=\"img\" aria-label=\"confused face\">\n            😕\n          </span>\n        </td>\n      </tr>\n    );\n\n  return (\n    <>\n      <Table style={loading ? loadingStyle : tableStyle} responsive>\n        <thead>\n          <tr>\n            <th>+/-</th>\n            <LocaleSelector onSort={onSort} />\n          </tr>\n        </thead>\n        <tbody>{candidatesJSX}</tbody>\n      </Table>\n      {candidates.length > 0 ? (\n        <Row>\n          <Col>\n            <PaginationBackend\n              items={candidates}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              totalPages={totalPages}\n              initialPage={currentPage}\n              onChangePage={onChangePage}\n              loading={loading}\n            />\n          </Col>\n        </Row>\n      ) : null}\n    </>\n  );\n};\n\nSentCandidatesTable.propTypes = {\n  userRole: PropTypes.number.isRequired,\n  candidates: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      date: PropTypes.string,\n      name: PropTypes.string,\n      email: PropTypes.string,\n      platform: PropTypes.string,\n      salary: PropTypes.string,\n      companies: PropTypes.string,\n      recruiter: PropTypes.string,\n      status: PropTypes.string\n    })\n  ),\n  statuses: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  currentPage: PropTypes.number,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number,\n  totalPages: PropTypes.number,\n  onChangePage: PropTypes.func,\n  onSort: PropTypes.func,\n  loading: PropTypes.bool\n};\n\nSentCandidatesTable.defaultProps = {\n  candidates: [],\n  currentPage: null,\n  pageSize: null,\n  totalItems: null,\n  totalPages: null,\n  onChangePage: () => null,\n  onSort: () => null\n};\n\nexport default SentCandidatesTable;\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Button, Col, Row } from \"reactstrap\";\r\n\r\nconst withToggle = WrappedComponent =>\r\n  class withToggle extends Component {\r\n    state = {\r\n      show: false\r\n    };\r\n\r\n    toggle = () => {\r\n      this.setState(prevState => ({\r\n        show: !prevState.show\r\n      }));\r\n    };\r\n\r\n    render() {\r\n      const { show } = this.state;\r\n      const { text, color } = this.props;\r\n      const colorBtn = show ? \"danger\" : color;\r\n      return (\r\n        <>\r\n          <Row\r\n            style={{\r\n              marginBottom: \"1rem\"\r\n            }}\r\n          >\r\n            <Col>\r\n              <Button color={colorBtn} onClick={this.toggle}>\r\n                {text.toUpperCase()}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          {show && <WrappedComponent {...this.props} />}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default withToggle;\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, ButtonGroup, Card, CardBody, CardHeader } from \"reactstrap\";\r\n// HOC\r\nimport withToggle from \"../hoc/withToggle\";\r\n\r\nconst Links = ({ links }) => {\r\n  const listOfLinks = links.map(link => (\r\n    <Button tag=\"a\" key={link.id} href={link.link} color=\"link\" target=\"_blank\">\r\n      {link.title}\r\n    </Button>\r\n  ));\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>Links</CardHeader>\r\n      <CardBody>\r\n        <ButtonGroup\r\n          style={{ display: \"flex\", flexWrap: \"wrap\", marginBottom: \"1rem\" }}\r\n        >\r\n          {listOfLinks}\r\n        </ButtonGroup>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nLinks.propTypes = {\r\n  links: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string,\r\n      link: PropTypes.string\r\n    })\r\n  )\r\n};\r\n\r\nLinks.defaultProps = {\r\n  links: []\r\n};\r\n\r\nexport default withToggle(Links);\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nconst ListCandidatesInterview = ({ candidates }) => {\r\n  const candidatesList =\r\n    candidates.length > 0 ? (\r\n      candidates.map((item, idx) => (\r\n        <ListGroupItem key={idx}>{item.interview}</ListGroupItem>\r\n      ))\r\n    ) : (\r\n      <p style={{ textAlign: \"center\" }}>\r\n        There are no candidates scheduled on the interview today{\" \"}\r\n        <span role=\"img\" aria-label=\"confused face\">\r\n          😕\r\n        </span>\r\n      </p>\r\n    );\r\n\r\n  return <ListGroup>{candidatesList}</ListGroup>;\r\n};\r\n\r\nListCandidatesInterview.propTypes = {\r\n  candidates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      interview: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nListCandidatesInterview.defaultProps = {\r\n  candidates: []\r\n};\r\n\r\nexport default ListCandidatesInterview;\r\n","// Core\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nconst ListCandidates = ({ candidates }) => {\r\n  const candidatesList =\r\n    candidates.length > 0 ? (\r\n      candidates.map(item => (\r\n        <ListGroupItem\r\n          key={item.candId}\r\n          tag=\"a\"\r\n          href={`#/candidates/${item.candId}`}\r\n        >\r\n          {item.Review}\r\n        </ListGroupItem>\r\n      ))\r\n    ) : (\r\n      <p style={{ textAlign: \"center\" }}>\r\n        There are no candidates who match{\" \"}\r\n        <span role=\"img\" aria-label=\"confused face\">\r\n          😕\r\n        </span>\r\n      </p>\r\n    );\r\n\r\n  return <ListGroup>{candidatesList}</ListGroup>;\r\n};\r\n\r\nListCandidates.propTypes = {\r\n  candidates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      candId: PropTypes.number.isRequired,\r\n      Review: PropTypes.string\r\n    })\r\n  )\r\n};\r\n\r\nListCandidates.defaultProps = {\r\n  candidates: []\r\n};\r\n\r\nexport default ListCandidates;\r\n","// Core\r\nimport React, { Component } from \"react\";\r\nimport { Col, Row, TabPane } from \"reactstrap\";\r\n// Components\r\nimport Links from \"./Links\";\r\nimport ListCandidatesInterview from \"./ListCandidatesInterview\";\r\nimport ListCandidates from \"./ListCandidates\";\r\nimport CandidatesForm from \"../Candidates/Form\";\r\nimport SentCandidatesTable from \"../Candidates/SentTable\";\r\nimport Tabs from \"../shared/Tabs/Tabs\";\r\n// Context\r\nimport Localization from \"../../providers/Localization\";\r\n// Instruments\r\nimport {\r\n  getDataForRecruiterDashboard,\r\n  filterAndSortRecruiterCandidates\r\n} from \"../../utils/api\";\r\n\r\nconst tabs = [\r\n  { id: \"1\", name: \"Interviews\" },\r\n  { id: \"2\", name: \"Reviews\" },\r\n  { id: \"3\", name: \"Tests\" },\r\n  { id: \"4\", name: \"Offers\" }\r\n];\r\n\r\nconst localesCandidates = [\r\n  \"Date\",\r\n  \"Platform\",\r\n  \"Name\",\r\n  \"Email\",\r\n  \"Salary\",\r\n  \"Companies\",\r\n  \"Recruiter\"\r\n];\r\n\r\nexport default class DashboardRecruiter extends Component {\r\n  state = {\r\n    dashboardData: {\r\n      links: [],\r\n      listAllCandInterview: [],\r\n      listAllCandOffer: [],\r\n      listAllCandReview: [],\r\n      listAllCandTest: []\r\n    },\r\n    candidatesData: {\r\n      candidates: [],\r\n      candidatesCount: null,\r\n      totalPages: null,\r\n      perPage: null,\r\n      currentPage: 1,\r\n      platforms: [],\r\n      companies: [],\r\n      statuses: [],\r\n      recruiter: []\r\n    },\r\n    filterAndSortCandidates: {\r\n      search: \"\",\r\n      dateFrom: \"\",\r\n      dateTo: \"\",\r\n      selectCompanies: [],\r\n      selectPlatforms: [],\r\n      selectStatuses: []\r\n    },\r\n    dropdownOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { filterAndSortCandidates } = this.state;\r\n    getDataForRecruiterDashboard().then(dashboardData => {\r\n      if (dashboardData) {\r\n        this.setState({\r\n          ...this.state,\r\n          dashboardData\r\n        });\r\n      }\r\n    });\r\n\r\n    filterAndSortRecruiterCandidates(1, filterAndSortCandidates).then(\r\n      candidatesData => {\r\n        if (candidatesData) {\r\n          this.setState({\r\n            ...this.state,\r\n            candidatesData\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  loading = () => (\r\n    <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\r\n  );\r\n\r\n  filterAndSortCandidates = filterAndSort => {\r\n    const { filterAndSortCandidates } = this.state;\r\n\r\n    this.setState(\r\n      {\r\n        filterAndSortCandidates: {\r\n          ...filterAndSortCandidates,\r\n          ...filterAndSort\r\n        }\r\n      },\r\n      () => {\r\n        const {\r\n          candidatesData: { currentPage },\r\n          filterAndSortCandidates\r\n        } = this.state;\r\n\r\n        filterAndSortRecruiterCandidates(\r\n          currentPage,\r\n          filterAndSortCandidates\r\n        ).then(candidatesData => {\r\n          this.setState({\r\n            ...this.state,\r\n            candidatesData\r\n          });\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  onChangePage = currentPage => {\r\n    const { filterAndSortCandidates } = this.state;\r\n\r\n    filterAndSortRecruiterCandidates(currentPage, filterAndSortCandidates).then(\r\n      candidatesData => {\r\n        this.setState({\r\n          ...this.state,\r\n          candidatesData\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state);\r\n    const {\r\n      dashboardData: {\r\n        links,\r\n        listAllCandInterview,\r\n        listAllCandOffer,\r\n        listAllCandReview,\r\n        listAllCandTest\r\n      },\r\n      candidatesData: {\r\n        candidates,\r\n        candidatesCount,\r\n        totalPages,\r\n        perPage,\r\n        currentPage,\r\n        platforms,\r\n        companies,\r\n        statuses\r\n      }\r\n    } = this.state;\r\n    const { role } = this.props.user;\r\n\r\n    const interviewsCount = listAllCandInterview.length;\r\n    const reviewsCount = listAllCandReview.length;\r\n    const testsCount = listAllCandTest.length;\r\n    const offersCount = listAllCandOffer.length;\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n            <Links links={links} text=\"links\" color=\"primary\" />\r\n          </Col>\r\n        </Row>\r\n        <Tabs\r\n          tabs={tabs}\r\n          interviewsCount={interviewsCount}\r\n          reviewsCount={reviewsCount}\r\n          testsCount={testsCount}\r\n          offersCount={offersCount}\r\n        >\r\n          <TabPane tabId=\"1\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidatesInterview candidates={listAllCandInterview} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"2\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandReview} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"3\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandTest} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"4\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"12\" xl=\"12\">\r\n                <ListCandidates candidates={listAllCandOffer} />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n        </Tabs>\r\n        <Row>\r\n          <Col xl={12}>\r\n            <CandidatesForm\r\n              platforms={platforms}\r\n              companies={companies}\r\n              statuses={statuses}\r\n              onFilter={this.filterAndSortCandidates}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Localization\r\n              locales={localesCandidates}\r\n              onSort={this.filterAndSortCandidates}\r\n            >\r\n              {candidates.length > 0 && (\r\n                <SentCandidatesTable\r\n                  userRole={role}\r\n                  candidates={candidates}\r\n                  statuses={statuses}\r\n                  headerColumns={localesCandidates}\r\n                  totalItems={candidatesCount}\r\n                  pageSize={perPage}\r\n                  totalPages={totalPages}\r\n                  currentPage={currentPage}\r\n                  onChangePage={this.onChangePage}\r\n                />\r\n              )}\r\n            </Localization>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}