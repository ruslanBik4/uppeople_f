{"version":3,"sources":["components/Admin/Vacancy dashboard/Canban.js","utils/api/company.js","utils/api/users.js","utils/api/candidates.js","components/Admin/Vacancy dashboard/TableRow.js"],"names":["Kanban","state","recruiters","companies","statuses","selectedRecruiter","selectedCompany","canbanData","lanes","fetchCompanies","a","getCompanies","companies_result","filter","company","vacancies","indexOf","id","setState","fetchCandidatesData","title","label","cards","description","draggable","metadata","sha","console","log","fetchRecruiters","getUsers","users","staff","user","role_id","fetchStatuses","getStatuses","selectedStatuses","loading","className","handleRecruiterSelect","handleCompanySelect","this","prevProps","prevState","style","display","justifyContent","maxWidth","marginBottom","marginTop","fontSize","alignSelf","color","xs","sm","md","lg","xl","value","options","isClearable","getOptionValue","getOptionLabel","name","placeholder","onChange","data","Component","URL","getToken","localStorage","getItem","page","isActive","withRecruiters","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","map","nazva","logo","email","skype","phone","vacancy_count","candidates","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","filterAllCompanies","body","JSON","stringify","createNewCompany","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","Object","values","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","partners","freelancers","freeLancers","getAllCandidates","allCandidates","allCandidatesCount","allTotalPages","Page","allPerPage","currentAllPage","allPlatforms","allStatuses","allRecruiters","recruiter","allSeniority","getSentCandidates","sentCandidates","sentCandidatesCount","sentTotalPages","sentPerPage","currentSentPage","sentPlatforms","sentCompanies","sentStatuses","sentRecruiters","loadingSent","getCandidatesFromFreelancers","candidatesFF","candidatesCountFF","totalPagesFF","perPageFF","statusesFF","currentPageFF","filterAndSortAllCandidates","filterAndSortSentCandidates","getCandidatesAmountByStatuses","selectedVacancy","selectedTag","startDate","endDate","recruiter_id","company_id","vacancy_id","tag_id","start_date","end_date","getCandidatesAmountByTags","getCandidatesAmountByVacancies","TableRow","companyId","recruiterId","vacancyId","vacancy","quantity","recruiterName","conpanyName","find","to","target"],"mappings":"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","file":"static/js/50.cd5ff0a0.chunk.js","sourcesContent":["// Core;\nimport React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport { Col, Row, Table, FormGroup } from \"reactstrap\";\nimport Board from 'react-trello'\n// Components\nimport TableRow from \"./TableRow\";\nimport { getUsers } from \"../../../utils/api/users\";\nimport { getCompanies } from \"../../../utils/api/company\";\nimport {getCandidatesAmountByVacancies, getStatuses} from \"../../../utils/api/candidates\";\n\nexport default class Kanban extends Component {\n  state = {\n    recruiters: [],\n    companies: [],\n    statuses: [],\n\n    selectedRecruiter: null,\n    selectedCompany: null,\n\n    canbanData: {\n      lanes: [\n      ]\n    },\n  };\n\n  componentDidMount() {\n    this.fetchCompanies();\n    this.fetchRecruiters();\n    this.fetchCandidatesData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.selectedRecruiter !== prevState.selectedRecruiter ||\n      this.state.selectedCompany !== prevState.selectedCompany\n    ) {\n      this.fetchCandidatesData();\n    }\n\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter) {\n      this.fetchCompanies();\n    }\n  }\n\n\n  fetchCompanies = async () => {\n    let companies_result = await getCompanies(0, 1, 1);\n    const {selectedRecruiter} = this.state;\n    const companies = companies_result.companies.filter((company) => company.vacancies > 0 &&\n      (selectedRecruiter !== null && company.recruiters.indexOf(selectedRecruiter.id) + 1 > 0 || selectedRecruiter === null));\n    this.setState({companies});\n  };\n\n  fetchCandidatesData = async () => {\n    const { selectedCompany, selectedRecruiter } = this.state;\n\n    // const canbanData = await getCandidatesAmountByVacancies(\n    //   selectedRecruiter ? selectedRecruiter.id : null,\n    //   selectedCompany ? selectedCompany.id : null\n    // );\n    const canbanData = {\n      lanes: [\n        {\n          id: 'lane1',\n          title: 'Planned Tasks',\n          label: '2/2',\n          cards: [\n            {id: 'Card1', title: 'Write Blog', description: 'Can AI make memes', label: '30 mins', draggable: false},\n            {id: 'Card2', title: 'Pay Rent', description: 'Transfer via NEFT', label: '5 mins', metadata: {sha: 'be312a1'}}\n          ]\n        },\n        {\n          id: 'lane2',\n          title: 'Completed',\n          label: '0/0',\n          cards: []\n        }\n      ]\n    };\nconsole.log(canbanData);\n    this.setState({ canbanData });\n  };\n\n  fetchRecruiters = async () => {\n    const users = await getUsers();\n\n    const recruiters = users.staff.filter((user) => user.role_id === 2);\n    this.setState({ recruiters });\n  };\n\n  fetchStatuses = async () => {\n    const statuses = await getStatuses();\n    this.setState({statuses});\n    this.setState({selectedStatuses: statuses});\n  };\n\n\n  loading = () => (\n    <div className='animated fadeIn pt-1 text-center'>Loading...</div>\n  );\n\n  handleRecruiterSelect = (selectedRecruiter) => {\n    this.setState({ selectedRecruiter });\n  };\n\n  handleCompanySelect = (selectedCompany) => {\n    this.setState({ selectedCompany });\n  };\n\n  render() {\n    const {\n      canbanData,\n      recruiters,\n      companies,\n      selectedRecruiter,\n      selectedCompany,\n    } = this.state;\n\n    console.log(canbanData);\n    return (\n      <div className='animated fadeIn'>\n        <Row>\n          <Col\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              maxWidth: 180,\n              marginBottom: \"0.5rem\",\n            }}\n          >\n            <h1 style={{ marginBottom: 0, marginTop: 20, fontSize: 24 }}>\n              Canban\n            </h1>\n            <span\n              style={{\n                alignSelf: \"flex-end\",\n                color: \"var(--gray)\",\n              }}\n            ></span>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{ marginBottom: 15 }}\n                value={selectedRecruiter}\n                options={recruiters}\n                isClearable\n                getOptionValue={(user) => user.id}\n                getOptionLabel={(user) => user.name}\n                placeholder='Recruiters'\n                onChange={this.handleRecruiterSelect}\n              />\n            </FormGroup>\n          </Col>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{ marginBottom: \"1rem\" }}\n                value={selectedCompany}\n                options={companies}\n                isClearable\n                getOptionValue={(company) => company.id}\n                getOptionLabel={(company) => company.name}\n                placeholder='Companies'\n                onChange={this.handleCompanySelect}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' md='12' xl='12'>\n            <Board data={canbanData} />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive, withRecruiters = false) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}/${withRecruiters}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        recruiters: company.recruiters,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit companies comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all users from an api\r\n *\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getUsers = () => {\r\n  const token = getToken();\r\n\r\n  return fetch(`${URL}/admin/all-staff`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const users = {\r\n        staff: data.users,\r\n        partners: data.partners,\r\n        freelancers: data.freeLancers\r\n      };\r\n\r\n      return users;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\n\n\nexport const getAllCandidates = page => {\n  const token = getToken();\n  console.log(':::::getAllCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches sent candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getSentCandidates = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates sent by freelancer\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesFromFreelancers = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewCandidatesFreelancerOnVacancies/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesFromFreelancersData = {\n        candidatesFF: data.candidates,\n        candidatesCountFF: data.Count,\n        totalPagesFF: data.Page,\n        perPageFF: data.perPage,\n        statusesFF: data.statuses,\n        currentPageFF: data.currentPage\n      };\n\n      return candidatesFromFreelancersData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts all candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortAllCandidates = (page, filterAndSort) => {\n  const token = getToken();\n  console.log(':::::Filtered allCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortSentCandidates = (page, filterAndSort) => {\n  console.log(\"Filtered\", filterAndSort);\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByStatuses = (selectedRecruiter, selectedCompany, selectedVacancy, selectedTag, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByStatuses`, {\n  // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByTags = (selectedRecruiter, selectedCompany, selectedVacancy, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByTags`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      // tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getStatuses = () => {\n  const token = getToken();\n  return fetch(`${URL}/main/getStatuses`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByVacancies = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByVacancies`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TableRow = ({\r\n  vacancyId,\r\n  vacancy,\r\n  quantity,\r\n  recruiterName,\r\n  conpanyName,\r\n  recruiters,\r\n  companies,\r\n}) => {\r\n  let companyId;\r\n  companies.find((company) => {\r\n    if (company.name === conpanyName) companyId = company.id;\r\n  });\r\n\r\n  let recruiterId;\r\n  recruiters.find((recruiter) => {\r\n    if (recruiter.name === recruiterName) recruiterId = recruiter.id;\r\n  });\r\n\r\n  return (\r\n    <tr>\r\n      <td className='text-center'>\r\n        <Link to={`/vacancies/${vacancyId}`} target='_blank'>\r\n          {\" \"}\r\n          {vacancy}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/companies/${companyId}`} target='_blank'>\r\n          {\" \"}\r\n          {conpanyName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/users/${recruiterId}`} target='_blank'>\r\n          {recruiterName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <div>{quantity}</div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default TableRow;\r\n"],"sourceRoot":""}