{"version":3,"sources":["components/Admin/Acquisition funnel/Acquisition funnel.js"],"names":["AcquisitionFunnel","props","fetchRecruiters","a","getUsers","users","recruiters","staff","filter","user","role_id","setState","fetchCompanies","getCompanies","companies_result","companies","fetchVacancies","selectedCompany","state","getVacancies","id","vacancies_result","vacancies","fetchTags","getTags","tags","selectedTags","fetchCandidatesData","selectedRecruiter","selectedVacancy","selectedStartDate","selectedEndDate","getCandidatesAmountByTags","undefined","data","funnelData","main","pieChartData","reject","fetchStatuses","getStatuses","statuses","selectedStatuses","handleRecruiterSelect","handleCompanySelect","handleVacancySelect","handleTagsSelect","handleStatusChange","handleDate","target","name","value","renderPieChart","total","Object","entries","count","series","push","category","color","title","position","type","field","categoryField","labels","visible","content","formatedNumber","Number","dataItem","toLocaleString","style","minimumFractionDigits","replaceAll","renderFunnelChart","result","reduceRight","acc","index","array","currentKey","currentValue","prev","prevKey","selectedTag","length","stat","percentage","reduce","acc_","parseFloat","toFixed","final_data","dynamicSlope","dynamicHeight","margin","width","height","text","colorField","background","format","render","point","date","Date","end_date","toJSON","slice","setMonth","getMonth","start_date","this","prevProps","prevState","marginBottom","fontSize","xs","sm","md","lg","xl","className","options","getOptionValue","getOptionLabel","placeholder","onChange","company","vacancy","label","isMulti","tag","Component","String","prototype","search","replace","split","join"],"mappings":"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","file":"static/js/51.6c194790.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Col, FormGroup, Input, Row} from \"reactstrap\";\nimport Select from \"react-select\";\nimport {getUsers} from \"../../../utils/api/users\"; // вакансии\nimport {getCompanies} from \"../../../utils/api/company\"; // компании\nimport {getVacancies, getTags} from \"../../../utils/api/vacancy\"; // вакансии и теги\nimport {getStatuses, getCandidatesAmountByTags} from \"../../../utils/api/candidates\"; // вакансии и теги\nimport {\n  Chart,\n  ChartTitle,\n  ChartLegend,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartTooltip,\n  ChartSeriesLabels,\n} from \"@progress/kendo-react-charts\";\n// Import the styles\nimport {styles} from \"../../../assets/css/analitycs.css\";\n\nexport default class AcquisitionFunnel extends Component {\n  constructor(props) {\n    super(props);\n\n    let date = new Date();\n    let end_date = date.toJSON().slice(0, 10);\n    date.setMonth(date.getMonth() - 1);\n    let start_date = date.toJSON().slice(0, 10);\n\n    this.state = {\n      recruiters: [],\n      companies: [],\n      vacancies: [],\n      tags: [],\n      // statuses: [],\n\n      selectedRecruiter: null,\n      selectedCompany: null,\n      selectedVacancy: null,\n      selectedTags: null,\n      // selectedStatuses: null,\n      selectedStartDate: start_date,\n      selectedEndDate: end_date,\n\n      funnelData: null,\n      pieChartData: null,\n      dynamicSlope: true,\n      dynamicHeight: false\n    };\n  }\n\n  componentDidMount() { // тут пишеться те, що потрібно підгрузити з АПІ\n    this.fetchRecruiters();\n    this.fetchCompanies();\n    this.fetchVacancies();\n    this.fetchTags();\n    this.fetchCandidatesData();\n    this.fetchStatuses();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter ||\n      this.state.selectedCompany !== prevState.selectedCompany ||\n      this.state.selectedVacancy !== prevState.selectedVacancy ||\n      this.state.selectedTags !== prevState.selectedTags ||\n      this.state.selectedStartDate !== prevState.selectedStartDate ||\n      this.state.selectedEndDate !== prevState.selectedEndDate) {\n      this.fetchCandidatesData();\n    }\n    if (this.state.selectedCompany !== prevState.selectedCompany) {\n      this.fetchVacancies();\n    }\n\n  }\n\n  fetchRecruiters = async () => {\n    const users = await getUsers();\n    const recruiters = users.staff.filter((user) => user.role_id === 2); // recruiter\n\n    this.setState({recruiters});\n  };\n\n  fetchCompanies = async () => {\n    let companies_result = await getCompanies(0, 1);\n    const companies = companies_result.companies;\n    this.setState({companies});\n  };\n\n  fetchVacancies = async () => {\n    const {selectedCompany} = this.state;\n    const vacancies_result = await getVacancies(selectedCompany !== null ? selectedCompany.id : null);\n    const vacancies = vacancies_result.vacancies;\n    this.setState({vacancies});\n  };\n\n  fetchTags = async () => {\n    const tags = await getTags({'main': true});\n    this.setState({tags});\n    this.setState({selectedTags: tags});\n  };\n\n  fetchCandidatesData = async () => {\n    const {selectedRecruiter, selectedCompany, selectedVacancy, selectedStartDate, selectedEndDate} = this.state;\n    let data = await getCandidatesAmountByTags(\n      selectedRecruiter ? selectedRecruiter.id : 0,\n      selectedCompany ? selectedCompany.id : 0,\n      selectedVacancy ? selectedVacancy.id : 0,\n      selectedStartDate, selectedEndDate);\n    if (data !== undefined) {\n      let funnelData = data.data.main;\n      let pieChartData = data.data.reject;\n\n      this.setState({funnelData});\n      this.setState({pieChartData});\n    } else {\n      this.setState({funnelData: null});\n    }\n  };\n\n  fetchStatuses = async () => {\n    const statuses = await getStatuses();\n    this.setState({statuses});\n    this.setState({selectedStatuses: statuses});\n  };\n\n\n  handleRecruiterSelect = (selectedRecruiter) => {\n    this.setState({selectedRecruiter});\n  };\n\n  handleCompanySelect = (selectedCompany) => {\n    this.setState({selectedCompany});\n  };\n\n  handleVacancySelect = (selectedVacancy) => {\n    this.setState({selectedVacancy});\n  };\n\n  handleTagsSelect = (selectedTags) => {\n    this.setState({selectedTags});\n  };\n\n  handleStatusChange = (selectedStatuses) => {\n    this.setState({selectedStatuses});\n  };\n\n  handleDate = ({target: {name, value}}) => {\n    this.setState({[name]: value});\n  };\n\n\n  renderPieChart = () => {\n\n    const {pieChartData} = this.state;\n    let total = 0;\n    if (pieChartData !== undefined && pieChartData !== null) {\n      for (const [index, value] of Object.entries(pieChartData)) {\n        total += value.count;\n      }\n\n      let series = [];\n      for (const [index, value] of Object.entries(pieChartData)) {\n        if (value.count > 0) {\n          series.push({\n            category: value.name,\n            value: value.count / total,\n            color: value.color\n          });\n        }\n      }\n\n      const labelContent = (props) => {\n        let formatedNumber = Number(props.dataItem.value).toLocaleString(undefined, {\n          style: 'percent',\n          minimumFractionDigits: 2\n        });\n        return `${props.dataItem.category.replaceAll(\" \", \"\\n\") + \"\\n\"} ${formatedNumber}`;\n        // return `${props.dataItem.category.replaceAll(\" \", \"\\n\")} ${props.dataItem.value}`;\n\n      };\n      return (\n\n        <Chart title=\"World Population by Broad Age Groups\">\n          <ChartLegend position=\"bottom\"/>\n          <ChartSeries>\n            <ChartSeriesItem type=\"pie\" data={series} field=\"value\" categoryField=\"category\"\n                             labels={{visible: true, content: labelContent}}/>\n          </ChartSeries>\n        </Chart>\n      );\n    }\n    // }\n    // else {\n    //   return (<p>No data found</p>);\n    // }\n    // }\n\n  };\n\n\n  renderFunnelChart = () => {\n    const {funnelData, selectedTags} = this.state;\n\n    if (funnelData !== null && funnelData !== undefined) {\n      const result = Object.entries(funnelData).reduceRight(\n        (acc, [currentKey, currentValue], index, array) => {\n          const prev = array[index + 1];\n          if (prev) {\n            const [prevKey] = prev;\n            acc[currentKey] = {\n              ...currentValue,\n              count: acc[prevKey].count + currentValue.count\n            };\n          } else {\n            acc[currentKey] = currentValue;\n          }\n          return acc;\n        },\n        {}\n      );\n\n      let data = [];\n      for (const [index, value] of Object.entries(result)) {\n        if (selectedTags !== null) {\n          let in_tags = selectedTags.filter((selectedTag) => selectedTag.id === value.id);\n          if (in_tags.length > 0) {\n            data.push({\n              stat: value.name,\n              count: value.count,\n              color: value.color,\n              percentage: 100\n            });\n          }\n        }\n      }\n//\n      data = data.reduce(\n        (acc_, currentValue, index, array) => {\n          const prev = array[index - 1];\n\n          if (prev) {\n            currentValue.percentage = (parseFloat(currentValue.count) * 100 / parseFloat(prev.count)).toFixed(0)\n          }\n\n          acc_[index] = currentValue;\n\n          return acc_;\n        },\n        {}\n      );\n\n      let final_data = [];\n      for (const [index, value] of Object.entries(data)) {\n        final_data.push({\n          stat: value.stat + ' ' + value.percentage + '%',\n          count: value.count,\n          color: value.color,\n        });\n      }\n\n      const tooltipRender = (({point = {}}) => (point.category));\n\n      const {dynamicSlope, dynamicHeight} = this.state;\n      return (\n\n        <Chart style={{margin: \"0 auto\", width: 300, height: 350}}>\n          <ChartTitle text=\"Acquisition funnel\"/>\n          <ChartSeries style={{height: 350}}>\n            <ChartSeriesItem\n              type=\"funnel\"\n              data={final_data}\n              categoryField=\"stat\"\n              field=\"count\"\n              colorField=\"color\"\n              dynamicHeight={dynamicHeight}\n              dynamicSlope={dynamicSlope}\n            >\n              <ChartSeriesLabels color=\"black\" background=\"none\" format=\"N0\"/>\n            </ChartSeriesItem>\n          </ChartSeries>\n          <ChartTooltip render={tooltipRender}/>\n          <ChartLegend visible={false}/>\n        </Chart>\n      );\n      // }\n      // else {\n      //   return (<p>No data found</p>);\n      // }\n    }\n\n  };\n\n\n  render() {\n    const {recruiters, selectedRecruiter} = this.state;\n    const {companies, selectedCompany} = this.state;\n    const {vacancies, selectedVacancy} = this.state;\n    const {tags, selectedTags} = this.state;\n    const {selectedStartDate, selectedEndDate} = this.state;\n\n    return (\n      <>\n        <Row style={{marginBottom: \"1rem\"}}>\n          <Col>\n            <h1 style={{marginBottom: 0, fontSize: 24}}>Acquisition funnel</h1>\n          </Col>\n        </Row>\n        <Row style={{marginBottom: \"1rem\"}}>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n            <FormGroup className=\"filter-select\">\n              <label className=\"date-filter-label\">Filters</label>\n              <Select\n                style={{marginBottom: 15}}\n                value={selectedRecruiter}\n                options={recruiters}\n                getOptionValue={(user) => user.id}\n                getOptionLabel={(user) => user.name}\n                placeholder=\"Recruiters\"\n                onChange={this.handleRecruiterSelect}\n              />\n            </FormGroup>\n            <FormGroup className=\"filter-select\">\n              <Select\n                style={{marginBottom: \"1rem\"}}\n                value={selectedCompany}\n                options={companies}\n                getOptionValue={(company) => company.id}\n                getOptionLabel={(company) => company.name}\n                placeholder=\"Companies\"\n                onChange={this.handleCompanySelect}\n              />\n            </FormGroup>\n            <FormGroup className=\"filter-select\">\n              <Select\n                style={{marginBottom: \"1rem\"}}\n                value={selectedVacancy}\n                options={vacancies}\n                getOptionValue={(vacancy) => vacancy.id}\n                getOptionLabel={(vacancy) => vacancy.label}\n                placeholder=\"Vacancies\"\n                onChange={this.handleVacancySelect}\n              />\n            </FormGroup>\n            <FormGroup className=\"filter-select\">\n              <Select\n                style={{marginBottom: \"1rem\"}}\n                isMulti\n                value={selectedTags}\n                options={tags}\n                getOptionValue={(tag) => tag.id}\n                getOptionLabel={(tag) => tag.name}\n                placeholder=\"Tags\"\n                onChange={this.handleTagsSelect}\n              />\n            </FormGroup>\n          </Col>\n          <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n            <Row style={{marginBottom: \"1rem\"}}>\n              {this.renderFunnelChart()}\n            </Row>\n          </Col>\n          <Col lg={6} md={6}>\n            <Row style={{marginBottom: \"1rem\"}}>\n              <Col lg={6} md={6}>\n                <FormGroup>\n                  <label className=\"date-filter-label\">Date From</label>\n                  <Input\n                    id=\"date-from\"\n                    type=\"date\"\n                    name=\"selectedStartDate\"\n                    value={selectedStartDate}\n                    onChange={this.handleDate}\n                  />\n                </FormGroup>\n              </Col>\n              <Col lg={6} md={6}>\n                <FormGroup>\n                  <label className=\"date-filter-label\">Date To</label>\n                  <Input\n                    id=\"date-to\"\n                    type=\"date\"\n                    name=\"selectedEndDate\"\n                    value={selectedEndDate}\n                    onChange={this.handleDate}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                {this.renderPieChart()}\n              </Col>\n            </Row>\n          </Col>\n\n        </Row>\n\n      </>\n\n    );\n  }\n}\n\nString.prototype.replaceAll = function (search, replace) {\n  return this.split(search).join(replace);\n};\n"],"sourceRoot":""}