{"version":3,"sources":["components/Admin/Vacancy dashboard/Canban.js","utils/api/company.js","utils/api/users.js","utils/api/candidates.js","components/Admin/Vacancy dashboard/TableRow.js"],"names":["Kanban","state","recruiters","companies","statuses","selectedRecruiter","selectedCompany","canbanData","lanes","fetchCompanies","a","getCompanies","companies_result","filter","company","vacancies","indexOf","id","setState","fetchStatuses","getStatuses","fetchCanbanData","getCandidatesGrouped","candidates","length","forEach","status","i","arr","cards","Object","entries","data","candidate","main","other_vacancies","status_id","map","vacancy","style","backgroundColor","color","display","padding","margin","fontSize","company_name","platform_name","candidate_url","candidate_id","push","title","href","candidate_name","description","marginLeft","label","date","metadata","sha","fetchRecruiters","getUsers","users","staff","user","role_id","loading","className","handleRecruiterSelect","handleCompanySelect","handleCardDragEnd","value","console","log","this","prevProps","prevState","justifyContent","maxWidth","marginBottom","marginTop","alignSelf","xs","sm","md","lg","xl","options","isClearable","getOptionValue","getOptionLabel","name","placeholder","onChange","handleDragEnd","Component","URL","getToken","localStorage","getItem","page","isActive","withRecruiters","token","fetch","method","headers","Authorization","then","response","ok","json","Error","statusText","nazva","logo","email","skype","phone","vacancy_count","candidates_to_company_count","companiesCount","Count","totalPages","Pages","currentPage","current_page","perPage","per_page","catch","error","filterAllCompanies","body","JSON","stringify","createNewCompany","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","getCompanyComments","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","content","updateCandidateStatus","uploadCompanyLogo","file","obj","updateCompanyInfo","companyInfo","addUserComment","comment","editCompanyComment","deleteUserComment","commentId","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","values","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","editCompanyContact","deleteCompanyContact","updateCompanyInfoProfile","key","partners","freelancers","freeLancers","getAllCandidates","allCandidates","allCandidatesCount","allTotalPages","Page","allPerPage","currentAllPage","allPlatforms","allStatuses","allRecruiters","recruiter","allSeniority","getSentCandidates","sentCandidates","sentCandidatesCount","sentTotalPages","sentPerPage","currentSentPage","sentPlatforms","sentCompanies","sentStatuses","sentRecruiters","loadingSent","getCandidatesFromFreelancers","candidatesFF","candidatesCountFF","totalPagesFF","perPageFF","statusesFF","currentPageFF","filterAndSortAllCandidates","filterAndSortSentCandidates","getCandidatesAmountByStatuses","selectedVacancy","selectedTag","startDate","endDate","recruiter_id","company_id","vacancy_id","tag_id","start_date","end_date","getCandidatesAmountByTags","getCandidatesAmountByVacancies","TableRow","companyId","recruiterId","vacancyId","quantity","recruiterName","conpanyName","find","to","target"],"mappings":"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","file":"static/js/50.a914a605.chunk.js","sourcesContent":["// Core;\nimport React, {Component} from \"react\";\nimport Select from \"react-select\";\nimport {Col, Row, Table, FormGroup} from \"reactstrap\";\nimport Board from 'react-trello'\n// Components\nimport TableRow from \"./TableRow\";\nimport {getUsers} from \"../../../utils/api/users\";\nimport {getCompanies} from \"../../../utils/api/company\";\nimport {getCandidatesAmountByStatuses, getCandidatesGrouped, getStatuses} from \"../../../utils/api/candidates\";\n\nexport default class Kanban extends Component {\n  state = {\n    recruiters: [],\n    companies: [],\n    statuses: [],\n\n    selectedRecruiter: null,\n    selectedCompany: null,\n\n    canbanData: {\n      lanes: []\n    },\n  };\n\n  componentDidMount() {\n    this.fetchCompanies();\n    this.fetchRecruiters();\n    this.fetchStatuses();\n    this.fetchCanbanData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.selectedRecruiter !== prevState.selectedRecruiter ||\n      this.state.selectedCompany !== prevState.selectedCompany ||\n      this.state.statuses !== prevState.statuses\n    ) {\n      this.fetchCanbanData();\n    }\n\n    if (this.state.selectedRecruiter !== prevState.selectedRecruiter) {\n      this.fetchCompanies();\n    }\n  }\n\n  fetchCompanies = async () => {\n    let companies_result = await getCompanies(0, 1, 1);\n    const {selectedRecruiter} = this.state;\n    const companies = companies_result.companies.filter((company) => company.vacancies > 0 &&\n      (selectedRecruiter !== null && company.recruiters.indexOf(selectedRecruiter.id) + 1 > 0 || selectedRecruiter === null));\n    this.setState({companies});\n  };\n\n  fetchStatuses = async () => {\n    const statuses = await getStatuses();\n    this.setState({statuses});\n  };\n\n  fetchCanbanData = async () => {\n    const {selectedCompany, selectedRecruiter, statuses} = this.state;\n\n    let candidates = await getCandidatesGrouped(\n      selectedRecruiter ? selectedRecruiter.id : 0,\n      selectedCompany ? selectedCompany.id : 0,\n    );\n    let canbanData = {\n      lanes: []\n    };\n\n    if (statuses.length > 0 && candidates !== null) {\n\n      statuses.forEach(function (status, i, arr) {\n        let cards = [];\n        Object.entries(candidates.data).forEach(function (candidate, i, arr) {\n\n          let main = candidate[1].main;\n          let other_vacancies = candidate[1].vacancies;\n\n          if (main.status_id === status.id) {\n            let vacancies = '';\n\n            vacancies = other_vacancies.map(vacancy => (\n              <span style={{\n                backgroundColor: vacancy.color,\n                display: \"inline-block\",\n                padding: \"1px 5px\",\n                margin: \"3px\",\n                fontSize: \"10px\"\n              }}>\n              {vacancy.company_name} ({vacancy.platform_name})\n              </span>));\n            let candidate_url = \"/#/candidates/\" + main.candidate_id;\n            cards.push(\n              {\n                id: 'Card' + main.candidate_id,\n                title: (<>< a href={candidate_url}>{main.candidate_name}</a></>),\n                description: (\n                  <>\n                    <h4 style={{\n                      fontSize: \"14px\",\n                      marginLeft: \"5px\"\n                    }}>\n                      {main.company_name} ({main.platform_name})\n                    </h4>\n                    {vacancies}\n                  </>\n                ),\n\n                label: main.date,\n                metadata: {sha: 'be312a1'}\n              })\n          }\n        });\n        canbanData.lanes.push({\n          id: 'lane' + status.id,\n          title: status.label,\n          label: cards.length,\n          cards: cards\n        });\n\n      });\n    }\n\n    this.setState({canbanData});\n  };\n\n  fetchRecruiters = async () => {\n    const users = await getUsers();\n\n    const recruiters = users.staff.filter((user) => user.role_id === 2);\n    this.setState({recruiters});\n  };\n\n\n  loading = () => (\n    <div className='animated fadeIn pt-1 text-center'>Loading...</div>\n  );\n\n  handleRecruiterSelect = (selectedRecruiter) => {\n    this.setState({selectedRecruiter});\n  };\n\n  handleCompanySelect = (selectedCompany) => {\n    this.setState({selectedCompany});\n  };\n\n  handleCardDragEnd = (value) => {\n   console.log(value);\n  };\n\n  render() {\n    const {\n      canbanData,\n      recruiters,\n      companies,\n      selectedRecruiter,\n      selectedCompany,\n    } = this.state;\n\n    return (\n      <div className='animated fadeIn'>\n        <Row>\n          <Col\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              maxWidth: 180,\n              marginBottom: \"0.5rem\",\n            }}\n          >\n            <h1 style={{marginBottom: 0, marginTop: 20, fontSize: 24}}>\n              Canban\n            </h1>\n            <span\n              style={{\n                alignSelf: \"flex-end\",\n                color: \"var(--gray)\",\n              }}\n            ></span>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{marginBottom: 15}}\n                value={selectedRecruiter}\n                options={recruiters}\n                isClearable\n                getOptionValue={(user) => user.id}\n                getOptionLabel={(user) => user.name}\n                placeholder='Recruiters'\n                onChange={this.handleRecruiterSelect}\n              />\n            </FormGroup>\n          </Col>\n          <Col xs='12' sm='12' md='12' lg='3' xl='3'>\n            <FormGroup className='filter-select'>\n              <Select\n                style={{marginBottom: \"1rem\"}}\n                value={selectedCompany}\n                options={companies}\n                isClearable\n                getOptionValue={(company) => company.id}\n                getOptionLabel={(company) => company.name}\n                placeholder='Companies'\n                onChange={this.handleCompanySelect}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs='12' md='12' xl='12'>\n            <Board\n              style={{backgroundColor: '#edf0f4'}}\n              data={canbanData}\n              handleDragEnd={this.handleCardDragEnd}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Boolean}  withRecruiters find recruiters working with with company- true, with out recruiters - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive, withRecruiters = false) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}/${withRecruiters}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        recruiters: company.recruiters,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Edit companies comment\n *\n * @param {Number} id comment id\n * @param {String} comment comment\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","const URL = \"http://f2.uppeople.space/api\";\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n/**\r\n * Fetches all users from an api\r\n *\r\n * @returns {Promise} Promise object represents operation result\r\n */\r\nexport const getUsers = () => {\r\n  const token = getToken();\r\n\r\n  return fetch(`${URL}/admin/all-staff`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error(`Error while fetching: ${response.statusText}`);\r\n    })\r\n    .then(data => {\r\n      const users = {\r\n        staff: data.users,\r\n        partners: data.partners,\r\n        freelancers: data.freeLancers\r\n      };\r\n\r\n      return users;\r\n    })\r\n    .catch(error => console.log(\"error in fetch: \", error));\r\n};\r\n","const URL = \"http://f2.uppeople.space/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\n\n\nexport const getAllCandidates = page => {\n  const token = getToken();\n  console.log(':::::getAllCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches sent candidates\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getSentCandidates = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches candidates sent by freelancer\n *\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesFromFreelancers = page => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewCandidatesFreelancerOnVacancies/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesFromFreelancersData = {\n        candidatesFF: data.candidates,\n        candidatesCountFF: data.Count,\n        totalPagesFF: data.Page,\n        perPageFF: data.perPage,\n        statusesFF: data.statuses,\n        currentPageFF: data.currentPage\n      };\n\n      return candidatesFromFreelancersData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts all candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortAllCandidates = (page, filterAndSort) => {\n  const token = getToken();\n  console.log(':::::Filtered allCandidates');\n  return fetch(`${URL}/main/allCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const allCandidatesData = {\n        allCandidates: data.candidates,\n        allCandidatesCount: data.Count,\n        allTotalPages: data.Page,\n        allPerPage: data.perPage,\n        currentAllPage: data.currentPage,\n        allPlatforms: data.platforms,\n        allStatuses: data.statuses,\n        allRecruiters: data.recruiter,\n        allSeniority: data.seniority,\n        loading: false\n      };\n\n      return allCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @param {Number} page current page\n * @param {Object} filterAndSort object with sorted fields\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortSentCandidates = (page, filterAndSort) => {\n  console.log(\"Filtered\", filterAndSort);\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCandidates/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n\n      const sentCandidatesData = {\n        sentCandidates: data.candidates,\n        sentCandidatesCount: data.Count,\n        sentTotalPages: data.Page,\n        sentPerPage: data.perPage,\n        currentSentPage: data.currentPage,\n        sentPlatforms: data.platforms,\n        sentCompanies: data.company,\n        sentStatuses: data.statuses,\n        sentRecruiters: data.recruiter,\n        loadingSent: false\n      };\n\n      return sentCandidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByStatuses = (selectedRecruiter, selectedCompany, selectedVacancy, selectedTag, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByStatuses`, {\n  // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByTags = (selectedRecruiter, selectedCompany, selectedVacancy, startDate, endDate) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByTags`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n      vacancy_id: selectedVacancy,\n      // tag_id: selectedTag,\n      start_date: startDate,\n      end_date: endDate,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getStatuses = () => {\n  const token = getToken();\n  return fetch(`${URL}/main/getStatuses`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesAmountByVacancies = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesAmountByVacancies`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n\n/**\n * Filters and sorts sent candidates\n *\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCandidatesGrouped = (selectedRecruiter, selectedCompany) => {\n  const token = getToken();\n  return fetch(`${URL}/main/getCandidatesGrouped`, {\n    // return fetch(\"https://enpg0sbpob31.x.pipedream.net/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      recruiter_id: selectedRecruiter,\n      company_id: selectedCompany,\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TableRow = ({\r\n  vacancyId,\r\n  vacancy,\r\n  quantity,\r\n  recruiterName,\r\n  conpanyName,\r\n  recruiters,\r\n  companies,\r\n}) => {\r\n  let companyId;\r\n  companies.find((company) => {\r\n    if (company.name === conpanyName) companyId = company.id;\r\n  });\r\n\r\n  let recruiterId;\r\n  recruiters.find((recruiter) => {\r\n    if (recruiter.name === recruiterName) recruiterId = recruiter.id;\r\n  });\r\n\r\n  return (\r\n    <tr>\r\n      <td className='text-center'>\r\n        <Link to={`/vacancies/${vacancyId}`} target='_blank'>\r\n          {\" \"}\r\n          {vacancy}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/companies/${companyId}`} target='_blank'>\r\n          {\" \"}\r\n          {conpanyName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <Link to={`/users/${recruiterId}`} target='_blank'>\r\n          {recruiterName}\r\n        </Link>\r\n      </td>\r\n      <td className='text-center'>\r\n        <div>{quantity}</div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default TableRow;\r\n"],"sourceRoot":""}